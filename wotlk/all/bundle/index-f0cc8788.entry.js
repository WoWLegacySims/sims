var t=Object.defineProperty,e=(e,a,s)=>(((e,a,s)=>{a in e?t(e,a,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[a]=s})(e,"symbol"!=typeof a?a+"":a,s),s);import{T as a}from"./index-6d46f689.chunk.js";import{S as s,eC as r,a_ as i,$ as n,C as l,eD as o,T as c,eE as d,aK as p,ba as m,bQ as h,a1 as u,bq as f,eF as g,as as y,az as I,a as S,b,an as P,p as D,b0 as E,b1 as k,a7 as C,ay as v,ax as T,c as w,bp as R,eG as O,aO as U,B as W,N as x,aj as F,c_ as A,eH as L,eI as B,A as M,e9 as H,e8 as $,dD as j,el as V,e7 as q,eJ as z,ez as N,ea as J,s as G,dT as K,eK as _,eL as X,I as Q,ai as Z,Y,eM as tt,dS as et,b7 as at,dA as st,dZ as rt,d_ as it,aW as nt}from"./detailed_results-cef766fa.chunk.js";import{as as lt,at as ot,au as ct,av as dt,aw as pt,P as mt,ax as ht,ay as ut,az as ft,aA as gt,aB as yt,v as It,aC as St,C as bt,aD as Pt,aE as Dt,K as Et,aF as kt,S as Ct,aG as vt}from"./preset_utils-df16cf84.chunk.js";import{T as Tt}from"./sim-e3be3c08.chunk.js";import{D as wt}from"./sim-9c7f3862.chunk.js";import{B as Rt}from"./sim-c831d27c.chunk.js";import{F as Ot}from"./sim-cb0b1d5d.chunk.js";import{F as Ut}from"./sim-9c0f7608.chunk.js";import{R as Wt}from"./sim-ab98c248.chunk.js";import{E as xt}from"./sim-3921c70e.chunk.js";import{E as Ft}from"./sim-c27add8d.chunk.js";import{R as At}from"./sim-1de654f8.chunk.js";import{H as Lt}from"./sim-06e526f0.chunk.js";import{M as Bt}from"./sim-41fa2279.chunk.js";import{R as Mt}from"./sim-1a7a5523.chunk.js";import{H as Ht}from"./sim-f3a6e5a0.chunk.js";import{P as $t}from"./sim-294f87eb.chunk.js";import{R as jt}from"./sim-9e5c7a3d.chunk.js";import{H as Vt}from"./sim-a6ae3baa.chunk.js";import{S as qt}from"./sim-68f248a6.chunk.js";import{S as zt}from"./sim-dcd4a01f.chunk.js";import{W as Nt}from"./sim-fc35f369.chunk.js";import{P as Jt}from"./sim-4e91d234.chunk.js";import{W as Gt}from"./sim-4109829b.chunk.js";import"./suggest_gems_action-b052bea0.chunk.js";import"./apl_utils-4e52f302.chunk.js";import"./totem_inputs-5b938d7e.chunk.js";import"./presets-c4769a69.chunk.js";const Kt={[s.SpecTankDeathknight]:(t,e)=>new Tt(t,e),[s.SpecDeathknight]:(t,e)=>new wt(t,e),[s.SpecBalanceDruid]:(t,e)=>new Rt(t,e),[s.SpecFeralDruid]:(t,e)=>new Ot(t,e),[s.SpecFeralTankDruid]:(t,e)=>new Ut(t,e),[s.SpecRestorationDruid]:(t,e)=>new Wt(t,e),[s.SpecElementalShaman]:(t,e)=>new xt(t,e),[s.SpecEnhancementShaman]:(t,e)=>new Ft(t,e),[s.SpecRestorationShaman]:(t,e)=>new At(t,e),[s.SpecHunter]:(t,e)=>new Lt(t,e),[s.SpecMage]:(t,e)=>new Bt(t,e),[s.SpecRogue]:(t,e)=>new Mt(t,e),[s.SpecHolyPaladin]:(t,e)=>new Ht(t,e),[s.SpecProtectionPaladin]:(t,e)=>new $t(t,e),[s.SpecRetributionPaladin]:(t,e)=>new jt(t,e),[s.SpecHealingPriest]:(t,e)=>new Vt(t,e),[s.SpecShadowPriest]:(t,e)=>new qt(t,e),[s.SpecSmitePriest]:(t,e)=>new zt(t,e),[s.SpecWarrior]:(t,e)=>new Nt(t,e),[s.SpecProtectionWarrior]:(t,e)=>new Jt(t,e),[s.SpecWarlock]:(t,e)=>new Gt(t,e)},_t=r.map(lt).map((t=>t.raidSimPresets)).flat(),Xt=[...new Set(_t.map((t=>t.spec)))];class Qt extends ot{constructor(t,a){super(t,a,"JSON Import",!0),e(this,"simUI"),this.simUI=a,this.descriptionElem.innerHTML="\n\t\t\t<p>\n\t\t\t\tImport settings from a JSON text file, which can be created using the JSON Export feature of this site.\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tTo import, paste the JSON text below and click, 'Import'.\n\t\t\t</p>\n\t\t"}async onImport(t){const e=o.fromJsonString(t,{ignoreUnknownFields:!0});this.simUI.fromProto(c.nextEventID(),e),this.close()}}class Zt extends ct{constructor(t,a){super(t,a,{title:"JSON Export",allowDownload:!0}),e(this,"simUI"),this.simUI=a,this.init()}getData(){return JSON.stringify(o.toJson(this.simUI.toProto()),null,2)}}class Yt extends ot{constructor(t,a){super(t,a,"WCL Import",!1),e(this,"queryCounter",0),e(this,"simUI"),e(this,"token",""),this.simUI=a,this.textElem.classList.add("small-textarea"),this.descriptionElem.innerHTML="\n\t\t\t<p>\n\t\t\t\tImports the entire raid from a WCL report.<br>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tTo import, paste the WCL report and fight link (https://classic.warcraftlogs.com/reports/REPORTID#fight=FIGHTID).<br>\n\t\t\t\tInclude the fight ID or else the first fight in the report will be used.<br>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tThe following are imported directly from the report:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Player Name</li>\n\t\t\t\t\t<li>Equipment (items, enchants, and gems)</li>\n\t\t\t\t\t<li>Faction (Alliance / Horde)</li>\n\t\t\t\t\t<li>Encounter: If the import link has a fight ID we try to match with a preset Encounter. Note that many Encounters are still unimplemented.</li>\n\t\t\t\t</ul>\n\n\t\t\t\tThe following are not available directly from the report data, but we try to infer them:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Talents: Log data only gives us the tree summary (e.g. '51/20/0') so we match this with the closest preset talent build.</li>\n\t\t\t\t\t<li>Glyphs: Glyphs are absent from log data, but we pair them with the inferred Talents.</li>\n\t\t\t\t\t<li>Race: Inferred from Race-specific abilties used in any fight if possible, or defaults to Spec-specific Race.</li>\n\t\t\t\t\t<li>Professions: Inferred from profession-locked items/enchants/gems.</li>\n\t\t\t\t\t<li>Buff assignments (Innervate, Unholy Frenzy, etc): Inferred from casts.</li>\n\t\t\t\t\t<li>Party Composition: Inferred from party-only effects, such as Heroic Presence, Prayer of Healing, or Vampiric Touch.</li>\n\t\t\t\t</ul>\n\n\t\t\t\tThe following are not imported, and instead use spec-specific defaults:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Rotation / Spec-specific options</li>\n\t\t\t\t\t<li>Consumes</li>\n\t\t\t\t\t<li>Paladin Blessings</li>\n\t\t\t\t</ul>\n\t\t\t</p>\n\t\t"}async getWCLBearerToken(){if(""==this.token){const t=await fetch("https://classic.warcraftlogs.com/oauth/token",{method:"POST",headers:{Authorization:"Basic "+btoa("963d31c8-7efa-4dde-87cf-1b254a8a2f8c:lRJVhujEEnF96xfUoxVHSpnqKN9v8bTqGEjutsO3")},body:new URLSearchParams({grant_type:"client_credentials"})}),e=await t.json();this.token=e.access_token}return this.token}async queryWCL(t){const e={"Content-Type":"application/json",Authorization:`Bearer ${await this.getWCLBearerToken()}`,Accept:"application/json"},a=`https://classic.warcraftlogs.com/api/v2/client?query=${t}`;this.queryCounter++;const s=await fetch(encodeURI(a),{method:"GET",headers:e}),r=await s.json();if(r?.errors?.length){const e=r.errors.map((t=>t.message)).join("\n");throw new Error(`GraphQL error: ${e}\n\nQuery: ${t}`)}return console.debug(`WCL query: ${t}\n\nResult: ${JSON.stringify(r)}`),r}async parseURL(t){const e=t.match(/classic\.warcraftlogs\.com\/reports\/([a-zA-Z0-9:]+)\/?(#.*fight=((\d+)|(last)))?/);if(!e)throw new Error(`Invalid WCL URL ${t}, must look like "classic.warcraftlogs.com/reports/XXXX"`);const a={reportID:e[1],fightID:""};if(e[2]&&e[3]&&"last"!=e[3])a.fightID=e[3];else{const t=`{\n\t\t\t\treportData {\n\t\t\t\t\treport(code: "${a.reportID}") {\n\t\t\t\t\t\tfights(killType: Kills, translate: true) {\n\t\t\t\t\t\t\tid, name\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}`,s=(await this.queryWCL(t)).data.reportData.report.fights;"last"==e[3]?a.fightID=String(s[s.length-1].id):a.fightID=String(s[0].id)}return console.debug(`Importing WCL report: ${JSON.stringify(a)}`),a}async getRateLimit(){return(await this.queryWCL("{\n\t    rateLimitData {\n\t      limitPerHour, pointsSpentThisHour, pointsResetIn\n\t    }\n\t  }")).data.rateLimitData}async onImport(t){this.importButton.disabled=!0,this.rootElem.style.cursor="wait";try{await this.doImport(t)}catch(e){console.error(e),alert("Failed import from WCL: "+e)}this.importButton.disabled=!1,this.rootElem.style.removeProperty("cursor")}async doImport(t){if(!t.length)throw new Error("No import link provided!");const e=await this.parseURL(t);await this.getRateLimit();const a=`{\n\t\t\treportData {\n\t\t\t\treport(code: "${e.reportID}") {\n\t\t\t\t\tguild {\n\t\t\t\t\t\tname faction {id}\n\t\t\t\t\t}\n\t\t\t\t\tplayerDetails: table(fightIDs: [${e.fightID}], dataType: Casts, killType: All, viewBy: Default)\n\t\t\t\t\tcombatantInfoEvents: events(fightIDs: [${e.fightID}], dataType:CombatantInfo, limit: 50) { data }\n\t\t\t\t\tfights(fightIDs: [${e.fightID}]) {\n\t\t\t\t\t\tstartTime, endTime, id, name\n\t\t\t\t\t}\n\n\t\t\t\t\treportCastEvents: events(dataType:Casts, endTime: 99999999, filterExpression: "${[ae,se].flat().map((t=>t.id)).map((t=>`ability.id = ${t}`)).join(" OR ")}", limit: 10000) { data }\n\n\t\t\t\t\tfightCastEvents: events(fightIDs: [${e.fightID}], dataType:Casts, filterExpression: "${[re].flat().map((t=>t.id)).map((t=>`ability.id = ${t}`)).join(" OR ")}", limit: 10000) { data }\n\n\t\t\t\t\tfightHealEvents: events(fightIDs: [${e.fightID}], dataType:Healing, filterExpression: "${[ie,ne].flat().map((t=>t.id)).map((t=>`ability.id = ${t}`)).join(" OR ")}", limit: 10000) { data }\n\n\t\t\t\t\tmanaTideTotem: events(fightIDs: [${e.fightID}], dataType:Resources, filterExpression: "ability.id = 39609", limit: 100) { data }\n\t\t\t\t}\n\t\t\t}\n\t\t}`,s=(await this.queryWCL(a)).data.reportData.report,r=s.playerDetails.data.entries;c.freezeAllAndDo((()=>{const t=c.nextEventID(),e=r.map((e=>new te(e,this.simUI,t)));this.inferRace(t,s,e),this.inferProfessions(t,s,e),this.inferAssignments(t,s,e),this.inferPartyComposition(t,s,e);const a=e.filter((t=>t.player.getClass()==l.ClassPaladin)).length,i=o.create({encounter:this.getEncounterProto(s),raid:this.getRaidProto(e),blessings:d(a)});this.simUI.clearRaid(t),this.simUI.fromProto(t,i)})),this.close()}inferRace(t,e,a){a.forEach((e=>e.player.setRace(t,i.RaceUnknown)));let s=e.guild?.faction?.id||this.simUI.raidPicker?.getCurrentFaction()||p.Horde;e.combatantInfoEvents.data.forEach((e=>{e.auras.filter((t=>28878==t.ability)).forEach((e=>{const r=a.find((t=>t.id==e.source));r&&r.player.getRace()!=i.RaceDraenei&&(console.log(`Inferring player ${r.name} has race ${m.get(i.RaceDraenei)} from Heroic Presence aura event`),r.player.setRace(t,i.RaceDraenei),s=p.Alliance)}))}));const r=h(e.reportCastEvents.data,(t=>String(t.abilityGameID)));ae.forEach((e=>{(r[e.id]||[]).forEach((r=>{const i=a.find((t=>t.id==r.sourceID));i&&(console.log(`Inferring player ${i.name} has race ${m.get(e.race)} from ${e.name} event`),i.player.setRace(t,e.race),s=u[e.race])}))})),a.forEach((e=>{e.player.getRace()==i.RaceUnknown&&e.player.setRace(t,e.preset.defaultFactionRaces[s])}))}inferProfessions(t,e,a){const s=h(e.reportCastEvents.data,(t=>String(t.abilityGameID)));se.forEach((t=>{(s[t.id]||[]).forEach((e=>{const s=a.find((t=>t.id==e.sourceID));s&&!s.inferredProfessions.includes(t.profession)&&(console.log(`Inferring player ${s.name} has profession ${f.get(t.profession)} from ${t.name} event`),s.inferredProfessions.push(t.profession))}))})),a.forEach((e=>{let a=g(e.inferredProfessions.concat(e.player.getGear().getProfessionRequirements()));0==a.length?a=[n.Engineering,n.Jewelcrafting]:1==a.length&&(a[0]!=n.Engineering?a.push(n.Engineering):a.push(n.Jewelcrafting)),e.player.setProfessions(t,a)}))}inferAssignments(t,e,a){const s=h(e.fightCastEvents.data,(t=>String(t.abilityGameID)));re.forEach((e=>{(s[e.id]||[]).forEach((s=>{const r=a.find((t=>t.id==s.sourceID)),i=a.find((t=>t.id==s.targetID));if(r&&i&&r.player.getClass()==e.class){const a=e.applyFunc(r.player,i.toUnitReference());r.player.setSpecOptions(t,a),console.log(`Inferring player ${r.name} is targeting ${i.name} with ${e.name} from cast event`)}}))}))}inferPartyComposition(t,e,a){const s=(t,e,a)=>{(t.addPlayerInParty(e)||e.addPlayerInParty(t))&&console.log(`Inferring players ${t.name} and ${e.name} in same party from ${a} event`)},r=h(e.fightHealEvents.data,(t=>String(t.abilityGameID)));ie.forEach((t=>{(r[t.id]||[]).forEach((e=>{const r=a.find((t=>t.id==e.sourceID)),i=a.find((t=>t.id==e.targetID));r&&i&&s(r,i,t.name)}))})),ne.forEach((t=>{const e=r[t.id]||[],i=h(e,(t=>String(t.timestamp)+String(t.sourceID)));for(const[r,n]of Object.entries(i)){const e=n.map((t=>a.find((e=>e.id==t.targetID))));for(let a=0;a<e.length;a++)for(let r=0;r<e.length;r++)a!=r&&e[a]&&e[r]&&s(e[a],e[r],t.name)}})),e.combatantInfoEvents.data.forEach((t=>{const e=a.find((e=>e.id==t.sourceID));t.auras.filter((t=>28878==t.ability)).forEach((t=>{const r=a.find((e=>e.id==t.source));r&&e&&s(r,e,"Heroic Presence")}))}));let i=a.filter((t=>t.playersInParty.length>0)),n=0;for(;i.length>0;){let t=[i[0]].concat(i[0].playersInParty),e=0;for(;t.length!=e;)e=t.length,t=g(t.map((t=>[t].concat(t.playersInParty))).flat());const a=n;n++,t.forEach(((t,e)=>{t.raidIndex=5*a+e})),i=i.filter((e=>!t.includes(e)))}const l=[...Array(40).keys()];a.filter((t=>-1==t.raidIndex)).forEach((t=>{const e=l.find((t=>!a.some((e=>e.raidIndex==t))))??-1;if(-1==e)throw new Error("Invalid next idx");t.raidIndex=e}))}getEncounterProto(t){const e=t.fights[0],a=y.create({duration:(e.endTime-e.startTime)/1e3,targets:[]}),s=this.simUI.sim.db.getAllPresetEncounters().find((t=>t.path.includes(e.name)));return s&&s.targets.length&&s.targets.map((t=>t.target)).filter((t=>void 0!==t)).forEach((t=>a.targets.push(t))),0===a.targets.length&&a.targets.push(dt.defaultTargetProto()),a}getRaidProto(t){const e=I.create({parties:[...new Array(pt).keys()].map((t=>S.create({players:[...new Array(5).keys()].map((t=>b.create()))})))});return t.forEach((t=>{const a=t.raidIndex%5,s=(t.raidIndex-a)/5,r=t.player.toProto();e.parties[s].players[a]=r,P(D(r))&&e.tanks.push(t.toUnitReference())})),e}}class te{constructor(t,a,s){e(this,"data"),e(this,"id"),e(this,"name"),e(this,"type"),e(this,"raidIndex",-1),e(this,"simUI"),e(this,"fullType"),e(this,"spec"),e(this,"player"),e(this,"preset"),e(this,"inferredProfessions",[]),e(this,"playersInParty",[]),this.simUI=a,this.data=t,this.name=t.name,this.id=t.id,this.type=t.type;const r=t.icon.split("-")[1];this.fullType=this.type+r,console.log(`WCL spec: ${this.fullType}`);const i=ee[this.fullType]??null;if(null==i)throw new Error("Player type not implemented: "+this.fullType);if(this.spec=i,this.player=new mt(this.spec,a.sim),this.preset=te.getMatchingPreset(i,t.talents),void 0===this.preset)throw new Error("Could not find matching preset: "+JSON.stringify({name:this.name,type:this.fullType,talents:t.talents}).toString());this.player.applySharedDefaults(s),this.player.setTalentsString(s,this.preset.talents.talentsString),this.player.setGlyphs(s,this.preset.talents.glyphs),this.player.setConsumes(s,this.preset.consumes),this.player.setSpecOptions(s,this.preset.specOptions),this.player.setProfessions(s,[n.Engineering,n.Jewelcrafting]),this.player.setName(s,t.name),this.player.setGear(s,a.sim.db.lookupEquipmentSpec(E.create({items:t.gear.map((t=>k.create({id:t.id,enchant:t.permanentEnchant,gems:t.gems?t.gems.map((t=>t.id)):[]})))})))}static getMatchingPreset(t,e){const a=_t.filter((e=>e.spec==t));let s=0;if(a&&a.length>1){let t=999;a.forEach(((a,r)=>{const i=C(a.talents.talentsString),n=i.reduce(((t,a,s)=>t+Math.abs(e[s]?.guid-i[s])),0);n<t&&(s=r,t=n)}))}return a[s]}toUnitReference(){return v.create({type:T.Player,index:this.raidIndex})}addPlayerInParty(t){return t!=this&&!this.playersInParty.includes(t)&&(this.playersInParty.push(t),!0)}}const ee={DeathKnightBlood:s.SpecTankDeathknight,DeathKnightLichborne:s.SpecTankDeathknight,DeathKnightRuneblade:s.SpecDeathknight,DeathKnightBloodDPS:s.SpecDeathknight,DeathKnightFrost:s.SpecDeathknight,DeathKnightUnholy:s.SpecDeathknight,DruidBalance:s.SpecBalanceDruid,DruidFeral:s.SpecFeralDruid,DruidWarden:s.SpecFeralTankDruid,DruidGuardian:s.SpecFeralTankDruid,DruidRestoration:s.SpecRestorationDruid,HunterBeastMastery:s.SpecHunter,HunterSurvival:s.SpecHunter,HunterMarksmanship:s.SpecHunter,MageArcane:s.SpecMage,MageFire:s.SpecMage,MageFrost:s.SpecMage,PaladinHoly:s.SpecHolyPaladin,PaladinJusticar:s.SpecProtectionPaladin,PaladinProtection:s.SpecProtectionPaladin,PaladinRetribution:s.SpecRetributionPaladin,PriestHoly:s.SpecHealingPriest,PriestDiscipline:s.SpecHealingPriest,PriestShadow:s.SpecShadowPriest,PriestSmite:s.SpecSmitePriest,RogueAssassination:s.SpecRogue,RogueCombat:s.SpecRogue,RogueSubtlety:s.SpecRogue,ShamanElemental:s.SpecElementalShaman,ShamanEnhancement:s.SpecEnhancementShaman,ShamanRestoration:s.SpecRestorationShaman,WarlockDestruction:s.SpecWarlock,WarlockAffliction:s.SpecWarlock,WarlockDemonology:s.SpecWarlock,WarriorArms:s.SpecWarrior,WarriorFury:s.SpecWarrior,WarriorChampion:s.SpecWarrior,WarriorWarrior:s.SpecWarrior,WarriorGladiator:s.SpecWarrior,WarriorProtection:s.SpecProtectionWarrior},ae=[{id:25046,name:"Arcane Torrent (Energy)",race:i.RaceBloodElf},{id:28730,name:"Arcane Torrent (Mana)",race:i.RaceBloodElf},{id:50613,name:"Arcane Torrent (Runic Power)",race:i.RaceBloodElf},{id:26297,name:"Berserking",race:i.RaceTroll},{id:20572,name:"Blood Fury (AP)",race:i.RaceOrc},{id:33697,name:"Blood Fury (AP+SP)",race:i.RaceOrc},{id:33702,name:"Blood Fury (SP)",race:i.RaceOrc},{id:20589,name:"Escape Artist",race:i.RaceGnome},{id:20594,name:"Stoneform",race:i.RaceDwarf},{id:20549,name:"War Stomp",race:i.RaceTauren},{id:7744,name:"Will of the Forsaken",race:i.RaceUndead},{id:59752,name:"Will to Survive",race:i.RaceHuman}],se=[{id:55503,name:"Lifeblood",profession:n.Herbalism},{id:50305,name:"Skinning",profession:n.Skinning}],re=[{id:29166,name:"Innervate",class:l.ClassDruid,applyFunc:(t,e)=>{const a=t.getSpecOptions();return a.innervateTarget=e,a}},{id:10060,name:"Power Infusion",class:l.ClassPriest,applyFunc:(t,e)=>{const a=t.getSpecOptions();return a.powerInfusionTarget=e,a}},{id:57933,name:"Tricks of the Trade",class:l.ClassRogue,applyFunc:(t,e)=>{const a=t.getSpecOptions();return a.tricksOfTheTradeTarget=e,a}},{id:49016,name:"Unholy Frenzy",class:l.ClassDeathknight,applyFunc:(t,e)=>{const a=t.getSpecOptions();return a.unholyFrenzyTarget=e,a}}],ie=[{id:52042,name:"Healing Stream Totem"},{id:48076,name:"Holy Nova"},{id:48445,name:"Tranquility"},{id:15290,name:"Vampiric Embrace"}],ne=[{id:48072,name:"Prayer of Healing"}],le=-1;class oe extends w{constructor(t,a){super(t,"raid-picker-root"),e(this,"raidSimUI"),e(this,"raid"),e(this,"partyPickers"),e(this,"newPlayerPicker"),e(this,"currentDragPlayer",null),e(this,"currentDragPlayerFromIndex",le),e(this,"currentDragType",1),e(this,"currentDragParty",null),this.raidSimUI=a,this.raid=a.sim.raid;const s=document.createElement("div");s.classList.add("raid-controls"),this.rootElem.appendChild(s),this.newPlayerPicker=new me(this.rootElem,this),new ht(s,this.raidSimUI.sim.raid,{label:"Raid Size",labelTooltip:"Number of players participating in the sim.",values:[{name:"5",value:1},{name:"10",value:2},{name:"25",value:5},{name:"40",value:8}],changedEvent:t=>t.numActivePartiesChangeEmitter,getValue:t=>t.getNumActiveParties(),setValue:(t,e,a)=>{e.setNumActiveParties(t,a)}}),new ht(s,this.newPlayerPicker,{label:"Default Faction",labelTooltip:"Default faction for newly-created players.",values:[{name:"Alliance",value:p.Alliance},{name:"Horde",value:p.Horde}],changedEvent:t=>this.raid.sim.factionChangeEmitter,getValue:t=>this.raid.sim.getFaction(),setValue:(t,e,a)=>{this.raid.sim.setFaction(t,a)}});const r=document.createElement("div");r.classList.add("parties-container"),this.rootElem.appendChild(r),this.partyPickers=this.raid.getParties().map(((t,e)=>new ce(r,t,e,this)));const i=()=>{this.partyPickers.forEach((t=>{t.index<this.raidSimUI.sim.raid.getNumActiveParties()?t.rootElem.classList.add("active"):t.rootElem.classList.remove("active")}))};this.raidSimUI.sim.raid.numActivePartiesChangeEmitter.on(i),i(),this.rootElem.ondragend=t=>{this.clearDragPlayer(),this.clearDragParty()}}getCurrentFaction(){return this.raid.sim.getFaction()}getCurrentExpansion(){return this.raid.sim.getExpansion()}getPlayerPicker(t){return this.partyPickers[Math.floor(t/ut)].playerPickers[t%ut]}getPlayerPickers(){return[...new Array(25).keys()].map((t=>this.getPlayerPicker(t)))}setDragPlayer(t,e,a){if(this.clearDragPlayer(),this.currentDragPlayer=t,this.currentDragPlayerFromIndex=e,this.currentDragType=a,e!=le){this.getPlayerPicker(e).rootElem.classList.add("dragfrom")}}clearDragPlayer(){if(this.currentDragPlayerFromIndex!=le){this.getPlayerPicker(this.currentDragPlayerFromIndex).rootElem.classList.remove("dragfrom")}this.currentDragPlayer=null,this.currentDragPlayerFromIndex=le,this.currentDragType=1}setDragParty(t){this.currentDragParty=t,t.rootElem.classList.add("dragfrom")}clearDragParty(){this.currentDragParty&&(this.currentDragParty.rootElem.classList.remove("dragfrom"),this.currentDragParty=null)}}class ce extends w{constructor(t,a,s,r){super(t,"party-picker-root"),e(this,"party"),e(this,"index"),e(this,"raidPicker"),e(this,"playerPickers"),this.party=a,this.index=s,this.raidPicker=r,this.rootElem.setAttribute("draggable","true"),this.rootElem.innerHTML=`\n\t\t\t<div class="party-header">\n\t\t\t\t<label class="party-label form-label">Group ${s+1}</label>\n\t\t\t\t<div class="party-results">\n\t\t\t\t\t<span class="party-results-dps"></span>\n\t\t\t\t\t<span class="party-results-reference-delta"></span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class="players-container">\n\t\t\t</div>\n\t\t`;const i=this.rootElem.getElementsByClassName("players-container")[0];this.playerPickers=[...Array(ut).keys()].map((t=>new de(i,this,t)));const n=this.rootElem.getElementsByClassName("party-results-dps")[0],l=this.rootElem.getElementsByClassName("party-results-reference-delta")[0];this.raidPicker.raidSimUI.referenceChangeEmitter.on((()=>{const t=this.raidPicker.raidSimUI.getCurrentData(),e=this.raidPicker.raidSimUI.getReferenceData(),a=t?.simResult.raidMetrics.parties[this.index]?.dps.avg||0,s=e?.simResult.raidMetrics.parties[this.index]?.dps.avg||0;if(0==a&&0==s)return n.textContent="",void(l.textContent="");n.textContent=`${a.toFixed(1)} DPS`,e?R(l,s,a,1):l.textContent=""})),this.rootElem.ondragstart=t=>{t.target==this.rootElem&&(t.dataTransfer.dropEffect="move",t.dataTransfer.effectAllowed="all",this.raidPicker.setDragParty(this))};let o=0;this.rootElem.ondragenter=t=>{t.preventDefault(),this.raidPicker.currentDragParty&&(o++,this.rootElem.classList.add("dragto"))},this.rootElem.ondragleave=t=>{t.preventDefault(),this.raidPicker.currentDragParty&&(o--,o<=0&&this.rootElem.classList.remove("dragto"))},this.rootElem.ondragover=t=>{t.preventDefault()},this.rootElem.ondrop=t=>{if(!this.raidPicker.currentDragParty)return;t.preventDefault(),o=0,this.rootElem.classList.remove("dragto");const e=c.nextEventID();c.freezeAllAndDo((()=>{const t=this.raidPicker.currentDragParty;for(let a=0;a<ut;a++){const s=t.playerPickers[a],r=this.playerPickers[a],i=s.player,n=r.player;s.setPlayer(e,n,3),r.setPlayer(e,i,3)}})),this.raidPicker.clearDragParty()}}}class de extends w{constructor(t,a,s){super(t,"player-picker-root"),e(this,"index"),e(this,"raidIndex"),e(this,"player"),e(this,"partyPicker"),e(this,"raidPicker"),e(this,"labelElem"),e(this,"iconElem"),e(this,"nameElem"),e(this,"resultsElem"),e(this,"dpsResultElem"),e(this,"referenceDeltaElem"),this.index=s,this.raidIndex=a.index*ut+s,this.player=null,this.partyPicker=a,this.raidPicker=a.raidPicker,this.labelElem=null,this.iconElem=null,this.nameElem=null,this.resultsElem=null,this.dpsResultElem=null,this.referenceDeltaElem=null,this.rootElem.classList.add("player"),this.partyPicker.party.compChangeEmitter.on((t=>{const e=this.partyPicker.party.getPlayer(this.index);e!=this.player&&this.setPlayer(t,e,0)})),this.raidPicker.raidSimUI.referenceChangeEmitter.on((()=>{const t=this.raidPicker.raidSimUI.getCurrentData(),e=this.raidPicker.raidSimUI.getReferenceData(),a=t?.simResult.getPlayerWithRaidIndex(this.raidIndex)?.dps.avg||0,s=e?.simResult.getPlayerWithRaidIndex(this.raidIndex)?.dps.avg||0;this.player&&(this.resultsElem?.classList.remove("hide"),this.dpsResultElem.textContent=`${a.toFixed(1)} DPS`,e&&R(this.referenceDeltaElem,s,a,1))}));let r=0;this.rootElem.ondragenter=t=>{t.preventDefault(),this.raidPicker.currentDragParty||(r++,this.rootElem.classList.add("dragto"))},this.rootElem.ondragleave=t=>{t.preventDefault(),this.raidPicker.currentDragParty||(r--,r<=0&&this.rootElem.classList.remove("dragto"))},this.rootElem.ondragover=t=>t.preventDefault(),this.rootElem.ondrop=t=>{if(this.raidPicker.currentDragParty)return;const e=t.dataTransfer.getData("text/plain");t.preventDefault(),r=0,this.rootElem.classList.remove("dragto");const a=c.nextEventID();c.freezeAllAndDo((()=>{if(null==this.raidPicker.currentDragPlayer&&0==e.length)return;if(this.raidPicker.currentDragPlayerFromIndex==this.raidIndex)return void this.raidPicker.clearDragPlayer();const t=this.raidPicker.currentDragType;if(this.raidPicker.currentDragPlayerFromIndex!=le){const e=this.raidPicker.getPlayerPicker(this.raidPicker.currentDragPlayerFromIndex);3==t?e.setPlayer(a,this.player,t):2==t&&e.setPlayer(a,null,t)}else if(null==this.raidPicker.currentDragPlayer){const t=atob(e),s=new Uint8Array(t.length);for(let e=0;e<s.length;e++)s[e]=t.charCodeAt(e);const r=b.fromBinary(s),i=new mt(D(r),this.raidPicker.raidSimUI.sim);i.fromProto(a,r),this.raidPicker.currentDragPlayer=i}4==t?this.setPlayer(a,this.raidPicker.currentDragPlayer.clone(a),t):this.setPlayer(a,this.raidPicker.currentDragPlayer,t),this.raidPicker.clearDragPlayer()}))},this.update()}setPlayer(t,e,a){e!=this.player&&(c.freezeAllAndDo((()=>{this.player=e,e?(this.partyPicker.party.setPlayer(t,this.index,e),1==a&&function(t,e,a){if(P(e.spec)){const s=a.getTanks(),r=s.findIndex((t=>null==a.getPlayerFromUnitReference(t)));-1==r?s.length<3&&a.setTanks(t,s.concat([e.makeUnitReference()])):(s[r]=e.makeUnitReference(),a.setTanks(t,s))}if(e.spec==s.SpecBalanceDruid){const a=e.getSpecOptions();a.innervateTarget=F(e.getRaidIndex()),e.setSpecOptions(t,a)}else if(e.spec==s.SpecSmitePriest){const a=e.getSpecOptions();a.powerInfusionTarget=F(e.getRaidIndex()),e.setSpecOptions(t,a)}else if(e.spec==s.SpecMage){const a=e.getSpecOptions();a.focusMagicTarget=F(e.getRaidIndex()),e.setSpecOptions(t,a)}}(t,e,this.raidPicker.raid)):(this.partyPicker.party.setPlayer(t,this.index,e),this.partyPicker.party.compChangeEmitter.emit(t))})),this.update())}update(){if(null==this.player)this.rootElem.className="player-picker-root player",this.rootElem.innerHTML="",this.labelElem=null,this.iconElem=null,this.nameElem=null,this.resultsElem=null,this.dpsResultElem=null,this.referenceDeltaElem=null;else{const t=O(this.player.getClass());this.rootElem.className=`player-picker-root player bg-${t}-dampened`,this.rootElem.innerHTML=`\n\t\t\t\t<div class="player-label">\n\t\t\t\t\t<img class="player-icon" src="${this.player.getSpecIcon()}" draggable="true" />\n\t\t\t\t\t<div class="player-details">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclass="player-name text-${t}"\n\t\t\t\t\t\t\ttype="text"\n\t\t\t\t\t\t\tvalue="${this.player.getName()}"\n\t\t\t\t\t\t\tspellcheck="false"\n\t\t\t\t\t\t\tmaxlength="15"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div class="player-results hide">\n\t\t\t\t\t\t\t<span class="player-results-dps"></span>\n\t\t\t\t\t\t\t<span class="player-results-reference-delta"></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class="player-options">\n\t\t\t\t\t<a\n\t\t\t\t\t\thref="javascript:void(0)"\n\t\t\t\t\t\tclass="player-edit"\n\t\t\t\t\t\trole="button"\n\t\t\t\t\t\tdata-bs-toggle="tooltip"\n\t\t\t\t\t\tdata-bs-title="Click to Edit"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class="fa fa-edit fa-lg"></i>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a\n\t\t\t\t\t\thref="javascript:void(0)"\n\t\t\t\t\t\tclass="player-copy link-warning"\n\t\t\t\t\t\trole="button"\n\t\t\t\t\t\tdraggable="true"\n\t\t\t\t\t\tdata-bs-toggle="tooltip"\n\t\t\t\t\t\tdata-bs-title="Drag to Copy"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class="fa fa-copy fa-lg"></i>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a\n\t\t\t\t\t\thref="javascript:void(0)"\n\t\t\t\t\t\tclass="player-delete link-danger"\n\t\t\t\t\t\trole="button"\n\t\t\t\t\t\tdata-bs-toggle="tooltip"\n\t\t\t\t\t\tdata-bs-title="Click to Delete"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class="fa fa-times fa-lg"></i>\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t`,this.labelElem=this.rootElem.querySelector(".player-label"),this.iconElem=this.rootElem.querySelector(".player-icon"),this.nameElem=this.rootElem.querySelector(".player-name"),this.resultsElem=this.rootElem.querySelector(".player-results"),this.dpsResultElem=this.rootElem.querySelector(".player-results-dps"),this.referenceDeltaElem=this.rootElem.querySelector(".player-results-reference-delta"),this.bindPlayerEvents()}}bindPlayerEvents(){this.nameElem?.addEventListener("input",(t=>{this.player?.setName(c.nextEventID(),this.nameElem?.value||"")})),this.nameElem?.addEventListener("mousedown",(t=>{this.partyPicker.rootElem.setAttribute("draggable","false")})),this.nameElem?.addEventListener("mouseup",(t=>{this.partyPicker.rootElem.setAttribute("draggable","true")}));const t="Unnamed";this.nameElem?.addEventListener("focusout",(e=>{this.nameElem&&!this.nameElem.value&&(this.nameElem.value=t,this.player?.setName(c.nextEventID(),t))}));const e=(t,e)=>{if(null!=this.player){if(t.dataTransfer.dropEffect="move",t.dataTransfer.effectAllowed="all",this.player){const e=this.player.toProto(!0);t.dataTransfer.setData("text/plain",btoa(String.fromCharCode(...b.toBinary(e))))}this.raidPicker.setDragPlayer(this.player,this.raidIndex,e)}else t.preventDefault()},s=this.rootElem.querySelector(".player-edit"),r=this.rootElem.querySelector(".player-copy"),i=this.rootElem.querySelector(".player-delete");a.getOrCreateInstance(s),a.getOrCreateInstance(r);const n=a.getOrCreateInstance(i);this.iconElem.ondragstart=t=>{t.dataTransfer.setDragImage(this.rootElem,20,20),e(t,3)},s.onclick=t=>{new pe(this.player)},r.ondragstart=t=>{t.dataTransfer.setDragImage(this.rootElem,20,20),e(t,4)},i.onclick=t=>{n.hide(),this.setPlayer(c.nextEventID(),null,0)}}}class pe extends ft{constructor(t){super(document.body,"player-editor-modal",{closeButton:{fixed:!0},header:!1}),this.rootElem.id="playerEditorModal",this.body.insertAdjacentHTML("beforeend",'\n\t\t\t<div class="player-editor within-raid-sim"></div>\n\t\t');const e=this.rootElem.getElementsByClassName("player-editor")[0];Kt[t.spec](e,t)}}class me extends w{constructor(t,s){super(t,"new-player-picker-root"),e(this,"raidPicker"),this.raidPicker=s,U(l).forEach((t=>{if(t==l.ClassUnknown)return;const e=_t.filter((e=>W[e.spec]==t));if(0==e.length)return;const s=document.createElement("div");s.classList.add("class-presets-container",`bg-${O(t)}-dampened`),this.rootElem.appendChild(s),e.forEach((t=>{const e=document.createElement("fragment");e.innerHTML=`\n\t\t\t\t\t<a\n\t\t\t\t\t\thref="javascript:void(0)"\n\t\t\t\t\t\trole="button"\n\t\t\t\t\t\tdraggable="true"\n\t\t\t\t\t\tdata-bs-toggle="tooltip"\n\t\t\t\t\t\tdata-bs-title="${t.tooltip}"\n\t\t\t\t\t\tdata-bs-html="true"\n\t\t\t\t\t>\n\t\t\t\t\t\t<img class="preset-picker-icon player-icon" src="${t.iconUrl}"/>\n\t\t\t\t\t</a>\n\t\t\t\t`;const r=e.children[0];s.appendChild(r),a.getOrCreateInstance(r),r.ondragstart=e=>{const a=c.nextEventID();c.freezeAllAndDo((()=>{const s=new Image;s.src=t.iconUrl,e.dataTransfer.setDragImage(s,30,30),e.dataTransfer.setData("text/plain",""),e.dataTransfer.dropEffect="copy";const r=new mt(t.spec,this.raidPicker.raid.sim);r.applySharedDefaults(a),r.setRace(a,t.defaultFactionRaces[this.raidPicker.getCurrentFaction()]),r.setTalentsString(a,t.talents.talentsString),r.setGlyphs(a,t.talents.glyphs||x.create()),r.setSpecOptions(a,t.specOptions),r.setConsumes(a,t.consumes),r.setName(a,t.defaultName),r.setProfession1(a,t.otherDefaults?.profession1||n.Engineering),r.setProfession2(a,t.otherDefaults?.profession2||n.Jewelcrafting),r.setDistanceFromTarget(a,t.otherDefaults?.distanceFromTarget||0),this.raidPicker.raid.sim.waitForInit().then((()=>{const e=t.defaultGear[this.raidPicker.getCurrentFaction()][1];r.setGear(a,this.raidPicker.raid.sim.db.lookupEquipmentSpec(e))})),this.raidPicker.setDragPlayer(r,le,1)}))}}))}))}}class he extends w{constructor(t,a){super(t,"raid-stats"),e(this,"categories");const s=[];ke.sections.forEach((t=>{const e=document.createElement("div");e.classList.add("raid-stats-section"),this.rootElem.appendChild(e),e.innerHTML=`\n\t\t\t\t<div class="raid-stats-section-header">\n\t\t\t\t\t<label class="raid-stats-section-label form-label">${t.label}</label>\n\t\t\t\t</div>\n\t\t\t\t<div class="raid-stats-section-content"></div>\n\t\t\t`;const r=e.getElementsByClassName("raid-stats-section-content")[0];t.categories.forEach((t=>{s.push(new ue(r,a,t))}))})),this.categories=s,a.changeEmitter.on((t=>this.categories.forEach((t=>t.update()))))}}class ue extends w{constructor(t,s,r){if(super(t,"raid-stats-category-root"),e(this,"raidSimUI"),e(this,"options"),e(this,"effects"),e(this,"counterElem"),e(this,"tooltipElem"),this.raidSimUI=s,this.options=r,this.rootElem.innerHTML=`\n\t\t\t<a href="javascript:void(0)" role="button" class="raid-stats-category">\n\t\t\t\t<span class="raid-stats-category-counter"></span>\n\t\t\t\t<span class="raid-stats-category-label">${r.label}</span>\n\t\t\t</a>\n\t\t`,this.counterElem=this.rootElem.querySelector(".raid-stats-category-counter"),this.tooltipElem=document.createElement("div"),this.tooltipElem.innerHTML=`\n\t\t\t<label class="raid-stats-category-label">${r.label}</label>\n\t\t`,this.effects=r.effects.map((t=>new fe(this.tooltipElem,s,t))),1!=r.effects.length||r.effects[0].playerData?.class){const t=this.rootElem.querySelector(".raid-stats-category");a.getOrCreateInstance(t,{customClass:"raid-stats-category-tooltip",html:!0,placement:"right",title:this.tooltipElem})}}update(){this.effects.forEach((t=>t.update()));const t=G(this.effects.map((t=>t.count)));this.counterElem.textContent=String(t);const e=this.rootElem.querySelector(".raid-stats-category");0==t?e?.classList.remove("active"):e?.classList.add("active")}}class fe extends w{constructor(t,a,s){if(super(t,"raid-stats-effect"),e(this,"raidSimUI"),e(this,"options"),e(this,"counterElem"),e(this,"curPlayers"),e(this,"count"),this.raidSimUI=a,this.options=s,this.curPlayers=[],this.count=0,this.rootElem.innerHTML=`\n\t\t\t<span class="raid-stats-effect-counter"></span>\n\t\t\t<img class="raid-stats-effect-icon"></img>\n\t\t\t<span class="raid-stats-effect-label">${s.label}</span>\n\t\t`,this.counterElem=this.rootElem.querySelector(".raid-stats-effect-counter"),this.options.playerData?.class){const t=this.rootElem.querySelector(".raid-stats-effect-label"),e=K(this.options.playerData.class);t.classList.add(e)}const r=this.rootElem.querySelector(".raid-stats-effect-icon");s.actionId?s.actionId.fill().then((t=>r.src=t.iconUrl)):r.remove()}update(){this.options.playerData&&(this.curPlayers=this.raidSimUI.getActivePlayers().filter((t=>this.options.playerData.condition(t))));const t=this.options.raidData&&this.options.raidData(this.raidSimUI.sim.raid);this.count=this.curPlayers.length+(t?1:0),this.counterElem.textContent=String(this.count),0==this.count?this.rootElem.classList.remove("active"):this.rootElem.classList.add("active")}}function ge(t,e){return e?!t:t}function ye(t,e){return{class:t,condition:a=>a.isClass(t)&&(!e||e(a))}}function Ie(t,e,a,s){return{class:t,condition:r=>r.isClass(t)&&ge(Boolean(r.getTalents()[e]),a)&&(!s||s(r))}}function Se(t,e,a){return Ie(t,e,!1,a)}function be(t,e,a){return Ie(t,e,!0,a)}function Pe(t,e,a,s){return{class:W[t],condition:r=>r.isSpec(t)&&ge(Boolean(r.getTalents()[e]),a)&&(!s||s(r))}}function De(t,e,a){return Pe(t,e,!1,a)}function Ee(t){return e=>Boolean(e.getBuffs()[t])}const ke={sections:[{label:"Roles",categories:[{label:"Tanks",effects:[{label:"Tanks",playerData:{condition:t=>P(t.spec)}}]},{label:"Healers",effects:[{label:"Healers",playerData:{condition:t=>A(t.spec)}}]},{label:"Melee",effects:[{label:"Melee",playerData:{condition:t=>L(t.spec)}}]},{label:"Ranged",effects:[{label:"Ranged",playerData:{condition:t=>B(t.spec)}}]}]},{label:"Buffs",categories:[{label:"Bloodlust",effects:[{label:"Bloodlust",actionId:M.fromSpellId(2825),playerData:ye(l.ClassShaman)}]},{label:"Stats",effects:[{label:"Improved Gift of the Wild",actionId:M.fromSpellId(17051),playerData:Se(l.ClassDruid,"improvedMarkOfTheWild")},{label:"Gift of the Wild",actionId:M.fromSpellId(48470),playerData:be(l.ClassDruid,"improvedMarkOfTheWild")},{label:"Drums of the Wild",actionId:M.fromItemId(49634),raidData:Ee("drumsOfTheWild")}]},{label:"Stats %",effects:[{label:"Blessing of Kings",actionId:M.fromSpellId(25898),playerData:ye(l.ClassPaladin)},{label:"Drums of Forgotten Kings",actionId:M.fromItemId(49633),raidData:Ee("drumsOfForgottenKings")},{label:"Blessing of Sanctuary",actionId:M.fromSpellId(25899),playerData:ye(l.ClassPaladin)}]},{label:"Armor",effects:[{label:"Improved Devotion Aura",actionId:M.fromSpellId(20140),playerData:Se(l.ClassPaladin,"improvedDevotionAura",(t=>t.getSpecOptions().aura==V.DevotionAura))},{label:"Devotion Aura",actionId:M.fromSpellId(48942),playerData:be(l.ClassPaladin,"improvedDevotionAura",(t=>t.getSpecOptions().aura==V.DevotionAura))},{label:"Improved Stoneskin Totem",actionId:M.fromSpellId(16293),playerData:Se(l.ClassShaman,"guardianTotems",(t=>t.getSpecOptions().totems?.earth==q.StoneskinTotem))},{label:"Stoneskin Totem",actionId:M.fromSpellId(58753),playerData:be(l.ClassShaman,"guardianTotems",(t=>t.getSpecOptions().totems?.earth==q.StoneskinTotem))},{label:"Scroll of Protection",actionId:M.fromItemId(43468),raidData:Ee("scrollOfProtection")}]},{label:"Stamina",effects:[{label:"Improved Power Word Fortitude",actionId:M.fromSpellId(14767),playerData:Se(l.ClassPriest,"improvedPowerWordFortitude")},{label:"Power Word Fortitude",actionId:M.fromSpellId(48161),playerData:be(l.ClassPriest,"improvedPowerWordFortitude")},{label:"Scroll of Stamina",actionId:M.fromItemId(37094),raidData:Ee("scrollOfStamina")}]},{label:"Str + Agi",effects:[{label:"Improved Strength of Earth Totem",actionId:M.fromSpellId(52456),playerData:Se(l.ClassShaman,"enhancingTotems",(t=>t.getSpecOptions().totems?.earth==q.StrengthOfEarthTotem))},{label:"Strength of Earth Totem",actionId:M.fromSpellId(58643),playerData:be(l.ClassShaman,"enhancingTotems",(t=>t.getSpecOptions().totems?.earth==q.StrengthOfEarthTotem))},{label:"Horn of Winter",actionId:M.fromSpellId(57623),playerData:ye(l.ClassDeathknight)},{label:"Scroll of Strength",actionId:M.fromItemId(43466),raidData:Ee("scrollOfStrength")},{label:"Scroll of Agility",actionId:M.fromItemId(43464),raidData:Ee("scrollOfAgility")}]},{label:"Intellect",effects:[{label:"Arcane Brilliance",actionId:M.fromSpellId(43002),playerData:ye(l.ClassMage)},{label:"Improved Fel Intelligence",actionId:M.fromSpellId(54038),playerData:Se(l.ClassWarlock,"improvedFelhunter",(t=>t.getSpecOptions().summon==z.Felhunter))},{label:"Fel Intelligence",actionId:M.fromSpellId(57567),playerData:be(l.ClassWarlock,"improvedFelhunter",(t=>t.getSpecOptions().summon==z.Felhunter))},{label:"Scroll of Intellect",actionId:M.fromItemId(37092),raidData:Ee("scrollOfIntellect")}]},{label:"Spirit",effects:[{label:"Divine Spirit",actionId:M.fromSpellId(48073),playerData:ye(l.ClassPriest)},{label:"Improved Fel Intelligence",actionId:M.fromSpellId(54038),playerData:Se(l.ClassWarlock,"improvedFelhunter",(t=>t.getSpecOptions().summon==z.Felhunter))},{label:"Fel Intelligence",actionId:M.fromSpellId(57567),playerData:be(l.ClassWarlock,"improvedFelhunter",(t=>t.getSpecOptions().summon==z.Felhunter))},{label:"Scroll of Spirit",actionId:M.fromItemId(37098),raidData:Ee("scrollOfSpirit")}]},{label:"Atk Pwr",effects:[{label:"Improved Blessing of Might",actionId:M.fromSpellId(20045),playerData:ye(l.ClassPaladin)},{label:"Blessing of Might",actionId:M.fromSpellId(48934),playerData:ye(l.ClassPaladin)},{label:"Improved Battle Shout",actionId:M.fromSpellId(12861),playerData:Se(l.ClassWarrior,"commandingPresence",(t=>t.getSpecOptions().shout==N.WarriorShoutBattle))},{label:"Battle Shout",actionId:M.fromSpellId(47436),playerData:be(l.ClassWarrior,"commandingPresence",(t=>t.getSpecOptions().shout==N.WarriorShoutBattle))}]},{label:"Atk Pwr %",effects:[{label:"Abomination's Might",actionId:M.fromSpellId(53138),playerData:Se(l.ClassDeathknight,"abominationsMight")},{label:"Unleashed Rage",actionId:M.fromSpellId(30809),playerData:Se(l.ClassShaman,"unleashedRage")},{label:"Trueshot Aura",actionId:M.fromSpellId(19506),playerData:Se(l.ClassHunter,"trueshotAura")}]},{label:"Damage %",effects:[{label:"Sanctified Retribution",actionId:M.fromSpellId(31869),playerData:Se(l.ClassPaladin,"sanctifiedRetribution")},{label:"Arcane Empowerment",actionId:M.fromSpellId(31583),playerData:Se(l.ClassMage,"arcaneEmpowerment")},{label:"Ferocious Inspiration",actionId:M.fromSpellId(34460),playerData:Se(l.ClassHunter,"ferociousInspiration")}]},{label:"Mit %",effects:[{label:"Renewed Hope",actionId:M.fromSpellId(57472),playerData:Se(l.ClassPriest,"renewedHope")},{label:"Blessing Of Sanctuary",actionId:M.fromSpellId(25899),playerData:ye(l.ClassPaladin)},{label:"Vigilance",actionId:M.fromSpellId(50720),playerData:Se(l.ClassWarrior,"vigilance")}]},{label:"Haste %",effects:[{label:"Swift Retribution",actionId:M.fromSpellId(53648),playerData:Se(l.ClassPaladin,"swiftRetribution")},{label:"Improved Moonkin Form",actionId:M.fromSpellId(48396),playerData:Se(l.ClassDruid,"improvedMoonkinForm")}]},{label:"MP5",effects:[{label:"Improved Blessing of Wisdom",actionId:M.fromSpellId(20245),playerData:Se(l.ClassPaladin,"improvedBlessingOfWisdom")},{label:"Blessing of Wisdom",actionId:M.fromSpellId(48938),playerData:be(l.ClassPaladin,"improvedBlessingOfWisdom")},{label:"Improved Mana Spring Totem",actionId:M.fromSpellId(16206),playerData:Se(l.ClassShaman,"restorativeTotems",(t=>t.getSpecOptions().totems?.water==J.ManaSpringTotem))},{label:"Mana Spring Totem",actionId:M.fromSpellId(58774),playerData:be(l.ClassShaman,"restorativeTotems",(t=>t.getSpecOptions().totems?.water==J.ManaSpringTotem))}]},{label:"Melee Crit",effects:[{label:"Leader of the Pack",actionId:M.fromSpellId(17007),playerData:Se(l.ClassDruid,"leaderOfThePack")},{label:"Rampage",actionId:M.fromSpellId(29801),playerData:Se(l.ClassWarrior,"rampage")}]},{label:"Melee Haste",effects:[{label:"Improved Icy Talons",actionId:M.fromSpellId(55610),playerData:Se(l.ClassDeathknight,"improvedIcyTalons")},{label:"Improved Windfury Totem",actionId:M.fromSpellId(29193),playerData:Se(l.ClassShaman,"improvedWindfuryTotem",(t=>t.getSpecOptions().totems?.air==$.WindfuryTotem))},{label:"Windfury Totem",actionId:M.fromSpellId(65990),playerData:be(l.ClassShaman,"improvedWindfuryTotem",(t=>t.getSpecOptions().totems?.air==$.WindfuryTotem))}]},{label:"Spell Power",effects:[{label:"Demonic Pact",actionId:M.fromSpellId(47240),playerData:Se(l.ClassWarlock,"demonicPact")},{label:"Totem of Wrath",actionId:M.fromSpellId(57722),playerData:Se(l.ClassShaman,"totemOfWrath",(t=>t.getSpecOptions().totems?.fire==H.TotemOfWrath))},{label:"Flametongue Totem",actionId:M.fromSpellId(58656),playerData:ye(l.ClassShaman,(t=>t.getSpecOptions().totems?.fire==H.FlametongueTotem))}]},{label:"Spell Crit",effects:[{label:"Moonkin Form",actionId:M.fromSpellId(24907),playerData:De(s.SpecBalanceDruid,"moonkinForm")},{label:"Elemental Oath",actionId:M.fromSpellId(51470),playerData:Se(l.ClassShaman,"elementalOath")}]},{label:"Spell Haste",effects:[{label:"Wrath of Air Totem",actionId:M.fromSpellId(3738),playerData:ye(l.ClassShaman,(t=>t.getSpecOptions().totems?.air==$.WrathOfAirTotem))}]},{label:"Health",effects:[{label:"Improved Commanding Shout",actionId:M.fromSpellId(12861),playerData:Se(l.ClassWarrior,"commandingPresence",(t=>t.getSpecOptions().shout==N.WarriorShoutCommanding))},{label:"Commanding Shout",actionId:M.fromSpellId(47440),playerData:be(l.ClassWarrior,"commandingPresence",(t=>t.getSpecOptions().shout==N.WarriorShoutCommanding))},{label:"Improved Imp",actionId:M.fromSpellId(18696),playerData:Se(l.ClassWarlock,"improvedImp",(t=>t.getSpecOptions().summon==z.Imp))},{label:"Blood Pact",actionId:M.fromSpellId(47982),playerData:be(l.ClassWarlock,"improvedImp",(t=>t.getSpecOptions().summon==z.Imp))}]},{label:"Replenishment",effects:[{label:"Vampiric Touch",actionId:M.fromSpellId(48160),playerData:De(s.SpecShadowPriest,"vampiricTouch")},{label:"Judgements of the Wise",actionId:M.fromSpellId(31878),playerData:De(s.SpecRetributionPaladin,"judgementsOfTheWise")},{label:"Hunting Party",actionId:M.fromSpellId(53292),playerData:De(s.SpecHunter,"huntingParty")},{label:"Improved Soul Leech",actionId:M.fromSpellId(54118),playerData:De(s.SpecWarlock,"improvedSoulLeech")},{label:"Enduring Winter",actionId:M.fromSpellId(44561),playerData:De(s.SpecMage,"enduringWinter")}]}]},{label:"External Buffs",categories:[{label:"Innervate",effects:[{label:"Innervate",actionId:M.fromSpellId(29166),playerData:ye(l.ClassDruid)}]},{label:"Power Infusion",effects:[{label:"Power Infusion",actionId:M.fromSpellId(10060),playerData:Se(l.ClassPriest,"powerInfusion")}]},{label:"Focus Magic",effects:[{label:"Focus Magic",actionId:M.fromSpellId(54648),playerData:Se(l.ClassMage,"focusMagic")}]},{label:"Tricks of the Trade",effects:[{label:"Tricks of the Trade",actionId:M.fromSpellId(57933),playerData:ye(l.ClassRogue)}]},{label:"Unholy Frenzy",effects:[{label:"Unholy Frenzy",actionId:M.fromSpellId(49016),playerData:Se(l.ClassDeathknight,"hysteria")}]},{label:"Pain Suppression",effects:[{label:"Pain Suppression",actionId:M.fromSpellId(33206),playerData:Se(l.ClassPriest,"painSuppression")}]},{label:"Divine Guardian",effects:[{label:"Divine Guardian",actionId:M.fromSpellId(53530),playerData:Se(l.ClassPaladin,"divineGuardian")}]}]},{label:"DPS Debuffs",categories:[{label:"Major ArP",effects:[{label:"Sunder Armor",actionId:M.fromSpellId(7386),playerData:ye(l.ClassWarrior)},{label:"Expose Armor",actionId:M.fromSpellId(8647),playerData:ye(l.ClassRogue)},{label:"Acid Spit",actionId:M.fromSpellId(55754),playerData:ye(l.ClassHunter,(t=>t.getSpecOptions().petType==j.Worm))}]},{label:"Minor ArP",effects:[{label:"Faerie Fire",actionId:M.fromSpellId(770),playerData:ye(l.ClassDruid,(t=>t.spec!=s.SpecRestorationDruid))},{label:"Curse of Weakness",actionId:M.fromSpellId(50511),playerData:ye(l.ClassWarlock)},{label:"Sting",actionId:M.fromSpellId(56631),playerData:ye(l.ClassHunter,(t=>t.getSpecOptions().petType==j.Wasp))},{label:"Spore Cloud",actionId:M.fromSpellId(53598),playerData:ye(l.ClassHunter,(t=>t.getSpecOptions().petType==j.Bat))}]},{label:"Phys Vuln",effects:[{label:"Blood Frenzy",actionId:M.fromSpellId(29859),playerData:Se(l.ClassWarrior,"bloodFrenzy")},{label:"Savage Combat",actionId:M.fromSpellId(58413),playerData:Se(l.ClassRogue,"savageCombat")}]},{label:"Bleed",effects:[{label:"Mangle",actionId:M.fromSpellId(16862),playerData:ye(l.ClassDruid,(t=>[s.SpecFeralDruid,s.SpecFeralTankDruid].includes(t.spec)))},{label:"Trauma",actionId:M.fromSpellId(46855),playerData:Se(l.ClassWarrior,"trauma")},{label:"Stampede",actionId:M.fromSpellId(57393),playerData:ye(l.ClassHunter,(t=>t.getSpecOptions().petType==j.Rhino))}]},{label:"Crit",effects:[{label:"Totem of Wrath",actionId:M.fromSpellId(30706),playerData:Se(l.ClassShaman,"totemOfWrath",(t=>t.getSpecOptions().totems?.fire==H.TotemOfWrath))},{label:"Heart of the Crusader",actionId:M.fromSpellId(20337),playerData:Se(l.ClassPaladin,"heartOfTheCrusader",(t=>[s.SpecRetributionPaladin,s.SpecProtectionPaladin].includes(t.spec)))},{label:"Master Poisoner",actionId:M.fromSpellId(58410),playerData:Se(l.ClassRogue,"masterPoisoner")}]},{label:"Spell Crit",effects:[{label:"Improved Shadow Bolt",actionId:M.fromSpellId(17803),playerData:Se(l.ClassWarlock,"improvedShadowBolt")},{label:"Improved Scorch",actionId:M.fromSpellId(12873),playerData:Se(l.ClassMage,"improvedScorch")},{label:"Winter's Chill",actionId:M.fromSpellId(28593),playerData:Se(l.ClassMage,"wintersChill")}]},{label:"Spell Hit",effects:[{label:"Misery",actionId:M.fromSpellId(33198),playerData:De(s.SpecShadowPriest,"misery")},{label:"Improved Faerie Fire",actionId:M.fromSpellId(33602),playerData:De(s.SpecBalanceDruid,"improvedFaerieFire")}]},{label:"Spell Dmg",effects:[{label:"Ebon Plaguebringer",actionId:M.fromSpellId(51161),playerData:Se(l.ClassDeathknight,"ebonPlaguebringer")},{label:"Earth and Moon",actionId:M.fromSpellId(48511),playerData:De(s.SpecBalanceDruid,"earthAndMoon")},{label:"Curse of Elements",actionId:M.fromSpellId(47865),playerData:ye(l.ClassWarlock)}]}]},{label:"Mitigation Debuffs",categories:[{label:"Atk Pwr",effects:[{label:"Vindication",actionId:M.fromSpellId(26016),playerData:Se(l.ClassPaladin,"vindication",(t=>[s.SpecRetributionPaladin,s.SpecProtectionPaladin].includes(t.spec)))},{label:"Improved Demoralizing Shout",actionId:M.fromSpellId(12879),playerData:Se(l.ClassWarrior,"improvedDemoralizingShout")},{label:"Demoralizing Shout",actionId:M.fromSpellId(47437),playerData:be(l.ClassWarrior,"improvedDemoralizingShout")},{label:"Improved Demoralizing Roar",actionId:M.fromSpellId(16862),playerData:De(s.SpecFeralTankDruid,"feralAggression")},{label:"Demoralizing Roar",actionId:M.fromSpellId(48560),playerData:(Ce=s.SpecFeralTankDruid,ve="feralAggression",Pe(Ce,ve,!0,Te))},{label:"Improved Curse of Weakness",actionId:M.fromSpellId(18180),playerData:Se(l.ClassWarlock,"improvedCurseOfWeakness")},{label:"Curse of Weakness",actionId:M.fromSpellId(50511),playerData:be(l.ClassWarlock,"improvedCurseOfWeakness")},{label:"Demoralizing Screech",actionId:M.fromSpellId(55487),playerData:ye(l.ClassHunter,(t=>t.getSpecOptions().petType==j.CarrionBird))}]},{label:"Atk Speed",effects:[{label:"Improved Thunder Clap",actionId:M.fromSpellId(12666),playerData:Se(l.ClassWarrior,"improvedThunderClap")},{label:"Thunder Clap",actionId:M.fromSpellId(47502),playerData:be(l.ClassWarrior,"improvedThunderClap")},{label:"Improved Frost Fever",actionId:M.fromSpellId(51456),playerData:Se(l.ClassDeathknight,"improvedIcyTouch")},{label:"Frost Fever",actionId:M.fromSpellId(51456),playerData:be(l.ClassDeathknight,"improvedIcyTouch")},{label:"Judgements of the Just",actionId:M.fromSpellId(53696),playerData:Se(l.ClassPaladin,"judgementsOfTheJust")},{label:"Infected Wounds",actionId:M.fromSpellId(48485),playerData:Se(l.ClassDruid,"infectedWounds",(t=>[s.SpecFeralDruid,s.SpecFeralTankDruid].includes(t.spec)))}]},{label:"Miss",effects:[{label:"Insect Swarm",actionId:M.fromSpellId(65855),playerData:De(s.SpecBalanceDruid,"insectSwarm")},{label:"Scorpid Sting",actionId:M.fromSpellId(3043),playerData:ye(l.ClassHunter)}]}]}]};var Ce,ve,Te;class we extends gt{constructor(t,a){super(t,a,{identifier:"raid-tab",title:"Raid"}),e(this,"simUI"),e(this,"leftPanel"),e(this,"rightPanel"),this.simUI=a,this.rootElem.classList.add("active","show"),this.leftPanel=document.createElement("div"),this.leftPanel.classList.add("raid-tab-left","tab-panel-left"),this.rightPanel=document.createElement("div"),this.rightPanel.classList.add("raid-tab-right","tab-panel-right"),this.contentContainer.appendChild(this.leftPanel),this.contentContainer.appendChild(this.rightPanel),this.buildTabContent()}buildTabContent(){this.simUI.raidPicker=new oe(this.leftPanel,this.simUI),new he(this.leftPanel,this.simUI);const t=new yt(this.rightPanel,this.simUI,{label:"Raid",header:{title:"Saved Raid Groups"},storageKey:this.simUI.getSavedRaidStorageKey(),getData:t=>_.create({raid:this.simUI.sim.raid.toProto(),blessings:this.simUI.blessingsPicker.getAssignments(),faction:this.simUI.sim.getFaction()}),setData:(t,e,a)=>{c.freezeAllAndDo((()=>{this.simUI.sim.raid.fromProto(t,a.raid||I.create()),this.simUI.blessingsPicker.setAssignments(t,a.blessings||X.create()),a.faction&&this.simUI.sim.setFaction(t,a.faction)}))},changeEmitters:[this.simUI.changeEmitter,this.simUI.sim.changeEmitter],equals:(t,e)=>_.equals(t,e),toJson:t=>_.toJson(t),fromJson:t=>_.fromJson(t)});this.simUI.sim.waitForInit().then((()=>{t.loadUserData()}))}}class Re extends Q{constructor(t,a,s,r){super(t,"raid-target-picker-root",s,r),e(this,"config"),e(this,"raid"),e(this,"curPlayer"),e(this,"curUnitReference"),e(this,"currentOptions"),e(this,"buttonElem"),e(this,"dropdownElem"),this.rootElem.classList.add("dropdown"),this.config=r,this.raid=a,this.curPlayer=this.raid.getPlayerFromUnitReference(r.getValue(s)),this.curUnitReference=this.getInputValue(),this.rootElem.innerHTML='\n\t\t\t<a\n\t\t\t\tclass="raid-target-picker-button"\n\t\t\t\thref="javascript:void(0)"\n\t\t\t\trole="button"\n\t\t\t\tdata-bs-toggle="dropdown"\n\t\t\t></a>\n\t\t\t<div class="dropdown-menu"></div>\n    ',this.buttonElem=this.rootElem.querySelector(".raid-target-picker-button"),this.dropdownElem=this.rootElem.querySelector(".dropdown-menu"),this.buttonElem.addEventListener("click",(t=>t.preventDefault())),this.currentOptions=[],this.updateOptions(c.nextEventID()),r.compChangeEmitter.on((t=>this.updateOptions(t))),this.init()}makeTargetOptions(){return[{player:null,isDropdown:!0},...this.raid.getPlayers().filter((t=>null!=t)).map((t=>({player:t,isDropdown:!0})))]}updateOptions(t){this.currentOptions=this.makeTargetOptions(),this.dropdownElem.innerHTML="",this.currentOptions.forEach((t=>this.dropdownElem.appendChild(this.makeOption(t))));const e=this.curUnitReference;this.curUnitReference=this.getInputValue(),v.equals(e,this.curUnitReference)?this.setInputValue(this.curUnitReference):this.inputChanged(t)}makeOption(t){const e=Re.makeOptionElem(t);return e.addEventListener("click",(e=>{e.preventDefault(),this.curPlayer=t.player,this.curUnitReference=this.getInputValue(),this.inputChanged(c.nextEventID())})),e}getInputElem(){return this.buttonElem}getInputValue(){return this.curPlayer?this.curPlayer.makeUnitReference():Z()}setInputValue(t){this.curUnitReference=v.clone(t),this.curPlayer=this.raid.getPlayerFromUnitReference(this.curUnitReference);const e=this.currentOptions.find((t=>t.player==this.curPlayer));e&&(this.buttonElem.innerHTML=Re.makeOptionElem({player:e.player}).outerHTML)}static makeOptionElem(t){const e=t.player?O(t.player.getClass()):"";let a=document.createElement("fragment");return a.innerHTML=`\n\t\t\t<div class="player ${e?`bg-${e}-dampened`:""}">\n\t\t\t\t<div class="player-label">\n\t\t\t\t\t${t.player?`<img class="player-icon" src="${t.player.getSpecIcon()}" draggable="false"/>`:""}\n\t\t\t\t\t<div class="player-details">\n\t\t\t\t\t\t<span class="player-name ${e?`text-${e}`:""}">\n\t\t\t\t\t\t\t${t.player?t.player.getName():"Unassigned"}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`,t.isDropdown&&(a.innerHTML=`\n\t\t\t\t<a class="dropdown-option" href="javascript:void(0) role="button">${a.innerHTML}</a>\n\t\t\t`),a.children[0]}}class Oe extends w{constructor(t,a){super(t,"assignments-picker-root"),e(this,"raidSimUI"),e(this,"changeEmitter",new c),e(this,"innervatesPicker"),e(this,"powerInfusionsPicker"),e(this,"tricksOfTheTradesPicker"),e(this,"unholyFrenzyPicker"),e(this,"focusMagicsPicker"),this.raidSimUI=a,this.innervatesPicker=new We(this.rootElem,a),this.powerInfusionsPicker=new xe(this.rootElem,a),this.tricksOfTheTradesPicker=new Fe(this.rootElem,a),this.unholyFrenzyPicker=new Ae(this.rootElem,a),this.focusMagicsPicker=new Le(this.rootElem,a)}}class Ue extends w{constructor(t,a){super(t,"assigned-buff-picker-root"),e(this,"raidSimUI"),e(this,"changeEmitter",new c),e(this,"playersContainer"),e(this,"targetPickers"),this.raidSimUI=a,this.targetPickers=[],this.playersContainer=document.createElement("div"),this.playersContainer.classList.add("assigned-buff-container"),this.rootElem.appendChild(this.playersContainer),this.raidSimUI.changeEmitter.on((t=>this.update())),this.update()}update(){this.playersContainer.innerHTML=`\n\t\t\t<label class="assignmented-buff-label form-label">${this.getTitle()}</label>\n\t\t`;const t=this.getSourcePlayers();0==t.length?this.rootElem.classList.add("hide"):this.rootElem.classList.remove("hide"),this.targetPickers=t.map(((t,e)=>{const a=document.createElement("div");a.classList.add("assigned-buff-player","input-inline"),this.playersContainer.appendChild(a);let s=document.createElement("div");s.classList.add("raid-target-picker-root"),s.appendChild(Re.makeOptionElem({player:t,isDropdown:!1})),a.appendChild(s);const r=document.createElement("i");r.classList.add("assigned-buff-arrow","fa","fa-arrow-right"),a.appendChild(r);const i=new Re(a,this.raidSimUI.sim.raid,t,{extraCssClasses:["assigned-buff-target-picker"],noTargetLabel:"Unassigned",compChangeEmitter:this.raidSimUI.sim.raid.compChangeEmitter,changedEvent:t=>t.specOptionsChangeEmitter,getValue:t=>this.getPlayerValue(t),setValue:(t,e,a)=>this.setPlayerValue(t,e,a)}),n={player:t,targetPicker:i,targetPlayer:this.raidSimUI.sim.raid.getPlayerFromUnitReference(i.getInputValue())};return i.changeEmitter.on((t=>{n.targetPlayer=this.raidSimUI.sim.raid.getPlayerFromUnitReference(i.getInputValue())})),n}))}}class We extends Ue{getTitle(){return"Innervate"}getSourcePlayers(){return this.raidSimUI.getActivePlayers().filter((t=>t.isClass(l.ClassDruid)))}getPlayerValue(t){return t.getSpecOptions().innervateTarget||Z()}setPlayerValue(t,e,a){const s=e.getSpecOptions();s.innervateTarget=a,e.setSpecOptions(t,s)}}class xe extends Ue{getTitle(){return"Power Infusion"}getSourcePlayers(){return this.raidSimUI.getActivePlayers().filter((t=>t.isClass(l.ClassPriest)&&t.getTalents().powerInfusion))}getPlayerValue(t){return t.getSpecOptions().powerInfusionTarget||Z()}setPlayerValue(t,e,a){const s=e.getSpecOptions();s.powerInfusionTarget=a,e.setSpecOptions(t,s)}}class Fe extends Ue{getTitle(){return"Tricks of the Trade"}getSourcePlayers(){return this.raidSimUI.getActivePlayers().filter((t=>t.isClass(l.ClassRogue)))}getPlayerValue(t){return t.getSpecOptions().tricksOfTheTradeTarget||Z()}setPlayerValue(t,e,a){const s=e.getSpecOptions();s.tricksOfTheTradeTarget=a,e.setSpecOptions(t,s)}}class Ae extends Ue{getTitle(){return"Unholy Frenzy"}getSourcePlayers(){return this.raidSimUI.getActivePlayers().filter((t=>t.isClass(l.ClassDeathknight)&&t.getTalents().hysteria))}getPlayerValue(t){return t.getSpecOptions().unholyFrenzyTarget||Z()}setPlayerValue(t,e,a){const s=e.getSpecOptions();s.unholyFrenzyTarget=a,e.setSpecOptions(t,s)}}class Le extends Ue{getTitle(){return"Focus Magic"}getSourcePlayers(){return this.raidSimUI.getActivePlayers().filter((t=>t.isClass(l.ClassMage)))}getPlayerValue(t){return t.getSpecOptions().focusMagicTarget||Z()}setPlayerValue(t,e,a){const s=e.getSpecOptions();s.focusMagicTarget=a,e.setSpecOptions(t,s)}}class Be extends w{constructor(t,a){super(t,"blessings-picker-root"),e(this,"simUI"),e(this,"changeEmitter",new c),e(this,"pickers",[]),e(this,"assignments"),this.simUI=a,this.assignments=X.clone(d(4));const s=r.filter((t=>Xt.includes(t))).filter((t=>!St.includes(t))),i=[...Array(4).keys()];s.map((t=>{const e=document.createElement("div");e.classList.add("blessings-picker-row"),this.rootElem.appendChild(e),e.append(this.buildSpecIcon(t));const s=document.createElement("div");return s.classList.add("blessings-picker-container"),e.appendChild(s),i.forEach((e=>{this.pickers[e]||this.pickers.push([]);const r=new It(s,this,{extraCssClasses:["blessing-picker"],numColumns:1,values:[{color:Y[l.ClassPaladin],value:tt.BlessingUnknown},{actionId:M.fromSpellId(25898),value:tt.BlessingOfKings},{actionId:M.fromSpellId(48934),value:tt.BlessingOfMight},{actionId:M.fromSpellId(48938),value:tt.BlessingOfWisdom},{actionId:M.fromSpellId(25899),value:tt.BlessingOfSanctuary}],equals:(t,e)=>t==e,zeroValue:tt.BlessingUnknown,enableWhen:t=>{const a=Math.min(this.simUI.getClassCount(l.ClassPaladin),4);return e<a},changedEvent:t=>t.changeEmitter,getValue:a=>a.assignments.paladins[e]?.blessings[t]||tt.BlessingUnknown,setValue:(a,s,r)=>{s.assignments.paladins[e].blessings[t]!=r&&(s.assignments.paladins[e].blessings[t]=r,this.changeEmitter.emit(a))}},a);this.pickers[e].push(r)})),e})),this.updatePickers(),this.simUI.compChangeEmitter.on((t=>this.updatePickers()))}updatePickers(){for(let t=0;t<4;t++)this.pickers[t].forEach((t=>t.update()))}buildSpecIcon(t){const e=document.createElement("fragment");e.innerHTML=`\n\t\t\t<div class="blessings-picker-spec">\n\t\t\t\t<img\n\t\t\t\t\tsrc="${et[t]}"\n\t\t\t\t\tclass="blessings-spec-icon"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t`;const s=e.querySelector(".blessings-spec-icon");return a.getOrCreateInstance(s,{title:at[t]}),e.children[0]}getAssignments(){return X.clone(this.assignments)}setAssignments(t,e){this.assignments=X.clone(e),this.changeEmitter.emit(t)}}class Me extends w{constructor(t,a){super(t,"tanks-picker-root"),e(this,"raidSimUI"),this.raidSimUI=a;const s=this.raidSimUI.sim.raid;for(let e=0;e<4;e++){const t=document.createElement("div");t.classList.add("tank-picker-row","input-inline"),this.rootElem.appendChild(t);const a=document.createElement("label");a.textContent=0==e?"Main Tank":`Tank ${e+1}`,a.classList.add("tank-picker-label","form-label"),t.appendChild(a),new Re(t,s,s,{extraCssClasses:["tank-picker"],noTargetLabel:"Unassigned",compChangeEmitter:s.compChangeEmitter,changedEvent:t=>t.tanksChangeEmitter,getValue:t=>t.getTanks()[e]||Z(),setValue:(t,a,s)=>{const r=a.getTanks();for(let i=0;i<e;i++)r[i]||r.push(Z());r[e]=s,a.setTanks(t,r)}})}}}class He extends gt{constructor(t,a){super(t,a,{identifier:"raid-settings-tab",title:"Settings"}),e(this,"simUI"),e(this,"leftPanel"),e(this,"rightPanel"),e(this,"column1",this.buildColumn(1,"raid-settings-col")),e(this,"column2",this.buildColumn(2,"raid-settings-col")),e(this,"column3",this.buildColumn(3,"raid-settings-col")),this.simUI=a,this.leftPanel=document.createElement("div"),this.leftPanel.classList.add("raid-settings-tab-left","tab-panel-left"),this.leftPanel.appendChild(this.column1),this.leftPanel.appendChild(this.column2),this.leftPanel.appendChild(this.column3),this.rightPanel=document.createElement("div"),this.rightPanel.classList.add("raid-settings-tab-right","tab-panel-right","within-raid-sim-hide"),this.contentContainer.appendChild(this.leftPanel),this.contentContainer.appendChild(this.rightPanel),this.buildTabContent()}buildTabContent(){this.buildEncounterSettings(),this.buildConsumesSettings(),this.buildTankSettings(),this.buildAssignmentSettings(),this.buildOtherSettings(),this.buildBlessingsPicker(),this.buildSavedDataPickers()}buildEncounterSettings(){const t=new bt(this.column1,"encounter-settings",{header:{title:"Encounter"}});new Pt(t.bodyElement,this.simUI.sim.encounter,{showExecuteProportion:!0},this.simUI)}buildConsumesSettings(){const t=new bt(this.column1,"consumes-settings",{header:{title:"Consumables"}}),e=document.createElement("div");e.classList.add("consumes-container"),t.bodyElement.appendChild(e),this.makeBooleanRaidIconBuffInput(e,M.fromItemId(37094),"scrollOfStamina"),this.makeBooleanRaidIconBuffInput(e,M.fromItemId(43466),"scrollOfStrength"),this.makeBooleanRaidIconBuffInput(e,M.fromItemId(43464),"scrollOfAgility"),this.makeBooleanRaidIconBuffInput(e,M.fromItemId(37092),"scrollOfIntellect"),this.makeBooleanRaidIconBuffInput(e,M.fromItemId(37098),"scrollOfSpirit"),this.makeBooleanRaidIconBuffInput(e,M.fromItemId(43468),"scrollOfProtection"),this.makeBooleanRaidIconBuffInput(e,M.fromItemId(49633),"drumsOfForgottenKings"),this.makeBooleanRaidIconBuffInput(e,M.fromItemId(49634),"drumsOfTheWild")}buildOtherSettings(){const t=new bt(this.column2,"other-settings",{header:{title:"Other"}});this.makeBooleanRaidIconBuffInput(t.bodyElement,M.fromSpellId(73828),"strengthOfWrynn")}buildTankSettings(){const t=new bt(this.column2,"tanks-settings",{header:{title:"Tanks"}});new Me(t.bodyElement,this.simUI)}buildAssignmentSettings(){const t=new bt(this.column2,"assignments-settings",{header:{title:"External Buffs"}});new Oe(t.bodyElement,this.simUI)}buildBlessingsPicker(){const t=new bt(this.column3,"blessings-settings",{header:{title:"Blessings",tooltip:Dt}});this.simUI.blessingsPicker=new Be(t.bodyElement,this.simUI),this.simUI.blessingsPicker.changeEmitter.on((t=>this.simUI.changeEmitter.emit(t)))}buildSavedDataPickers(){const t=new yt(this.rightPanel,this.simUI.sim.encounter,{label:"Encounter",header:{title:"Saved Encounters"},storageKey:this.simUI.getSavedEncounterStorageKey(),getData:t=>st.create({encounter:t.toProto()}),setData:(t,e,a)=>e.fromProto(t,a.encounter),changeEmitters:[this.simUI.sim.encounter.changeEmitter],equals:(t,e)=>st.equals(t,e),toJson:t=>st.toJson(t),fromJson:t=>st.fromJson(t)});this.simUI.sim.waitForInit().then((()=>{t.loadUserData()}))}makeBooleanRaidIconBuffInput(t,e,a){const s=this.simUI.sim.raid;return new Et(t,s,{actionId:e,states:2,changedEvent:t=>t.buffsChangeEmitter,getValue:t=>t.getBuffs()[a],setValue:(t,e,s)=>{const r=e.getBuffs();r[a]=s,e.setBuffs(t,r)}},this.simUI)}}const $e=[];new class extends kt{constructor(t,a){super(t,new Ct,{cssClass:"raid-sim-ui",cssScheme:"raid",spec:null,launchStatus:vt,knownIssues:(a.knownIssues||[]).concat($e)}),e(this,"config"),e(this,"raidSimResultsManager",null),e(this,"raidPicker",null),e(this,"blessingsPicker",null),e(this,"compChangeEmitter",new c),e(this,"changeEmitter",new c),e(this,"referenceChangeEmitter",new c),this.config=a,this.sim.raid.compChangeEmitter.on((t=>this.compChangeEmitter.emit(t))),[this.compChangeEmitter,this.sim.changeEmitter].forEach((t=>t.on((t=>this.changeEmitter.emit(t))))),this.changeEmitter.on((()=>this.recomputeSettingsLayout())),this.sim.setModifyRaidProto((t=>this.modifyRaidProto(t))),this.sim.waitForInit().then((()=>this.loadSettings())),this.addSidebarComponents(),this.addTopbarComponents(),this.addRaidTab(),this.addSettingsTab(),this.addDetailedResultsTab()}loadSettings(){const t=c.nextEventID();c.freezeAllAndDo((()=>{let e=!1;const a=window.localStorage.getItem(this.getSettingsStorageKey());if(null!=a)try{const s=o.fromJsonString(a);this.fromProto(t,s),e=!0}catch(s){console.warn("Failed to parse saved settings: "+s)}e||this.applyDefaults(t),this.changeEmitter.on((t=>{const e=o.toJsonString(this.toProto());window.localStorage.setItem(this.getSettingsStorageKey(),e)}))}))}addSidebarComponents(){this.raidSimResultsManager=rt(this),this.raidSimResultsManager.changeEmitter.on((t=>this.referenceChangeEmitter.emit(t)))}addTopbarComponents(){this.simHeader.addImportLink("JSON",(t=>new Qt(this.rootElem,this))),this.simHeader.addImportLink("WCL",(t=>new Yt(this.rootElem,this))),this.simHeader.addExportLink("JSON",(t=>new Zt(this.rootElem,this)))}addRaidTab(){new we(this.simTabContentsContainer,this)}addSettingsTab(){new He(this.simTabContentsContainer,this)}addDetailedResultsTab(){this.addTab("Results","detailed-results-tab",'\n\t\t\t<div class="detailed-results">\n\t\t\t</div>\n\t\t'),new it(this.rootElem.getElementsByClassName("detailed-results")[0],this,this.raidSimResultsManager)}recomputeSettingsLayout(){window.dispatchEvent(new Event("resize"))}modifyRaidProto(t){const e=this.getClassCount(l.ClassPaladin),a=this.blessingsPicker.getAssignments();Xt.forEach((s=>{const r=t.parties.map((t=>t.players.filter((t=>t.class!=l.ClassUnknown&&D(t)==s)))).flat();a.paladins.forEach(((t,a)=>{a>=e||(t.blessings[s]==tt.BlessingOfKings?r.forEach((t=>t.buffs.blessingOfKings=!0)):t.blessings[s]==tt.BlessingOfMight?r.forEach((t=>t.buffs.blessingOfMight=nt.TristateEffectImproved)):t.blessings[s]==tt.BlessingOfWisdom?r.forEach((t=>t.buffs.blessingOfWisdom=nt.TristateEffectImproved)):t.blessings[s]==tt.BlessingOfSanctuary&&r.forEach((t=>t.buffs.blessingOfSanctuary=!0)))}))}))}getCurrentData(){return this.raidSimResultsManager?this.raidSimResultsManager.getCurrentData():null}getReferenceData(){return this.raidSimResultsManager?this.raidSimResultsManager.getReferenceData():null}getActivePlayers(){return this.sim.raid.getActivePlayers()}getClassCount(t){return this.getActivePlayers().filter((e=>e.isClass(t))).length}applyDefaults(t){c.freezeAllAndDo((()=>{this.sim.raid.fromProto(t,I.create({numActiveParties:5})),this.sim.setExpansion(t,1),this.sim.encounter.applyDefaults(t),this.sim.applyDefaults(t,!0,!0),this.sim.setShowDamageMetrics(t,!0)}))}toProto(){return o.create({settings:this.sim.toProto(),raid:this.sim.raid.toProto(!0),blessings:this.blessingsPicker.getAssignments(),encounter:this.sim.encounter.toProto()})}toLink(){const t=this.toProto();t.settings=void 0;const e=o.toBinary(t),a=pako.deflate(e,{to:"string"}),s=btoa(String.fromCharCode(...a)),r=new URL(window.location.href);return r.hash=s,r.toString()}getLevel(){return 80}fromProto(t,e){c.freezeAllAndDo((()=>{e.settings&&this.sim.fromProto(t,e.settings),this.sim.raid.fromProto(t,e.raid||I.create()),this.sim.encounter.fromProto(t,e.encounter||y.create()),this.blessingsPicker.setAssignments(t,e.blessings||X.create())}))}clearRaid(t){this.sim.raid.clear(t)}getStorageKey(t){return"__wotlk_raid__"+t}getSavedRaidStorageKey(){return this.getStorageKey("__savedRaid__")}}(document.body,{});
//# sourceMappingURL=index-f0cc8788.entry.js.map
