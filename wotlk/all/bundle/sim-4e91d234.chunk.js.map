{"version":3,"file":"sim-4e91d234.chunk.js","sources":["../../../../../ui/protection_warrior/inputs.ts","../../../../../ui/protection_warrior/presets.ts","../../../../../ui/protection_warrior/sim.ts"],"sourcesContent":["import * as InputHelpers from '../core/components/input_helpers.js';\nimport { BATTLESHOUT, COMMANDINGSHOUT } from '../core/constants/auras.js';\nimport { Spec } from '../core/proto/common.js';\nimport {\n\tWarriorShout,\n} from '../core/proto/warrior.js';\nimport { ActionId, ActionIDMap } from '../core/proto_utils/action_id.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const StartingRage = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecProtectionWarrior>({\n\tfieldName: 'startingRage',\n\tlabel: 'Starting Rage',\n\tlabelTooltip: 'Initial rage at the start of each iteration.',\n});\n\nexport const ShoutPicker = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecProtectionWarrior, WarriorShout>({\n\tfieldName: 'shout',\n\tvalues: [\n\t\t{ color: 'c79c6e', value: WarriorShout.WarriorShoutNone },\n\t\t{ actionId: ActionIDMap.fromSpellId(BATTLESHOUT), value: WarriorShout.WarriorShoutBattle },\n\t\t{ actionId: ActionIDMap.fromSpellId(COMMANDINGSHOUT), value: WarriorShout.WarriorShoutCommanding, showWhen: player => player.getLevel() >= 68 },\n\t],\n});\n\nexport const ShatteringThrow = InputHelpers.makeSpecOptionsBooleanIconInput<Spec.SpecProtectionWarrior>({\n\tfieldName: 'useShatteringThrow',\n\tid: ActionId.fromSpellId(64382),\n});\n\nexport const Munch = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecProtectionWarrior>({\n \tfieldName: 'munch',\n\tlabel: 'Munching',\n\tlabelTooltip: 'When two crits occur at the same time (20 ms window), only the latter will count towards deep wounds',\n});\n","import * as PresetUtils from '../core/preset_utils.js';\nimport {\n\tConsumes,\n\tExplosive_Big,\n\tExplosive_Small,\n\tGlyphs,\n\tPotions,\n\tSpec,\n} from '../core/proto/common.js';\nimport {BattleElixir,Food,GuardianElixir} from '../core/proto/consumes_gen.js'\nimport { SavedTalents } from '../core/proto/ui.js';\nimport {\n\tProtectionWarrior_Options as ProtectionWarriorOptions,\n\tProtectionWarrior_Rotation as ProtectionWarriorRotation,\n\tWarriorMajorGlyph,\n\tWarriorMinorGlyph,\n\tWarriorShout,\n} from '../core/proto/warrior.js';\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\nimport PreraidBalancedGear from './gear_sets/preraid_balanced.gear.json';\nexport const PRERAID_BALANCED_PRESET = PresetUtils.makePresetGear('P1 PreRaid Preset', PreraidBalancedGear);\nimport PreraidP4Gear from './gear_sets/p4_preraid.gear.json';\nexport const P4_PRERAID_PRESET = PresetUtils.makePresetGear('P4 PreRaid Preset', PreraidP4Gear);\nimport P1BalancedGear from './gear_sets/p1_balanced.gear.json';\nexport const P1_BALANCED_PRESET = PresetUtils.makePresetGear('P1 Preset', P1BalancedGear);\nimport P2SurvivalGear from './gear_sets/p2_survival.gear.json';\nexport const P2_SURVIVAL_PRESET = PresetUtils.makePresetGear('P2 Preset', P2SurvivalGear);\nimport P3Gear from './gear_sets/p3.gear.json';\nexport const P3_PRESET = PresetUtils.makePresetGear('P3 Preset', P3Gear);\nimport P4Gear from './gear_sets/p4.gear.json';\nexport const P4_PRESET = PresetUtils.makePresetGear('P4 Preset', P4Gear);\n\nimport DefaultApl from './apls/default.apl.json';\nexport const ROTATION_DEFAULT = PresetUtils.makePresetAPLRotation('Default APL', DefaultApl);\nexport const ROTATION_PRESET_SIMPLE = PresetUtils.makePresetSimpleRotation('Simple Cooldowns', Spec.SpecProtectionWarrior, ProtectionWarriorRotation.create());\n\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/wotlk/talent-calc and copy the numbers in the url.\nexport const StandardTalents = {\n\tname: 'Standard',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '2500030023-302-053351225000012521030113321',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: WarriorMajorGlyph.GlyphOfBlocking,\n\t\t\tmajor2: WarriorMajorGlyph.GlyphOfVigilance,\n\t\t\tmajor3: WarriorMajorGlyph.GlyphOfDevastate,\n\t\t\tminor1: WarriorMinorGlyph.GlyphOfCharge,\n\t\t\tminor2: WarriorMinorGlyph.GlyphOfThunderClap,\n\t\t\tminor3: WarriorMinorGlyph.GlyphOfCommand,\n\t\t}),\n\t}),\n};\n\nexport const UATalents = {\n\tname: 'UA',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '35023301230051002020120002-2-05035122500000252',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: WarriorMajorGlyph.GlyphOfRevenge,\n\t\t\tmajor2: WarriorMajorGlyph.GlyphOfHeroicStrike,\n\t\t\tmajor3: WarriorMajorGlyph.GlyphOfSweepingStrikes,\n\t\t\tminor1: WarriorMinorGlyph.GlyphOfCharge,\n\t\t\tminor2: WarriorMinorGlyph.GlyphOfThunderClap,\n\t\t\tminor3: WarriorMinorGlyph.GlyphOfCommand,\n\t\t}),\n\t}),\n};\n\nexport const DefaultOptions = ProtectionWarriorOptions.create({\n\tshout: WarriorShout.WarriorShoutCommanding,\n\tuseShatteringThrow: false,\n\tstartingRage: 0,\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tbattleElixir: BattleElixir.ElixirofExpertise,\n\tguardianElixir: GuardianElixir.ElixirofProtection,\n\tfood: Food.DragonfinFilet,\n\tdefaultPotion: Potions.IndestructiblePotion,\n\tprepopPotion: Potions.IndestructiblePotion,\n\texplosiveBig: Explosive_Big.ThermalSapper,\n\texplosiveSmall: Explosive_Small.ExplosiveSaroniteBomb,\n});\n","import * as BuffDebuffInputs from '../core/components/inputs/buffs_debuffs.js';\nimport * as OtherInputs from '../core/components/other_inputs.js';\nimport { IndividualSimUI, registerSpecConfig } from '../core/individual_sim_ui.js';\nimport { Player } from '../core/player.js';\nimport {\n\tAPLAction,\n\tAPLListItem,\n\tAPLPrepullAction,\n\tAPLRotation,\n} from '../core/proto/apl.js';\nimport {\n\tClass,\n\tCooldowns,\n\tDebuffs,\n\tFaction,\n\tIndividualBuffs,\n\tPartyBuffs,\n\tPseudoStat,\n\tRace,\n\tRaidBuffs,\n\tSpec,\n\tStat,\n\tTristateEffect\n} from '../core/proto/common.js';\nimport { ProtectionWarrior_Rotation as ProtectionWarriorRotation } from '../core/proto/warrior.js';\nimport * as AplUtils from '../core/proto_utils/apl_utils.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { getSpecIcon } from '../core/proto_utils/utils.js';\nimport * as ProtectionWarriorInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nconst SPEC_CONFIG = registerSpecConfig(Spec.SpecProtectionWarrior, {\n\tcssClass: 'protection-warrior-sim-ui',\n\tcssScheme: 'warrior',\n\t// List any known bugs / issues here and they'll be shown on the site.\n\tknownIssues: [\n\t],\n\n\t// All stats for which EP should be calculated.\n\tepStats: [\n\t\tStat.StatHealth,\n\t\tStat.StatStamina,\n\t\tStat.StatStrength,\n\t\tStat.StatAgility,\n\t\tStat.StatAttackPower,\n\t\tStat.StatExpertise,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatArmor,\n\t\tStat.StatBonusArmor,\n\t\tStat.StatArmorPenetration,\n\t\tStat.StatDefense,\n\t\tStat.StatBlock,\n\t\tStat.StatBlockValue,\n\t\tStat.StatDodge,\n\t\tStat.StatParry,\n\t\tStat.StatResilience,\n\t\tStat.StatNatureResistance,\n\t\tStat.StatShadowResistance,\n\t\tStat.StatFrostResistance,\n\t],\n\tepPseudoStats: [\n\t\tPseudoStat.PseudoStatMainHandDps,\n\t],\n\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\tepReferenceStat: Stat.StatAttackPower,\n\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\tdisplayStats: [\n\t\tStat.StatHealth,\n\t\tStat.StatArmor,\n\t\tStat.StatBonusArmor,\n\t\tStat.StatStamina,\n\t\tStat.StatStrength,\n\t\tStat.StatAgility,\n\t\tStat.StatAttackPower,\n\t\tStat.StatExpertise,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatArmorPenetration,\n\t\tStat.StatDefense,\n\t\tStat.StatBlock,\n\t\tStat.StatBlockValue,\n\t\tStat.StatDodge,\n\t\tStat.StatParry,\n\t\tStat.StatResilience,\n\t\tStat.StatNatureResistance,\n\t\tStat.StatShadowResistance,\n\t\tStat.StatFrostResistance,\n\t],\n\n\tdefaults: {\n\t\t// Default equipped gear.\n\t\tgear: Presets.P3_PRESET.gear,\n\t\t// Default EP weights for sorting gear in the gear picker.\n\t\tepWeights: Stats.fromMap({\n\t\t\t[Stat.StatArmor]: 0.174,\n\t\t\t[Stat.StatBonusArmor]: 0.155,\n\t\t\t[Stat.StatStamina]: 2.336,\n\t\t\t[Stat.StatStrength]: 1.555,\n\t\t\t[Stat.StatAgility]: 2.771,\n\t\t\t[Stat.StatAttackPower]: 0.32,\n\t\t\t[Stat.StatExpertise]: 1.44,\n\t\t\t[Stat.StatMeleeHit]: 1.432,\n\t\t\t[Stat.StatMeleeCrit]: 0.925,\n\t\t\t[Stat.StatMeleeHaste]: 0.431,\n\t\t\t[Stat.StatArmorPenetration]: 1.055,\n\t\t\t[Stat.StatBlock]: 1.320,\n\t\t\t[Stat.StatBlockValue]: 1.373,\n\t\t\t[Stat.StatDodge]: 2.606,\n\t\t\t[Stat.StatParry]: 2.649,\n\t\t\t[Stat.StatDefense]: 3.305,\n\t\t}, {\n\t\t\t[PseudoStat.PseudoStatMainHandDps]: 6.081,\n\t\t}),\n\t\t// Default consumes settings.\n\t\tconsumes: Presets.DefaultConsumes,\n\t\t// Default talents.\n\t\ttalents: Presets.StandardTalents.data,\n\t\t// Default spec-specific settings.\n\t\tspecOptions: Presets.DefaultOptions,\n\t\t// Default raid/party buffs settings.\n\t\traidBuffs: RaidBuffs.create({\n\t\t\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\t\t\tpowerWordFortitude: TristateEffect.TristateEffectImproved,\n\t\t\tabominationsMight: true,\n\t\t\tswiftRetribution: true,\n\t\t\tbloodlust: true,\n\t\t\tstrengthOfEarthTotem: TristateEffect.TristateEffectImproved,\n\t\t\tleaderOfThePack: TristateEffect.TristateEffectImproved,\n\t\t\tsanctifiedRetribution: true,\n\t\t\tdevotionAura: TristateEffect.TristateEffectImproved,\n\t\t\tstoneskinTotem: TristateEffect.TristateEffectImproved,\n\t\t\ticyTalons: true,\n\t\t\tretributionAura: true,\n\t\t\tthorns: TristateEffect.TristateEffectImproved,\n\t\t\tshadowProtection: true,\n\t\t}),\n\t\tpartyBuffs: PartyBuffs.create({\n\t\t}),\n\t\tindividualBuffs: IndividualBuffs.create({\n\t\t\tblessingOfKings: true,\n\t\t\tblessingOfMight: TristateEffect.TristateEffectImproved,\n\t\t\tblessingOfSanctuary: true,\n\t\t}),\n\t\tdebuffs: Debuffs.create({\n\t\t\tsunderArmor: true,\n\t\t\tmangle: true,\n\t\t\tvindication: true,\n\t\t\tfaerieFire: TristateEffect.TristateEffectImproved,\n\t\t\tinsectSwarm: true,\n\t\t\tbloodFrenzy: true,\n\t\t\tjudgementOfLight: true,\n\t\t\theartOfTheCrusader: true,\n\t\t\tfrostFever: TristateEffect.TristateEffectImproved,\n\t\t}),\n\t},\n\n\t// IconInputs to include in the 'Player' section on the settings tab.\n\tplayerIconInputs: [\n\t\tProtectionWarriorInputs.ShoutPicker,\n\t\tProtectionWarriorInputs.ShatteringThrow,\n\t],\n\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\tincludeBuffDebuffInputs: [\n\t\tBuffDebuffInputs.HealthBuff,\n\t],\n\texcludeBuffDebuffInputs: [\n\t],\n\t// Inputs to include in the 'Other' section on the settings tab.\n\totherInputs: {\n\t\tinputs: [\n\t\t\tOtherInputs.TankAssignment,\n\t\t\tOtherInputs.IncomingHps,\n\t\t\tOtherInputs.HealingCadence,\n\t\t\tOtherInputs.HealingCadenceVariation,\n\t\t\tOtherInputs.BurstWindow,\n\t\t\tOtherInputs.HpPercentForDefensives,\n\t\t\tOtherInputs.InspirationUptime,\n\t\t\tProtectionWarriorInputs.StartingRage,\n\t\t\tProtectionWarriorInputs.Munch,\n\t\t\tOtherInputs.InFrontOfTarget,\n\t\t],\n\t},\n\tencounterPicker: {\n\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\tshowExecuteProportion: false,\n\t},\n\n\tpresets: {\n\t\t// Preset talents that the user can quickly select.\n\t\ttalents: [\n\t\t\tPresets.StandardTalents,\n\t\t\tPresets.UATalents,\n\t\t],\n\t\t// Preset rotations that the user can quickly select.\n\t\trotations: [\n\t\t\tPresets.ROTATION_DEFAULT,\n\t\t\tPresets.ROTATION_PRESET_SIMPLE,\n\t\t],\n\t\t// Preset gear configurations that the user can quickly select.\n\t\tgear: [\n\t\t\tPresets.PRERAID_BALANCED_PRESET,\n\t\t\tPresets.P4_PRERAID_PRESET,\n\t\t\tPresets.P1_BALANCED_PRESET,\n\t\t\tPresets.P2_SURVIVAL_PRESET,\n\t\t\tPresets.P3_PRESET,\n\t\t\tPresets.P4_PRESET,\n\t\t],\n\t},\n\n\tautoRotation: (_player: Player<Spec.SpecProtectionWarrior>): APLRotation => {\n\t\treturn Presets.ROTATION_DEFAULT.rotation.rotation!;\n\t},\n\n\tsimpleRotation: (player: Player<Spec.SpecProtectionWarrior>, simple: ProtectionWarriorRotation, cooldowns: Cooldowns): APLRotation => {\n\t\tconst [prepullActions, actions] = AplUtils.standardCooldownDefaults(cooldowns);\n\n\t\tconst preShout = APLPrepullAction.fromJsonString(`{\"action\":{\"castSpell\":{\"spellId\":{\"spellId\":47440}}},\"doAtValue\":{\"const\":{\"val\":\"-10s\"}}}`);\n\n\t\tconst heroicStrike = APLAction.fromJsonString(`{\"condition\":{\"cmp\":{\"op\":\"OpGe\",\"lhs\":{\"currentRage\":{}},\"rhs\":{\"const\":{\"val\":\"30\"}}}},\"castSpell\":{\"spellId\":{\"tag\":1,\"spellId\":47450}}}`);\n\t\tconst shieldSlam = APLAction.fromJsonString(`{\"castSpell\":{\"spellId\":{\"spellId\":47488}}}`);\n\t\tconst revenge = APLAction.fromJsonString(`{\"castSpell\":{\"spellId\":{\"spellId\":57823}}}`);\n\t\tconst refreshShout = APLAction.fromJsonString(`{\"condition\":{\"auraShouldRefresh\":{\"sourceUnit\":{\"type\":\"Self\"},\"auraId\":{\"spellId\":47440},\"maxOverlap\":{\"const\":{\"val\":\"3s\"}}}},\"castSpell\":{\"spellId\":{\"spellId\":47440}}}`);\n\t\tconst refreshTclap = APLAction.fromJsonString(`{\"condition\":{\"auraShouldRefresh\":{\"auraId\":{\"spellId\":47502},\"maxOverlap\":{\"const\":{\"val\":\"2s\"}}}},\"castSpell\":{\"spellId\":{\"spellId\":47502}}}`);\n\t\tconst refreshDemo = APLAction.fromJsonString(`{\"condition\":{\"auraShouldRefresh\":{\"auraId\":{\"spellId\":47437},\"maxOverlap\":{\"const\":{\"val\":\"2s\"}}}},\"castSpell\":{\"spellId\":{\"spellId\":25203}}}`);\n\t\tconst devastate = APLAction.fromJsonString(`{\"castSpell\":{\"spellId\":{\"spellId\":47498}}}`);\n\n\t\tprepullActions.push(preShout);\n\n\t\tactions.push(...[\n\t\t\theroicStrike,\n\t\t\tshieldSlam,\n\t\t\trevenge,\n\t\t\trefreshShout,\n\t\t\trefreshTclap,\n\t\t\trefreshDemo,\n\t\t\tdevastate,\n\t\t\t].filter(a => a) as Array<APLAction>)\n\n\t\treturn APLRotation.create({\n\t\t\tprepullActions: prepullActions,\n\t\t\tpriorityList: actions.map(action => APLListItem.create({\n\t\t\t\taction: action,\n\t\t\t}))\n\t\t});\n\t},\n\n\traidSimPresets: [\n\t\t{\n\t\t\tspec: Spec.SpecProtectionWarrior,\n\t\t\ttooltip: 'Protection Warrior',\n\t\t\tdefaultName: 'Protection',\n\t\t\ticonUrl: getSpecIcon(Class.ClassWarrior, 2),\n\n\t\t\ttalents: Presets.StandardTalents.data,\n\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.P1_BALANCED_PRESET.gear,\n\t\t\t\t\t2: Presets.P2_SURVIVAL_PRESET.gear,\n\t\t\t\t\t3: Presets.P3_PRESET.gear,\n\t\t\t\t\t4: Presets.P4_PRESET.gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.P1_BALANCED_PRESET.gear,\n\t\t\t\t\t2: Presets.P2_SURVIVAL_PRESET.gear,\n\t\t\t\t\t3: Presets.P3_PRESET.gear,\n\t\t\t\t\t4: Presets.P4_PRESET.gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n});\n\nexport class ProtectionWarriorSimUI extends IndividualSimUI<Spec.SpecProtectionWarrior> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecProtectionWarrior>) {\n\t\tsuper(parentElem, player, SPEC_CONFIG);\n\t}\n}\n"],"names":["StartingRage","InputHelpers.makeSpecOptionsNumberInput","fieldName","label","labelTooltip","ShoutPicker","InputHelpers.makeSpecOptionsEnumIconInput","values","color","value","WarriorShout","WarriorShoutNone","actionId","ActionIDMap","fromSpellId","BATTLESHOUT","WarriorShoutBattle","COMMANDINGSHOUT","WarriorShoutCommanding","showWhen","player","getLevel","ShatteringThrow","InputHelpers.makeSpecOptionsBooleanIconInput","id","ActionId","Munch","InputHelpers.makeSpecOptionsBooleanInput","PRERAID_BALANCED_PRESET","PresetUtils.makePresetGear","P4_PRERAID_PRESET","PreraidP4Gear","P1_BALANCED_PRESET","P1BalancedGear","P2_SURVIVAL_PRESET","P2SurvivalGear","P3_PRESET","P3Gear","P4_PRESET","P4Gear","ROTATION_DEFAULT","PresetUtils.makePresetAPLRotation","DefaultApl","ROTATION_PRESET_SIMPLE","PresetUtils.makePresetSimpleRotation","Spec","SpecProtectionWarrior","ProtectionWarriorRotation","create","StandardTalents","name","data","SavedTalents","talentsString","glyphs","Glyphs","major1","WarriorMajorGlyph","GlyphOfBlocking","major2","GlyphOfVigilance","major3","GlyphOfDevastate","minor1","WarriorMinorGlyph","GlyphOfCharge","minor2","GlyphOfThunderClap","minor3","GlyphOfCommand","UATalents","GlyphOfRevenge","GlyphOfHeroicStrike","GlyphOfSweepingStrikes","DefaultOptions","ProtectionWarriorOptions","shout","useShatteringThrow","startingRage","DefaultConsumes","Consumes","battleElixir","BattleElixir","ElixirofExpertise","guardianElixir","GuardianElixir","ElixirofProtection","food","Food","DragonfinFilet","defaultPotion","Potions","IndestructiblePotion","prepopPotion","explosiveBig","Explosive_Big","ThermalSapper","explosiveSmall","Explosive_Small","ExplosiveSaroniteBomb","SPEC_CONFIG","registerSpecConfig","cssClass","cssScheme","knownIssues","epStats","Stat","StatHealth","StatStamina","StatStrength","StatAgility","StatAttackPower","StatExpertise","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatArmor","StatBonusArmor","StatArmorPenetration","StatDefense","StatBlock","StatBlockValue","StatDodge","StatParry","StatResilience","StatNatureResistance","StatShadowResistance","StatFrostResistance","epPseudoStats","PseudoStat","PseudoStatMainHandDps","epReferenceStat","displayStats","defaults","gear","Presets.P3_PRESET","epWeights","Stats","fromMap","consumes","Presets.DefaultConsumes","talents","Presets.StandardTalents","specOptions","Presets.DefaultOptions","raidBuffs","RaidBuffs","giftOfTheWild","TristateEffect","TristateEffectImproved","powerWordFortitude","abominationsMight","swiftRetribution","bloodlust","strengthOfEarthTotem","leaderOfThePack","sanctifiedRetribution","devotionAura","stoneskinTotem","icyTalons","retributionAura","thorns","shadowProtection","partyBuffs","PartyBuffs","individualBuffs","IndividualBuffs","blessingOfKings","blessingOfMight","blessingOfSanctuary","debuffs","Debuffs","sunderArmor","mangle","vindication","faerieFire","insectSwarm","bloodFrenzy","judgementOfLight","heartOfTheCrusader","frostFever","playerIconInputs","ProtectionWarriorInputs.ShoutPicker","ProtectionWarriorInputs.ShatteringThrow","includeBuffDebuffInputs","BuffDebuffInputs.HealthBuff","excludeBuffDebuffInputs","otherInputs","inputs","OtherInputs.TankAssignment","OtherInputs.IncomingHps","OtherInputs.HealingCadence","OtherInputs.HealingCadenceVariation","OtherInputs.BurstWindow","OtherInputs.HpPercentForDefensives","OtherInputs.InspirationUptime","ProtectionWarriorInputs.StartingRage","ProtectionWarriorInputs.Munch","OtherInputs.InFrontOfTarget","encounterPicker","showExecuteProportion","presets","Presets.UATalents","rotations","Presets.ROTATION_DEFAULT","Presets.ROTATION_PRESET_SIMPLE","Presets.PRERAID_BALANCED_PRESET","Presets.P4_PRERAID_PRESET","Presets.P1_BALANCED_PRESET","Presets.P2_SURVIVAL_PRESET","Presets.P4_PRESET","autoRotation","_player","rotation","simpleRotation","simple","cooldowns","prepullActions","actions","AplUtils.standardCooldownDefaults","preShout","APLPrepullAction","fromJsonString","heroicStrike","APLAction","shieldSlam","revenge","refreshShout","refreshTclap","refreshDemo","devastate","push","filter","a","APLRotation","priorityList","map","action","APLListItem","raidSimPresets","spec","tooltip","defaultName","iconUrl","getSpecIcon","Class","ClassWarrior","defaultFactionRaces","Faction","Unknown","Race","RaceUnknown","Alliance","RaceHuman","Horde","RaceOrc","defaultGear","ProtectionWarriorSimUI","IndividualSimUI","constructor","parentElem","super"],"mappings":"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"}