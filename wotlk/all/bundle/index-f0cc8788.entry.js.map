{"version":3,"file":"index-f0cc8788.entry.js","sources":["../../../../../ui/raid/presets.ts","../../../../../ui/raid/import_export.ts","../../../../../ui/raid/raid_picker.ts","../../../../../ui/raid/raid_stats.ts","../../../../../ui/raid/raid_tab.ts","../../../../../ui/core/components/raid_target_picker.ts","../../../../../ui/raid/assignments_picker.ts","../../../../../ui/raid/blessings_picker.ts","../../../../../ui/raid/tanks_picker.ts","../../../../../ui/raid/settings_tab.ts","../../../../../ui/raid/raid_sim_ui.ts","../../../../../ui/raid/index.ts"],"sourcesContent":["import { IndividualSimUI, IndividualSimUIConfig, RaidSimPreset } from '../core/individual_sim_ui.js';\n\nimport {\n\tSpec\n} from '../core/proto/common.js';\nimport {\n\tnaturalSpecOrder,\n} from '../core/proto_utils/utils.js';\n\nimport { Player, getSpecConfig } from '../core/player.js';\n\nimport { TankDeathknightSimUI } from '../tank_deathknight/sim.js';\nimport { DeathknightSimUI } from '../deathknight/sim.js';\nimport { BalanceDruidSimUI } from '../balance_druid/sim.js';\nimport { FeralDruidSimUI } from '../feral_druid/sim.js';\nimport { FeralTankDruidSimUI } from '../feral_tank_druid/sim.js';\nimport { RestorationDruidSimUI } from '../restoration_druid/sim.js';\nimport { ElementalShamanSimUI } from '../elemental_shaman/sim.js';\nimport { EnhancementShamanSimUI } from '../enhancement_shaman/sim.js';\nimport { RestorationShamanSimUI } from '../restoration_shaman/sim.js';\nimport { HunterSimUI } from '../hunter/sim.js';\nimport { MageSimUI } from '../mage/sim.js';\nimport { RogueSimUI } from '../rogue/sim.js';\nimport { HolyPaladinSimUI } from '../holy_paladin/sim.js';\nimport { ProtectionPaladinSimUI } from '../protection_paladin/sim.js';\nimport { RetributionPaladinSimUI } from '../retribution_paladin/sim.js';\nimport { HealingPriestSimUI } from '../healing_priest/sim.js';\nimport { ShadowPriestSimUI } from '../shadow_priest/sim.js';\nimport { SmitePriestSimUI } from '../smite_priest/sim.js';\nimport { WarriorSimUI } from '../warrior/sim.js';\nimport { ProtectionWarriorSimUI } from '../protection_warrior/sim.js';\nimport { WarlockSimUI } from '../warlock/sim.js';\n\nexport const specSimFactories: Record<Spec, (parentElem: HTMLElement, player: Player<any>) => IndividualSimUI<any>> = {\n\t[Spec.SpecTankDeathknight]: (parentElem: HTMLElement, player: Player<any>) => new TankDeathknightSimUI(parentElem, player),\n\t[Spec.SpecDeathknight]: (parentElem: HTMLElement, player: Player<any>) => new DeathknightSimUI(parentElem, player),\n\t[Spec.SpecBalanceDruid]: (parentElem: HTMLElement, player: Player<any>) => new BalanceDruidSimUI(parentElem, player),\n\t[Spec.SpecFeralDruid]: (parentElem: HTMLElement, player: Player<any>) => new FeralDruidSimUI(parentElem, player),\n\t[Spec.SpecFeralTankDruid]: (parentElem: HTMLElement, player: Player<any>) => new FeralTankDruidSimUI(parentElem, player),\n\t[Spec.SpecRestorationDruid]: (parentElem: HTMLElement, player: Player<any>) => new RestorationDruidSimUI(parentElem, player),\n\t[Spec.SpecElementalShaman]: (parentElem: HTMLElement, player: Player<any>) => new ElementalShamanSimUI(parentElem, player),\n\t[Spec.SpecEnhancementShaman]: (parentElem: HTMLElement, player: Player<any>) => new EnhancementShamanSimUI(parentElem, player),\n\t[Spec.SpecRestorationShaman]: (parentElem: HTMLElement, player: Player<any>) => new RestorationShamanSimUI(parentElem, player),\n\t[Spec.SpecHunter]: (parentElem: HTMLElement, player: Player<any>) => new HunterSimUI(parentElem, player),\n\t[Spec.SpecMage]: (parentElem: HTMLElement, player: Player<any>) => new MageSimUI(parentElem, player),\n\t[Spec.SpecRogue]: (parentElem: HTMLElement, player: Player<any>) => new RogueSimUI(parentElem, player),\n\t[Spec.SpecHolyPaladin]: (parentElem: HTMLElement, player: Player<any>) => new HolyPaladinSimUI(parentElem, player),\n\t[Spec.SpecProtectionPaladin]: (parentElem: HTMLElement, player: Player<any>) => new ProtectionPaladinSimUI(parentElem, player),\n\t[Spec.SpecRetributionPaladin]: (parentElem: HTMLElement, player: Player<any>) => new RetributionPaladinSimUI(parentElem, player),\n\t[Spec.SpecHealingPriest]: (parentElem: HTMLElement, player: Player<any>) => new HealingPriestSimUI(parentElem, player),\n\t[Spec.SpecShadowPriest]: (parentElem: HTMLElement, player: Player<any>) => new ShadowPriestSimUI(parentElem, player),\n\t[Spec.SpecSmitePriest]: (parentElem: HTMLElement, player: Player<any>) => new SmitePriestSimUI(parentElem, player),\n\t[Spec.SpecWarrior]: (parentElem: HTMLElement, player: Player<any>) => new WarriorSimUI(parentElem, player),\n\t[Spec.SpecProtectionWarrior]: (parentElem: HTMLElement, player: Player<any>) => new ProtectionWarriorSimUI(parentElem, player),\n\t[Spec.SpecWarlock]: (parentElem: HTMLElement, player: Player<any>) => new WarlockSimUI(parentElem, player),\n};\n\nexport const playerPresets: Array<RaidSimPreset<any>> = naturalSpecOrder\n\t.map(getSpecConfig)\n\t.map(config => {\n\t\tconst indSimUiConfig = config as IndividualSimUIConfig<any>;\n\t\treturn indSimUiConfig.raidSimPresets;\n\t})\n\t.flat();\n\nexport const implementedSpecs: Array<Spec> = [...new Set(playerPresets.map(preset => preset.spec))];\n","import { Exporter } from '../core/components/exporters';\nimport { Importer } from '../core/components/importers';\nimport { Encounter } from '../core/encounter';\nimport { RaidSimPreset } from '../core/individual_sim_ui';\nimport { Player } from '../core/player';\nimport { Party as PartyProto, Player as PlayerProto, Raid as RaidProto } from '../core/proto/api';\nimport {\n\tClass,\n\tEncounter as EncounterProto,\n\tEquipmentSpec,\n\tFaction,\n\tItemSpec,\n\tProfession,\n\tRace,\n\tSpec,\n\tTarget as TargetProto,\n\tUnitReference,\n\tUnitReference_Type,\n} from '../core/proto/common';\nimport { RaidSimSettings } from '../core/proto/ui';\nimport { professionNames, raceNames } from '../core/proto_utils/names';\nimport {\n\tDeathknightSpecs,\n\tDruidSpecs,\n\tgetTalentTreePoints,\n\tisTankSpec,\n\tmakeDefaultBlessings,\n\tplayerToSpec,\n\tPriestSpecs,\n\traceToFaction,\n\tRogueSpecs,\n\tSpecOptions,\n} from '../core/proto_utils/utils';\nimport { MAX_NUM_PARTIES } from '../core/raid';\nimport { EventID, TypedEvent } from '../core/typed_event';\nimport { bucket, distinct } from '../core/utils';\nimport { playerPresets } from './presets';\nimport { RaidSimUI } from './raid_sim_ui';\n\nexport class RaidJsonImporter extends Importer {\n\tprivate readonly simUI: RaidSimUI;\n\tconstructor(parent: HTMLElement, simUI: RaidSimUI) {\n\t\tsuper(parent, simUI, 'JSON Import', true);\n\t\tthis.simUI = simUI;\n\n\t\tthis.descriptionElem.innerHTML = `\n\t\t\t<p>\n\t\t\t\tImport settings from a JSON text file, which can be created using the JSON Export feature of this site.\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tTo import, paste the JSON text below and click, 'Import'.\n\t\t\t</p>\n\t\t`;\n\t}\n\n\tasync onImport(data: string) {\n\t\tconst settings = RaidSimSettings.fromJsonString(data, { ignoreUnknownFields: true });\n\t\tthis.simUI.fromProto(TypedEvent.nextEventID(), settings);\n\t\tthis.close();\n\t}\n}\n\nexport class RaidJsonExporter extends Exporter {\n\tprivate readonly simUI: RaidSimUI;\n\n\tconstructor(parent: HTMLElement, simUI: RaidSimUI) {\n\t\tsuper(parent, simUI, { title: 'JSON Export', allowDownload: true });\n\t\tthis.simUI = simUI;\n\t\tthis.init();\n\t}\n\n\tgetData(): string {\n\t\treturn JSON.stringify(RaidSimSettings.toJson(this.simUI.toProto()), null, 2);\n\t}\n}\n\nexport class RaidWCLImporter extends Importer {\n\tprivate queryCounter = 0;\n\n\tprivate readonly simUI: RaidSimUI;\n\tconstructor(parent: HTMLElement, simUI: RaidSimUI) {\n\t\tsuper(parent, simUI, 'WCL Import', false);\n\t\tthis.simUI = simUI;\n\t\tthis.textElem.classList.add('small-textarea');\n\t\tthis.descriptionElem.innerHTML = `\n\t\t\t<p>\n\t\t\t\tImports the entire raid from a WCL report.<br>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tTo import, paste the WCL report and fight link (https://classic.warcraftlogs.com/reports/REPORTID#fight=FIGHTID).<br>\n\t\t\t\tInclude the fight ID or else the first fight in the report will be used.<br>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tThe following are imported directly from the report:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Player Name</li>\n\t\t\t\t\t<li>Equipment (items, enchants, and gems)</li>\n\t\t\t\t\t<li>Faction (Alliance / Horde)</li>\n\t\t\t\t\t<li>Encounter: If the import link has a fight ID we try to match with a preset Encounter. Note that many Encounters are still unimplemented.</li>\n\t\t\t\t</ul>\n\n\t\t\t\tThe following are not available directly from the report data, but we try to infer them:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Talents: Log data only gives us the tree summary (e.g. '51/20/0') so we match this with the closest preset talent build.</li>\n\t\t\t\t\t<li>Glyphs: Glyphs are absent from log data, but we pair them with the inferred Talents.</li>\n\t\t\t\t\t<li>Race: Inferred from Race-specific abilties used in any fight if possible, or defaults to Spec-specific Race.</li>\n\t\t\t\t\t<li>Professions: Inferred from profession-locked items/enchants/gems.</li>\n\t\t\t\t\t<li>Buff assignments (Innervate, Unholy Frenzy, etc): Inferred from casts.</li>\n\t\t\t\t\t<li>Party Composition: Inferred from party-only effects, such as Heroic Presence, Prayer of Healing, or Vampiric Touch.</li>\n\t\t\t\t</ul>\n\n\t\t\t\tThe following are not imported, and instead use spec-specific defaults:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Rotation / Spec-specific options</li>\n\t\t\t\t\t<li>Consumes</li>\n\t\t\t\t\t<li>Paladin Blessings</li>\n\t\t\t\t</ul>\n\t\t\t</p>\n\t\t`;\n\t}\n\n\tprivate token = '';\n\tprivate async getWCLBearerToken(): Promise<string> {\n\t\tif (this.token == '') {\n\t\t\tconst response = await fetch('https://classic.warcraftlogs.com/oauth/token', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: 'Basic ' + btoa('963d31c8-7efa-4dde-87cf-1b254a8a2f8c:lRJVhujEEnF96xfUoxVHSpnqKN9v8bTqGEjutsO3'),\n\t\t\t\t},\n\t\t\t\tbody: new URLSearchParams({\n\t\t\t\t\tgrant_type: 'client_credentials',\n\t\t\t\t}),\n\t\t\t});\n\t\t\tconst json = await response.json();\n\t\t\tthis.token = json.access_token;\n\t\t}\n\t\treturn this.token;\n\t}\n\n\tprivate async queryWCL(query: string): Promise<any> {\n\t\tconst token = await this.getWCLBearerToken();\n\t\tconst headers = {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\tAccept: 'application/json',\n\t\t};\n\n\t\tconst queryURL = `https://classic.warcraftlogs.com/api/v2/client?query=${query}`;\n\t\tthis.queryCounter++;\n\n\t\t// Query WCL\n\t\tconst res = await fetch(encodeURI(queryURL), {\n\t\t\tmethod: 'GET',\n\t\t\theaders: headers,\n\t\t});\n\n\t\tconst result = await res.json();\n\t\tif (result?.errors?.length) {\n\t\t\tconst errorStr = result.errors.map((e: any) => e.message).join('\\n');\n\t\t\tthrow new Error(`GraphQL error: ${errorStr}\\n\\nQuery: ${query}`);\n\t\t} else {\n\t\t\tconsole.debug(`WCL query: ${query}\\n\\nResult: ${JSON.stringify(result)}`);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate async parseURL(url: string): Promise<wclUrlData> {\n\t\tconst match = url.match(/classic\\.warcraftlogs\\.com\\/reports\\/([a-zA-Z0-9:]+)\\/?(#.*fight=((\\d+)|(last)))?/);\n\t\tif (!match) {\n\t\t\tthrow new Error(`Invalid WCL URL ${url}, must look like \"classic.warcraftlogs.com/reports/XXXX\"`);\n\t\t}\n\n\t\tconst urlData = {\n\t\t\treportID: match[1],\n\t\t\tfightID: '',\n\t\t};\n\n\t\t// If the URL has a Fight ID in it, use it\n\t\tif (match[2] && match[3] && match[3] != 'last') {\n\t\t\turlData.fightID = match[3];\n\t\t} else {\n\t\t\t// Make a separate query to get the corresponding ReportFights\n\t\t\tconst fightDataQuery = `{\n\t\t\t\treportData {\n\t\t\t\t\treport(code: \"${urlData.reportID}\") {\n\t\t\t\t\t\tfights(killType: Kills, translate: true) {\n\t\t\t\t\t\t\tid, name\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}`;\n\n\t\t\tconst fightData = await this.queryWCL(fightDataQuery);\n\t\t\tconst fights = fightData.data.reportData.report.fights;\n\n\t\t\tif (match[3] == 'last') {\n\t\t\t\turlData.fightID = String(fights[fights.length - 1].id);\n\t\t\t} else {\n\t\t\t\t// Default to using the first Fight\n\t\t\t\turlData.fightID = String(fights[0].id);\n\t\t\t}\n\t\t}\n\n\t\tconsole.debug(`Importing WCL report: ${JSON.stringify(urlData)}`);\n\t\treturn urlData;\n\t}\n\n\tprivate async getRateLimit(): Promise<wclRateLimitData> {\n\t\tconst query = `{\n\t    rateLimitData {\n\t      limitPerHour, pointsSpentThisHour, pointsResetIn\n\t    }\n\t  }`;\n\t\tconst result = await this.queryWCL(query);\n\t\tconst data = result['data']['rateLimitData'] as wclRateLimitData;\n\t\treturn data;\n\t}\n\n\tasync onImport(importLink: string) {\n\t\tthis.importButton.disabled = true;\n\t\tthis.rootElem.style.cursor = 'wait';\n\t\ttry {\n\t\t\tawait this.doImport(importLink);\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\talert('Failed import from WCL: ' + error);\n\t\t}\n\t\tthis.importButton.disabled = false;\n\t\tthis.rootElem.style.removeProperty('cursor');\n\t}\n\n\tasync doImport(importLink: string) {\n\t\tif (!importLink.length) {\n\t\t\tthrow new Error('No import link provided!');\n\t\t}\n\n\t\tconst urlData = await this.parseURL(importLink);\n\t\tconst _rateLimit = await this.getRateLimit();\n\n\t\t// Schema for WCL API here: https://www.warcraftlogs.com/v2-api-docs/warcraft/\n\t\t// WCL charges us 1 'point' for each subquery we issue within the request. So\n\t\t// by using filter expressions we can combine our queries together, to spend\n\t\t// fewer points.\n\t\tconst reportDataQuery = `{\n\t\t\treportData {\n\t\t\t\treport(code: \"${urlData.reportID}\") {\n\t\t\t\t\tguild {\n\t\t\t\t\t\tname faction {id}\n\t\t\t\t\t}\n\t\t\t\t\tplayerDetails: table(fightIDs: [${urlData.fightID}], dataType: Casts, killType: All, viewBy: Default)\n\t\t\t\t\tcombatantInfoEvents: events(fightIDs: [${urlData.fightID}], dataType:CombatantInfo, limit: 50) { data }\n\t\t\t\t\tfights(fightIDs: [${urlData.fightID}]) {\n\t\t\t\t\t\tstartTime, endTime, id, name\n\t\t\t\t\t}\n\n\t\t\t\t\treportCastEvents: events(dataType:Casts, endTime: 99999999, filterExpression: \"${[racialSpells, professionSpells]\n\t\t\t\t\t\t.flat()\n\t\t\t\t\t\t.map(spell => spell.id)\n\t\t\t\t\t\t.map(id => `ability.id = ${id}`)\n\t\t\t\t\t\t.join(' OR ')}\", limit: 10000) { data }\n\n\t\t\t\t\tfightCastEvents: events(fightIDs: [${urlData.fightID}], dataType:Casts, filterExpression: \"${[externalCDSpells]\n\t\t\t\t\t\t.flat()\n\t\t\t\t\t\t.map(spell => spell.id)\n\t\t\t\t\t\t.map(id => `ability.id = ${id}`)\n\t\t\t\t\t\t.join(' OR ')}\", limit: 10000) { data }\n\n\t\t\t\t\tfightHealEvents: events(fightIDs: [${urlData.fightID}], dataType:Healing, filterExpression: \"${[samePartyHealingSpells, otherPartyHealingSpells]\n\t\t\t\t\t\t.flat()\n\t\t\t\t\t\t.map(spell => spell.id)\n\t\t\t\t\t\t.map(id => `ability.id = ${id}`)\n\t\t\t\t\t\t.join(' OR ')}\", limit: 10000) { data }\n\n\t\t\t\t\tmanaTideTotem: events(fightIDs: [${urlData.fightID}], dataType:Resources, filterExpression: \"ability.id = 39609\", limit: 100) { data }\n\t\t\t\t}\n\t\t\t}\n\t\t}`;\n\t\tconst reportData = await this.queryWCL(reportDataQuery);\n\n\t\t// Process the report data.\n\t\tconst wclData = reportData.data.reportData.report; // TODO: Typings?\n\t\tconst playerData: wclPlayer[] = wclData.playerDetails.data.entries;\n\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tconst eventID = TypedEvent.nextEventID();\n\t\t\tconst wclPlayers = playerData.map(wclPlayer => new WCLSimPlayer(wclPlayer, this.simUI, eventID));\n\t\t\tthis.inferRace(eventID, wclData, wclPlayers);\n\t\t\tthis.inferProfessions(eventID, wclData, wclPlayers);\n\t\t\tthis.inferAssignments(eventID, wclData, wclPlayers);\n\t\t\tthis.inferPartyComposition(eventID, wclData, wclPlayers);\n\t\t\tconst numPaladins = wclPlayers.filter(player => player.player.getClass() == Class.ClassPaladin).length;\n\t\t\tconst settings = RaidSimSettings.create({\n\t\t\t\tencounter: this.getEncounterProto(wclData),\n\t\t\t\traid: this.getRaidProto(wclPlayers),\n\t\t\t\tblessings: makeDefaultBlessings(numPaladins),\n\t\t\t});\n\n\t\t\t// Clear the raid out to avoid any taint issues.\n\t\t\tthis.simUI.clearRaid(eventID);\n\t\t\tthis.simUI.fromProto(eventID, settings);\n\t\t});\n\n\t\tthis.close();\n\t}\n\n\tprivate inferRace(eventID: EventID, wclData: any, wclPlayers: WCLSimPlayer[]) {\n\t\twclPlayers.forEach(p => p.player.setRace(eventID, Race.RaceUnknown));\n\n\t\t// If defined in log, use that faction. Otherwise default to UI setting.\n\t\tlet faction = (wclData.guild?.faction?.id || this.simUI.raidPicker?.getCurrentFaction() || Faction.Horde) as Faction;\n\n\t\twclData.combatantInfoEvents.data.forEach((combatantInfo: wclCombatantInfoEvent) => {\n\t\t\tcombatantInfo.auras\n\t\t\t\t.filter(aura => aura.ability == 28878)\n\t\t\t\t.forEach(aura => {\n\t\t\t\t\tconst sourcePlayer = wclPlayers.find(player => player.id == aura.source);\n\t\t\t\t\tif (sourcePlayer && sourcePlayer.player.getRace() != Race.RaceDraenei) {\n\t\t\t\t\t\tconsole.log(`Inferring player ${sourcePlayer.name} has race ${raceNames.get(Race.RaceDraenei)} from Heroic Presence aura event`);\n\t\t\t\t\t\tsourcePlayer.player.setRace(eventID, Race.RaceDraenei);\n\t\t\t\t\t\tfaction = Faction.Alliance;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\n\t\tconst castEventsBySpellId = bucket(wclData.reportCastEvents.data as Array<wclCastEvent>, event => String(event.abilityGameID));\n\t\tracialSpells.forEach(spell => {\n\t\t\tconst spellEvents: Array<wclCastEvent> = castEventsBySpellId[spell.id] || [];\n\t\t\tspellEvents.forEach(event => {\n\t\t\t\tconst sourcePlayer = wclPlayers.find(player => player.id == event.sourceID);\n\t\t\t\tif (sourcePlayer) {\n\t\t\t\t\tconsole.log(`Inferring player ${sourcePlayer.name} has race ${raceNames.get(spell.race)} from ${spell.name} event`);\n\t\t\t\t\tsourcePlayer.player.setRace(eventID, spell.race);\n\t\t\t\t\tfaction = raceToFaction[spell.race];\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\twclPlayers.forEach(p => {\n\t\t\tif (p.player.getRace() == Race.RaceUnknown) {\n\t\t\t\tp.player.setRace(eventID, p.preset.defaultFactionRaces[faction]);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate inferProfessions(eventID: EventID, wclData: any, wclPlayers: WCLSimPlayer[]) {\n\t\tconst castEventsBySpellId = bucket(wclData.reportCastEvents.data as Array<wclCastEvent>, event => String(event.abilityGameID));\n\t\tprofessionSpells.forEach(spell => {\n\t\t\tconst spellEvents: Array<wclCastEvent> = castEventsBySpellId[spell.id] || [];\n\t\t\tspellEvents.forEach(event => {\n\t\t\t\tconst sourcePlayer = wclPlayers.find(player => player.id == event.sourceID);\n\t\t\t\tif (sourcePlayer && !sourcePlayer.inferredProfessions.includes(spell.profession)) {\n\t\t\t\t\tconsole.log(`Inferring player ${sourcePlayer.name} has profession ${professionNames.get(spell.profession)} from ${spell.name} event`);\n\t\t\t\t\tsourcePlayer.inferredProfessions.push(spell.profession);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\twclPlayers.forEach(player => {\n\t\t\tlet professions = distinct(player.inferredProfessions.concat(player.player.getGear().getProfessionRequirements()));\n\t\t\tif (professions.length == 0) {\n\t\t\t\tprofessions = [Profession.Engineering, Profession.Jewelcrafting];\n\t\t\t} else if (professions.length == 1) {\n\t\t\t\tif (professions[0] != Profession.Engineering) {\n\t\t\t\t\tprofessions.push(Profession.Engineering);\n\t\t\t\t} else {\n\t\t\t\t\tprofessions.push(Profession.Jewelcrafting);\n\t\t\t\t}\n\t\t\t}\n\t\t\tplayer.player.setProfessions(eventID, professions);\n\t\t});\n\t}\n\n\tprivate inferAssignments(eventID: EventID, wclData: any, wclPlayers: WCLSimPlayer[]) {\n\t\tconst castEventsBySpellId = bucket(wclData.fightCastEvents.data as Array<wclCastEvent>, event => String(event.abilityGameID));\n\t\texternalCDSpells.forEach(spell => {\n\t\t\tconst spellEvents: Array<wclCastEvent> = castEventsBySpellId[spell.id] || [];\n\t\t\tspellEvents.forEach(event => {\n\t\t\t\tconst sourcePlayer = wclPlayers.find(player => player.id == event.sourceID);\n\t\t\t\tconst targetPlayer = wclPlayers.find(player => player.id == event.targetID);\n\t\t\t\tif (sourcePlayer && targetPlayer && sourcePlayer.player.getClass() == spell.class) {\n\t\t\t\t\tconst specOptions = spell.applyFunc(sourcePlayer.player, targetPlayer.toUnitReference());\n\t\t\t\t\tsourcePlayer.player.setSpecOptions(eventID, specOptions);\n\t\t\t\t\tconsole.log(`Inferring player ${sourcePlayer.name} is targeting ${targetPlayer.name} with ${spell.name} from cast event`);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\t// Assigns the raidIndex field for all players.\n\tprivate inferPartyComposition(eventID: EventID, wclData: any, wclPlayers: WCLSimPlayer[]) {\n\t\tconst setPlayersInParty = (player1: WCLSimPlayer, player2: WCLSimPlayer, reason: string) => {\n\t\t\tif (player1.addPlayerInParty(player2) || player2.addPlayerInParty(player1)) {\n\t\t\t\tconsole.log(`Inferring players ${player1.name} and ${player2.name} in same party from ${reason} event`);\n\t\t\t}\n\t\t};\n\n\t\tconst healEventsBySpellId = bucket(wclData.fightHealEvents.data as Array<wclHealEvent>, event => String(event.abilityGameID));\n\n\t\t// These spells only affect players in the same party as the caster.\n\t\tsamePartyHealingSpells.forEach(spell => {\n\t\t\tconst spellEvents: Array<wclHealEvent> = healEventsBySpellId[spell.id] || [];\n\t\t\tspellEvents.forEach(event => {\n\t\t\t\tconst sourcePlayer = wclPlayers.find(player => player.id == event.sourceID);\n\t\t\t\tconst targetPlayer = wclPlayers.find(player => player.id == event.targetID);\n\t\t\t\tif (sourcePlayer && targetPlayer) {\n\t\t\t\t\tsetPlayersInParty(sourcePlayer, targetPlayer, spell.name);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\t// Prayer of Healing is a bit different, we can infer that players who are targeted at the same time are in a group.\n\t\totherPartyHealingSpells.forEach(spell => {\n\t\t\tconst spellEvents: Array<wclHealEvent> = healEventsBySpellId[spell.id] || [];\n\t\t\tconst spellEventsByTimestamp = bucket(spellEvents, event => String(event.timestamp) + String(event.sourceID));\n\t\t\tfor (const [_timestamp, eventsAtTime] of Object.entries(spellEventsByTimestamp)) {\n\t\t\t\tconst spellTargets = eventsAtTime.map(event => wclPlayers.find(player => player.id == event.targetID));\n\t\t\t\tfor (let i = 0; i < spellTargets.length; i++) {\n\t\t\t\t\tfor (let j = 0; j < spellTargets.length; j++) {\n\t\t\t\t\t\tif (i != j && spellTargets[i] && spellTargets[j]) {\n\t\t\t\t\t\t\tsetPlayersInParty(spellTargets[i]!, spellTargets[j]!, spell.name);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\twclData.combatantInfoEvents.data.forEach((combatantInfo: wclCombatantInfoEvent) => {\n\t\t\tconst targetPlayer = wclPlayers.find(player => player.id == combatantInfo.sourceID);\n\t\t\tcombatantInfo.auras\n\t\t\t\t.filter(aura => aura.ability == 28878)\n\t\t\t\t.forEach(aura => {\n\t\t\t\t\tconst sourcePlayer = wclPlayers.find(player => player.id == aura.source);\n\t\t\t\t\tif (sourcePlayer && targetPlayer) {\n\t\t\t\t\t\tsetPlayersInParty(sourcePlayer, targetPlayer, 'Heroic Presence');\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\n\t\t// Assign players with same-group inferences.\n\t\tlet inferredPlayers = wclPlayers.filter(player => player.playersInParty.length > 0);\n\t\tlet nextEmptyPartyIdx = 0;\n\t\twhile (inferredPlayers.length > 0) {\n\t\t\t// Find all the players in the same party as the first player.\n\t\t\tlet partyMembers = [inferredPlayers[0]].concat(inferredPlayers[0].playersInParty);\n\t\t\tlet numMembers = 0;\n\t\t\twhile (partyMembers.length != numMembers) {\n\t\t\t\tnumMembers = partyMembers.length;\n\t\t\t\tpartyMembers = distinct(partyMembers.map(member => [member].concat(member.playersInParty)).flat());\n\t\t\t}\n\n\t\t\t// Assign these members to an empty party.\n\t\t\tconst partyIdx = nextEmptyPartyIdx;\n\t\t\tnextEmptyPartyIdx++;\n\t\t\tpartyMembers.forEach((member, i) => {\n\t\t\t\tmember.raidIndex = partyIdx * 5 + i;\n\t\t\t});\n\n\t\t\tinferredPlayers = inferredPlayers.filter(player => !partyMembers.includes(player));\n\t\t}\n\n\t\t// Assign remaining players into open slots.\n\t\tconst allRaidIndexes = [...Array(40).keys()];\n\t\tconst nextFreeIndex = () => allRaidIndexes.find(idx => !wclPlayers.some(p => p.raidIndex == idx)) ?? -1;\n\t\twclPlayers\n\t\t\t.filter(player => player.raidIndex == -1)\n\t\t\t.forEach(player => {\n\t\t\t\tconst nextIdx = nextFreeIndex();\n\t\t\t\tif (nextIdx == -1) {\n\t\t\t\t\tthrow new Error('Invalid next idx');\n\t\t\t\t}\n\t\t\t\tplayer.raidIndex = nextIdx;\n\t\t\t});\n\t}\n\n\tprivate getEncounterProto(wclData: any): EncounterProto {\n\t\tconst fight: { startTime: number; endTime: number; id: number; name: string } = wclData.fights[0];\n\n\t\tconst encounter = EncounterProto.create({\n\t\t\tduration: (fight.endTime - fight.startTime) / 1000,\n\t\t\ttargets: [],\n\t\t});\n\n\t\t// Use the preset encounter if it exists.\n\t\tconst closestEncounterPreset = this.simUI.sim.db.getAllPresetEncounters().find(enc => enc.path.includes(fight.name));\n\t\tif (closestEncounterPreset && closestEncounterPreset.targets.length) {\n\t\t\tclosestEncounterPreset.targets\n\t\t\t\t.map(mob => mob.target as TargetProto)\n\t\t\t\t.filter(target => target !== undefined)\n\t\t\t\t.forEach(target => encounter.targets.push(target));\n\t\t}\n\n\t\t// Build a manual target list if no preset encounter exists.\n\t\tif (encounter.targets.length === 0) {\n\t\t\tencounter.targets.push(Encounter.defaultTargetProto());\n\t\t}\n\n\t\treturn encounter;\n\t}\n\n\tprivate getRaidProto(wclPlayers: WCLSimPlayer[]): RaidProto {\n\t\tconst raid = RaidProto.create({\n\t\t\tparties: [...new Array(MAX_NUM_PARTIES).keys()].map(_party =>\n\t\t\t\tPartyProto.create({\n\t\t\t\t\tplayers: [...new Array(5).keys()].map(_player => PlayerProto.create()),\n\t\t\t\t}),\n\t\t\t),\n\t\t});\n\n\t\twclPlayers.forEach(player => {\n\t\t\tconst positionInParty = player.raidIndex % 5;\n\t\t\tconst partyIdx = (player.raidIndex - positionInParty) / 5;\n\t\t\tconst playerProto = player.player.toProto();\n\t\t\traid.parties[partyIdx].players[positionInParty] = playerProto;\n\n\t\t\tif (isTankSpec(playerToSpec(playerProto))) {\n\t\t\t\traid.tanks.push(player.toUnitReference());\n\t\t\t}\n\t\t});\n\n\t\treturn raid;\n\t}\n}\n\nclass WCLSimPlayer {\n\tpublic readonly data: wclPlayer;\n\tpublic readonly id: number;\n\tpublic readonly name: string;\n\tpublic readonly type: string;\n\tpublic raidIndex = -1;\n\n\tprivate readonly simUI: RaidSimUI;\n\tprivate readonly fullType: string;\n\tprivate readonly spec: Spec | null;\n\n\treadonly player: Player<any>;\n\treadonly preset: RaidSimPreset<any>;\n\n\tinferredProfessions: Array<Profession> = [];\n\n\treadonly playersInParty: Array<WCLSimPlayer> = [];\n\n\tconstructor(data: wclPlayer, simUI: RaidSimUI, eventID: EventID) {\n\t\tthis.simUI = simUI;\n\t\tthis.data = data;\n\n\t\tthis.name = data.name;\n\t\tthis.id = data.id;\n\t\tthis.type = data.type;\n\n\t\tconst wclSpec = data.icon.split('-')[1];\n\t\tthis.fullType = this.type + wclSpec;\n\t\tconsole.log(`WCL spec: ${this.fullType}`);\n\n\t\tconst foundSpec = fullTypeToSpec[this.fullType] ?? null;\n\t\tif (foundSpec == null) {\n\t\t\tthrow new Error('Player type not implemented: ' + this.fullType);\n\t\t}\n\t\tthis.spec = foundSpec;\n\t\tthis.player = new Player(this.spec, simUI.sim);\n\n\t\tthis.preset = WCLSimPlayer.getMatchingPreset(foundSpec, data.talents);\n\t\tif (this.preset === undefined) {\n\t\t\tthrow new Error(\n\t\t\t\t'Could not find matching preset: ' +\n\t\t\t\t\tJSON.stringify({\n\t\t\t\t\t\tname: this.name,\n\t\t\t\t\t\ttype: this.fullType,\n\t\t\t\t\t\ttalents: data.talents,\n\t\t\t\t\t}).toString(),\n\t\t\t);\n\t\t}\n\n\t\t// Apply preset defaults.\n\t\tthis.player.applySharedDefaults(eventID);\n\t\tthis.player.setTalentsString(eventID, this.preset.talents.talentsString);\n\t\tthis.player.setGlyphs(eventID, this.preset.talents.glyphs!);\n\t\tthis.player.setConsumes(eventID, this.preset.consumes);\n\t\tthis.player.setSpecOptions(eventID, this.preset.specOptions);\n\t\tthis.player.setProfessions(eventID, [Profession.Engineering, Profession.Jewelcrafting]);\n\n\t\t// Apply settings from report data.\n\t\tthis.player.setName(eventID, data.name);\n\t\tthis.player.setGear(\n\t\t\teventID,\n\t\t\tsimUI.sim.db.lookupEquipmentSpec(\n\t\t\t\tEquipmentSpec.create({\n\t\t\t\t\titems: data.gear.map(gear =>\n\t\t\t\t\t\tItemSpec.create({\n\t\t\t\t\t\t\tid: gear.id,\n\t\t\t\t\t\t\tenchant: gear.permanentEnchant,\n\t\t\t\t\t\t\tgems: gear.gems ? gear.gems.map(gemInfo => gemInfo.id) : [],\n\t\t\t\t\t\t}),\n\t\t\t\t\t),\n\t\t\t\t}),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate static getMatchingPreset(spec: Spec, talents: wclTalents[]): RaidSimPreset<Spec> {\n\t\tconst matchingPresets = playerPresets.filter(preset => preset.spec == spec);\n\t\tlet presetIdx = 0;\n\n\t\tif (matchingPresets && matchingPresets.length > 1) {\n\t\t\tlet distance = 999;\n\t\t\t// Search talents and find the preset that the players talents most closely match.\n\t\t\tmatchingPresets.forEach((preset, i) => {\n\t\t\t\tconst presetTalents = getTalentTreePoints(preset.talents.talentsString);\n\t\t\t\t// Diff the distance to the preset.\n\t\t\t\tconst newDistance = presetTalents.reduce((acc, v, i) => (acc += Math.abs(talents[i]?.guid - presetTalents[i])), 0);\n\n\t\t\t\t// If this is the best distance, assign this preset.\n\t\t\t\tif (newDistance < distance) {\n\t\t\t\t\tpresetIdx = i;\n\t\t\t\t\tdistance = newDistance;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn matchingPresets[presetIdx];\n\t}\n\n\tpublic toUnitReference(): UnitReference {\n\t\treturn UnitReference.create({\n\t\t\ttype: UnitReference_Type.Player,\n\t\t\tindex: this.raidIndex,\n\t\t});\n\t}\n\n\tpublic addPlayerInParty(other: WCLSimPlayer): boolean {\n\t\tif (other != this && !this.playersInParty.includes(other)) {\n\t\t\tthis.playersInParty.push(other);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n\nconst fullTypeToSpec: Record<string, Spec> = {\n\tDeathKnightBlood: Spec.SpecTankDeathknight,\n\tDeathKnightLichborne: Spec.SpecTankDeathknight,\n\tDeathKnightRuneblade: Spec.SpecDeathknight,\n\tDeathKnightBloodDPS: Spec.SpecDeathknight,\n\tDeathKnightFrost: Spec.SpecDeathknight,\n\tDeathKnightUnholy: Spec.SpecDeathknight,\n\tDruidBalance: Spec.SpecBalanceDruid,\n\tDruidFeral: Spec.SpecFeralDruid,\n\tDruidWarden: Spec.SpecFeralTankDruid,\n\tDruidGuardian: Spec.SpecFeralTankDruid,\n\tDruidRestoration: Spec.SpecRestorationDruid,\n\tHunterBeastMastery: Spec.SpecHunter,\n\tHunterSurvival: Spec.SpecHunter,\n\tHunterMarksmanship: Spec.SpecHunter,\n\tMageArcane: Spec.SpecMage,\n\tMageFire: Spec.SpecMage,\n\tMageFrost: Spec.SpecMage,\n\tPaladinHoly: Spec.SpecHolyPaladin,\n\tPaladinJusticar: Spec.SpecProtectionPaladin,\n\tPaladinProtection: Spec.SpecProtectionPaladin,\n\tPaladinRetribution: Spec.SpecRetributionPaladin,\n\tPriestHoly: Spec.SpecHealingPriest,\n\tPriestDiscipline: Spec.SpecHealingPriest,\n\tPriestShadow: Spec.SpecShadowPriest,\n\tPriestSmite: Spec.SpecSmitePriest,\n\tRogueAssassination: Spec.SpecRogue,\n\tRogueCombat: Spec.SpecRogue,\n\tRogueSubtlety: Spec.SpecRogue,\n\tShamanElemental: Spec.SpecElementalShaman,\n\tShamanEnhancement: Spec.SpecEnhancementShaman,\n\tShamanRestoration: Spec.SpecRestorationShaman,\n\tWarlockDestruction: Spec.SpecWarlock,\n\tWarlockAffliction: Spec.SpecWarlock,\n\tWarlockDemonology: Spec.SpecWarlock,\n\tWarriorArms: Spec.SpecWarrior,\n\tWarriorFury: Spec.SpecWarrior,\n\tWarriorChampion: Spec.SpecWarrior,\n\tWarriorWarrior: Spec.SpecWarrior,\n\tWarriorGladiator: Spec.SpecWarrior,\n\tWarriorProtection: Spec.SpecProtectionWarrior,\n};\n\n// Spells which imply a specific Race.\nconst racialSpells: Array<{ id: number; name: string; race: Race }> = [\n\t{ id: 25046, name: 'Arcane Torrent (Energy)', race: Race.RaceBloodElf },\n\t{ id: 28730, name: 'Arcane Torrent (Mana)', race: Race.RaceBloodElf },\n\t{ id: 50613, name: 'Arcane Torrent (Runic Power)', race: Race.RaceBloodElf },\n\t{ id: 26297, name: 'Berserking', race: Race.RaceTroll },\n\t{ id: 20572, name: 'Blood Fury (AP)', race: Race.RaceOrc },\n\t{ id: 33697, name: 'Blood Fury (AP+SP)', race: Race.RaceOrc },\n\t{ id: 33702, name: 'Blood Fury (SP)', race: Race.RaceOrc },\n\t{ id: 20589, name: 'Escape Artist', race: Race.RaceGnome },\n\t{ id: 20594, name: 'Stoneform', race: Race.RaceDwarf },\n\t{ id: 20549, name: 'War Stomp', race: Race.RaceTauren },\n\t{ id: 7744, name: 'Will of the Forsaken', race: Race.RaceUndead },\n\t{ id: 59752, name: 'Will to Survive', race: Race.RaceHuman },\n];\n\n// Spells which imply a specific Profession.\nconst professionSpells: Array<{ id: number; name: string; profession: Profession }> = [\n\t{ id: 55503, name: 'Lifeblood', profession: Profession.Herbalism },\n\t{ id: 50305, name: 'Skinning', profession: Profession.Skinning },\n];\n\nconst externalCDSpells: Array<{ id: number; name: string; class: Class; applyFunc: (player: Player<any>, raidTarget: UnitReference) => SpecOptions<any> }> = [\n\t{\n\t\tid: 29166,\n\t\tname: 'Innervate',\n\t\tclass: Class.ClassDruid,\n\t\tapplyFunc: (player: Player<any>, raidTarget: UnitReference) => {\n\t\t\tconst options = player.getSpecOptions() as SpecOptions<DruidSpecs>;\n\t\t\toptions.innervateTarget = raidTarget;\n\t\t\treturn options;\n\t\t},\n\t},\n\t{\n\t\tid: 10060,\n\t\tname: 'Power Infusion',\n\t\tclass: Class.ClassPriest,\n\t\tapplyFunc: (player: Player<any>, raidTarget: UnitReference) => {\n\t\t\tconst options = player.getSpecOptions() as SpecOptions<PriestSpecs>;\n\t\t\toptions.powerInfusionTarget = raidTarget;\n\t\t\treturn options;\n\t\t},\n\t},\n\t{\n\t\tid: 57933,\n\t\tname: 'Tricks of the Trade',\n\t\tclass: Class.ClassRogue,\n\t\tapplyFunc: (player: Player<any>, raidTarget: UnitReference) => {\n\t\t\tconst options = player.getSpecOptions() as SpecOptions<RogueSpecs>;\n\t\t\toptions.tricksOfTheTradeTarget = raidTarget;\n\t\t\treturn options;\n\t\t},\n\t},\n\t{\n\t\tid: 49016,\n\t\tname: 'Unholy Frenzy',\n\t\tclass: Class.ClassDeathknight,\n\t\tapplyFunc: (player: Player<any>, raidTarget: UnitReference) => {\n\t\t\tconst options = player.getSpecOptions() as SpecOptions<DeathknightSpecs>;\n\t\t\toptions.unholyFrenzyTarget = raidTarget;\n\t\t\treturn options;\n\t\t},\n\t},\n];\n\n// Healing spells which only affect the caster's party.\nconst samePartyHealingSpells: Array<{ id: number; name: string }> = [\n\t{ id: 52042, name: 'Healing Stream Totem' },\n\t{ id: 48076, name: 'Holy Nova' },\n\t{ id: 48445, name: 'Tranquility' },\n\t{ id: 15290, name: 'Vampiric Embrace' },\n];\n\n// Healing spells which only affect a single party, but not necessarily the caster's party.\nconst otherPartyHealingSpells: Array<{ id: number; name: string }> = [{ id: 48072, name: 'Prayer of Healing' }];\n\ninterface wclUrlData {\n\treportID: string;\n\tfightID: string;\n}\n\ninterface wclCastEvent {\n\ttype: 'cast';\n\ttimestamp: number;\n\tsourceID: number;\n\ttargetID: number;\n\tabilityGameID: number;\n\tfight: number;\n}\n\ninterface wclHealEvent {\n\ttype: 'heal';\n\ttimestamp: number;\n\tsourceID: number;\n\ttargetID: number;\n\tabilityGameID: number;\n\tfight: number;\n\tamount: number;\n}\n\ninterface wclCombatantInfoEvent {\n\ttype: 'combatantinfo';\n\tsourceID: number;\n\tauras: {\n\t\tsource: number;\n\t\tability: number;\n\t\tname: string;\n\t}[];\n}\n\ninterface wclRateLimitData {\n\tlimitPerHour: number;\n\tpointsSpentThisHour: number;\n\tpointsResetIn: number;\n}\n\n// Typed interface for WCL talents\ninterface wclTalents {\n\tname: string;\n\tguid: number;\n\ttype: number;\n\tabilityIcon: string;\n}\n\n// Typed interface for WCL Gems\ninterface wclGems {\n\tid: number;\n\titemLevel: number;\n\ticon: string;\n}\n\n// Typed interface for WCL Gear\ninterface wclGear {\n\tid: number;\n\tslot: number;\n\tquality: number;\n\ticon: string;\n\tname: string;\n\titemLevel: number;\n\tpermanentEnchant: number;\n\tpermanentEnchantName: string;\n\ttemporaryEnchant: number;\n\tgems?: wclGems[];\n}\n\n// Typed interface for WCL Player Data\ninterface wclPlayer {\n\tname: string;\n\tid: number;\n\tguid?: number;\n\ttype: string; // Paladin, Mage, etc.\n\ticon: string; // Paladin-Justicar, Mage-Fire, etc.\n\titemLevel?: number;\n\ttotal?: number;\n\tactiveTime?: number;\n\tactiveTimeReduced?: number;\n\tabilities?: unknown[]; // Don't care about abilities.\n\tdamageAbilities?: unknown[];\n\ttargets?: unknown[];\n\ttalents: wclTalents[];\n\tgear: wclGear[];\n}\n\ninterface _wclAura {\n\tname: string;\n\tid: number;\n\tguid: number;\n\ttype: string;\n\ticon: string;\n\ttotalUptime: number;\n\ttotalUses: number;\n\tbands: {\n\t\tstartTime: number;\n\t\tendTime: number;\n\t}[];\n}\n","import { Tooltip } from 'bootstrap';\n\nimport { BaseModal } from '../core/components/base_modal.js';\nimport { Component } from '../core/components/component.js';\nimport { EnumPicker } from '../core/components/enum_picker.js';\nimport { MAX_PARTY_SIZE , Party } from '../core/party.js';\nimport { Player } from '../core/player.js';\nimport { Player as PlayerProto } from '../core/proto/api.js';\nimport { Class , Faction , Glyphs,Profession , Spec  } from '../core/proto/common.js';\nimport { BalanceDruid_Options as BalanceDruidOptions } from '../core/proto/druid.js';\nimport { Mage_Options as MageOptions } from '../core/proto/mage.js';\nimport { SmitePriest_Options as SmitePriestOptions } from '../core/proto/priest.js';\nimport { cssClassForClass, isTankSpec , newUnitReference,playerToSpec , specToClass  } from '../core/proto_utils/utils.js';\nimport { Raid } from '../core/raid.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\nimport { formatDeltaTextElem , getEnumValues } from '../core/utils.js';\nimport { playerPresets, specSimFactories } from './presets.js';\nimport { RaidSimUI } from './raid_sim_ui.js';\n\nconst NEW_PLAYER = -1;\n\nenum DragType {\n\tNone,\n\tNew,\n\tMove,\n\tSwap,\n\tCopy,\n}\n\nexport class RaidPicker extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\treadonly raid: Raid;\n\treadonly partyPickers: Array<PartyPicker>;\n\treadonly newPlayerPicker: NewPlayerPicker;\n\n\t// Hold data about the player being dragged while the drag is happening.\n\tcurrentDragPlayer: Player<any> | null = null;\n\tcurrentDragPlayerFromIndex: number = NEW_PLAYER;\n\tcurrentDragType: DragType = DragType.New;\n\n\t// Hold data about the party being dragged while the drag is happening.\n\tcurrentDragParty: PartyPicker | null = null;\n\n\tconstructor(parent: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parent, 'raid-picker-root');\n\t\tthis.raidSimUI = raidSimUI;\n\t\tthis.raid = raidSimUI.sim.raid;\n\n\t\tconst raidControls = document.createElement('div');\n\t\traidControls.classList.add('raid-controls');\n\t\tthis.rootElem.appendChild(raidControls);\n\n\t\tthis.newPlayerPicker = new NewPlayerPicker(this.rootElem, this);\n\n\t\tconst _activePartiesSelector = new EnumPicker<Raid>(raidControls, this.raidSimUI.sim.raid, {\n\t\t\tlabel: 'Raid Size',\n\t\t\tlabelTooltip: 'Number of players participating in the sim.',\n\t\t\tvalues: [\n\t\t\t\t{ name: '5', value: 1 },\n\t\t\t\t{ name: '10', value: 2 },\n\t\t\t\t{ name: '25', value: 5 },\n\t\t\t\t{ name: '40', value: 8 },\n\t\t\t],\n\t\t\tchangedEvent: (raid: Raid) => raid.numActivePartiesChangeEmitter,\n\t\t\tgetValue: (raid: Raid) => raid.getNumActiveParties(),\n\t\t\tsetValue: (eventID: EventID, raid: Raid, newValue: number) => {\n\t\t\t\traid.setNumActiveParties(eventID, newValue);\n\t\t\t},\n\t\t});\n\n\t\tconst _factionSelector = new EnumPicker<NewPlayerPicker>(raidControls, this.newPlayerPicker, {\n\t\t\tlabel: 'Default Faction',\n\t\t\tlabelTooltip: 'Default faction for newly-created players.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Alliance', value: Faction.Alliance },\n\t\t\t\t{ name: 'Horde', value: Faction.Horde },\n\t\t\t],\n\t\t\tchangedEvent: (_picker: NewPlayerPicker) => this.raid.sim.factionChangeEmitter,\n\t\t\tgetValue: (_picker: NewPlayerPicker) => this.raid.sim.getFaction(),\n\t\t\tsetValue: (eventID: EventID, picker: NewPlayerPicker, newValue: Faction) => {\n\t\t\t\tthis.raid.sim.setFaction(eventID, newValue);\n\t\t\t},\n\t\t});\n\n\t\tconst partiesContainer = document.createElement('div');\n\t\tpartiesContainer.classList.add('parties-container');\n\t\tthis.rootElem.appendChild(partiesContainer);\n\n\t\tthis.partyPickers = this.raid.getParties().map((party, i) => new PartyPicker(partiesContainer, party, i, this));\n\n\t\tconst updateActiveParties = () => {\n\t\t\tthis.partyPickers.forEach(partyPicker => {\n\t\t\t\tif (partyPicker.index < this.raidSimUI.sim.raid.getNumActiveParties()) {\n\t\t\t\t\tpartyPicker.rootElem.classList.add('active');\n\t\t\t\t} else {\n\t\t\t\t\tpartyPicker.rootElem.classList.remove('active');\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\tthis.raidSimUI.sim.raid.numActivePartiesChangeEmitter.on(updateActiveParties);\n\t\tupdateActiveParties();\n\n\t\tthis.rootElem.ondragend = _event => {\n\t\t\t// Uncomment to remove player when dropped 'off' the raid.\n\t\t\t//if (this.currentDragPlayerFromIndex != NEW_PLAYER) {\n\t\t\t//\tconst playerPicker = this.getPlayerPicker(this.currentDragPlayerFromIndex);\n\t\t\t//\tplayerPicker.setPlayer(null, null, DragType.None);\n\t\t\t//}\n\n\t\t\tthis.clearDragPlayer();\n\t\t\tthis.clearDragParty();\n\t\t};\n\t}\n\n\tgetCurrentFaction(): Faction {\n\t\treturn this.raid.sim.getFaction();\n\t}\n\n\tgetCurrentExpansion(): number {\n\t\treturn this.raid.sim.getExpansion();\n\t}\n\n\tgetPlayerPicker(raidIndex: number): PlayerPicker {\n\t\treturn this.partyPickers[Math.floor(raidIndex / MAX_PARTY_SIZE)].playerPickers[raidIndex % MAX_PARTY_SIZE];\n\t}\n\n\tgetPlayerPickers(): Array<PlayerPicker> {\n\t\treturn [...new Array(25).keys()].map(i => this.getPlayerPicker(i));\n\t}\n\n\tsetDragPlayer(player: Player<any>, fromIndex: number, type: DragType) {\n\t\tthis.clearDragPlayer();\n\n\t\tthis.currentDragPlayer = player;\n\t\tthis.currentDragPlayerFromIndex = fromIndex;\n\t\tthis.currentDragType = type;\n\n\t\tif (fromIndex != NEW_PLAYER) {\n\t\t\tconst playerPicker = this.getPlayerPicker(fromIndex);\n\t\t\tplayerPicker.rootElem.classList.add('dragfrom');\n\t\t}\n\t}\n\n\tclearDragPlayer() {\n\t\tif (this.currentDragPlayerFromIndex != NEW_PLAYER) {\n\t\t\tconst playerPicker = this.getPlayerPicker(this.currentDragPlayerFromIndex);\n\t\t\tplayerPicker.rootElem.classList.remove('dragfrom');\n\t\t}\n\n\t\tthis.currentDragPlayer = null;\n\t\tthis.currentDragPlayerFromIndex = NEW_PLAYER;\n\t\tthis.currentDragType = DragType.New;\n\t}\n\n\tsetDragParty(party: PartyPicker) {\n\t\tthis.currentDragParty = party;\n\t\tparty.rootElem.classList.add('dragfrom');\n\t}\n\tclearDragParty() {\n\t\tif (this.currentDragParty) {\n\t\t\tthis.currentDragParty.rootElem.classList.remove('dragfrom');\n\t\t\tthis.currentDragParty = null;\n\t\t}\n\t}\n}\n\nexport class PartyPicker extends Component {\n\treadonly party: Party;\n\treadonly index: number;\n\treadonly raidPicker: RaidPicker;\n\treadonly playerPickers: Array<PlayerPicker>;\n\n\tconstructor(parent: HTMLElement, party: Party, index: number, raidPicker: RaidPicker) {\n\t\tsuper(parent, 'party-picker-root');\n\t\tthis.party = party;\n\t\tthis.index = index;\n\t\tthis.raidPicker = raidPicker;\n\n\t\tthis.rootElem.setAttribute('draggable', 'true');\n\t\tthis.rootElem.innerHTML = `\n\t\t\t<div class=\"party-header\">\n\t\t\t\t<label class=\"party-label form-label\">Group ${index + 1}</label>\n\t\t\t\t<div class=\"party-results\">\n\t\t\t\t\t<span class=\"party-results-dps\"></span>\n\t\t\t\t\t<span class=\"party-results-reference-delta\"></span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"players-container\">\n\t\t\t</div>\n\t\t`;\n\n\t\tconst playersContainer = this.rootElem.getElementsByClassName('players-container')[0] as HTMLDivElement;\n\t\tthis.playerPickers = [...Array(MAX_PARTY_SIZE).keys()].map(i => new PlayerPicker(playersContainer, this, i));\n\n\t\tconst dpsResultElem = this.rootElem.getElementsByClassName('party-results-dps')[0] as HTMLElement;\n\t\tconst referenceDeltaElem = this.rootElem.getElementsByClassName('party-results-reference-delta')[0] as HTMLElement;\n\n\t\tthis.raidPicker.raidSimUI.referenceChangeEmitter.on(() => {\n\t\t\tconst currentData = this.raidPicker.raidSimUI.getCurrentData();\n\t\t\tconst referenceData = this.raidPicker.raidSimUI.getReferenceData();\n\n\t\t\tconst partyDps = currentData?.simResult.raidMetrics.parties[this.index]?.dps.avg || 0;\n\t\t\tconst referenceDps = referenceData?.simResult.raidMetrics.parties[this.index]?.dps.avg || 0;\n\n\t\t\tif (partyDps == 0 && referenceDps == 0) {\n\t\t\t\tdpsResultElem.textContent = '';\n\t\t\t\treferenceDeltaElem.textContent = '';\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tdpsResultElem.textContent = `${partyDps.toFixed(1)} DPS`;\n\n\t\t\tif (!referenceData) {\n\t\t\t\treferenceDeltaElem.textContent = '';\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tformatDeltaTextElem(referenceDeltaElem, referenceDps, partyDps, 1);\n\t\t});\n\n\t\tthis.rootElem.ondragstart = event => {\n\t\t\tif (event.target == this.rootElem) {\n\t\t\t\tevent.dataTransfer!.dropEffect = 'move';\n\t\t\t\tevent.dataTransfer!.effectAllowed = 'all';\n\t\t\t\tthis.raidPicker.setDragParty(this);\n\t\t\t}\n\t\t};\n\n\t\tlet dragEnterCounter = 0;\n\t\tthis.rootElem.ondragenter = event => {\n\t\t\tevent.preventDefault();\n\t\t\tif (!this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdragEnterCounter++;\n\t\t\tthis.rootElem.classList.add('dragto');\n\t\t};\n\t\tthis.rootElem.ondragleave = event => {\n\t\t\tevent.preventDefault();\n\t\t\tif (!this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdragEnterCounter--;\n\t\t\tif (dragEnterCounter <= 0) {\n\t\t\t\tthis.rootElem.classList.remove('dragto');\n\t\t\t}\n\t\t};\n\t\tthis.rootElem.ondragover = event => {\n\t\t\tevent.preventDefault();\n\t\t};\n\t\tthis.rootElem.ondrop = event => {\n\t\t\tif (!this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tevent.preventDefault();\n\t\t\tdragEnterCounter = 0;\n\t\t\tthis.rootElem.classList.remove('dragto');\n\n\t\t\tconst eventID = TypedEvent.nextEventID();\n\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\tconst srcPartyPicker = this.raidPicker.currentDragParty!;\n\n\t\t\t\tfor (let i = 0; i < MAX_PARTY_SIZE; i++) {\n\t\t\t\t\tconst srcPlayerPicker = srcPartyPicker.playerPickers[i]!;\n\t\t\t\t\tconst dstPlayerPicker = this.playerPickers[i]!;\n\n\t\t\t\t\tconst srcPlayer = srcPlayerPicker.player;\n\t\t\t\t\tconst dstPlayer = dstPlayerPicker.player;\n\n\t\t\t\t\tsrcPlayerPicker.setPlayer(eventID, dstPlayer, DragType.Swap);\n\t\t\t\t\tdstPlayerPicker.setPlayer(eventID, srcPlayer, DragType.Swap);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.raidPicker.clearDragParty();\n\t\t};\n\t}\n}\n\nexport class PlayerPicker extends Component {\n\t// Index of this player within its party (0-4).\n\treadonly index: number;\n\n\t// Index of this player within the whole raid (0-24).\n\treadonly raidIndex: number;\n\n\tplayer: Player<any> | null;\n\n\treadonly partyPicker: PartyPicker;\n\treadonly raidPicker: RaidPicker;\n\n\tprivate labelElem: HTMLElement | null;\n\tprivate iconElem: HTMLImageElement | null;\n\tprivate nameElem: HTMLInputElement | null;\n\tprivate resultsElem: HTMLElement | null;\n\tprivate dpsResultElem: HTMLElement | null;\n\tprivate referenceDeltaElem: HTMLElement | null;\n\n\tconstructor(parent: HTMLElement, partyPicker: PartyPicker, index: number) {\n\t\tsuper(parent, 'player-picker-root');\n\t\tthis.index = index;\n\t\tthis.raidIndex = partyPicker.index * MAX_PARTY_SIZE + index;\n\t\tthis.player = null;\n\t\tthis.partyPicker = partyPicker;\n\t\tthis.raidPicker = partyPicker.raidPicker;\n\n\t\tthis.labelElem = null;\n\t\tthis.iconElem = null;\n\t\tthis.nameElem = null;\n\t\tthis.resultsElem = null;\n\t\tthis.dpsResultElem = null;\n\t\tthis.referenceDeltaElem = null;\n\n\t\tthis.rootElem.classList.add('player');\n\n\t\tthis.partyPicker.party.compChangeEmitter.on(eventID => {\n\t\t\tconst newPlayer = this.partyPicker.party.getPlayer(this.index);\n\t\t\tif (newPlayer != this.player)\n\t\t\t\tthis.setPlayer(eventID, newPlayer, DragType.None);\n\t\t});\n\n\t\tthis.raidPicker.raidSimUI.referenceChangeEmitter.on(() => {\n\t\t\tconst currentData = this.raidPicker.raidSimUI.getCurrentData();\n\t\t\tconst referenceData = this.raidPicker.raidSimUI.getReferenceData();\n\n\t\t\tconst playerDps = currentData?.simResult.getPlayerWithRaidIndex(this.raidIndex)?.dps.avg || 0;\n\t\t\tconst referenceDps = referenceData?.simResult.getPlayerWithRaidIndex(this.raidIndex)?.dps.avg || 0;\n\n\t\t\tif (this.player) {\n\t\t\t\tthis.resultsElem?.classList.remove('hide');\n\t\t\t\t(this.dpsResultElem as HTMLElement).textContent = `${playerDps.toFixed(1)} DPS`;\n\n\t\t\t\tif (referenceData)\n\t\t\t\t\tformatDeltaTextElem(this.referenceDeltaElem as HTMLElement, referenceDps, playerDps, 1);\n\t\t\t}\n\t\t});\n\n\t\tlet dragEnterCounter = 0;\n\t\tthis.rootElem.ondragenter = event => {\n\t\t\tevent.preventDefault();\n\t\t\tif (this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdragEnterCounter++;\n\t\t\tthis.rootElem.classList.add('dragto');\n\t\t};\n\t\tthis.rootElem.ondragleave = event => {\n\t\t\tevent.preventDefault();\n\t\t\tif (this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdragEnterCounter--;\n\t\t\tif (dragEnterCounter <= 0) {\n\t\t\t\tthis.rootElem.classList.remove('dragto');\n\t\t\t}\n\t\t};\n\t\tthis.rootElem.ondragover = event => event.preventDefault();\n\t\tthis.rootElem.ondrop = event => {\n\t\t\tif (this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst dropData = event.dataTransfer!.getData(\"text/plain\");\n\n\t\t\tevent.preventDefault();\n\t\t\tdragEnterCounter = 0;\n\t\t\tthis.rootElem.classList.remove('dragto');\n\n\t\t\tconst eventID = TypedEvent.nextEventID();\n\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\tif (this.raidPicker.currentDragPlayer == null && dropData.length == 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (this.raidPicker.currentDragPlayerFromIndex == this.raidIndex) {\n\t\t\t\t\tthis.raidPicker.clearDragPlayer();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst dragType = this.raidPicker.currentDragType;\n\n\t\t\t\tif (this.raidPicker.currentDragPlayerFromIndex != NEW_PLAYER) {\n\t\t\t\t\tconst fromPlayerPicker = this.raidPicker.getPlayerPicker(this.raidPicker.currentDragPlayerFromIndex);\n\t\t\t\t\tif (dragType == DragType.Swap) {\n\t\t\t\t\t\tfromPlayerPicker.setPlayer(eventID, this.player, dragType);\n\t\t\t\t\t} else if (dragType == DragType.Move) {\n\t\t\t\t\t\tfromPlayerPicker.setPlayer(eventID, null, dragType);\n\t\t\t\t\t}\n\t\t\t\t} else if (this.raidPicker.currentDragPlayer == null) {\n\t\t\t\t\t// This would be a copy from another window.\n\t\t\t\t\tconst binary = atob(dropData);\n\t\t\t\t\tconst bytes = new Uint8Array(binary.length);\n\t\t\t\t\tfor (let i = 0; i < bytes.length; i++) {\n\t\t\t\t\t\tbytes[i] = binary.charCodeAt(i);\n\t\t\t\t\t}\n\t\t\t\t\tconst playerProto = PlayerProto.fromBinary(bytes);\n\n\t\t\t\t\tconst localPlayer = new Player(playerToSpec(playerProto), this.raidPicker.raidSimUI.sim);\n\t\t\t\t\tlocalPlayer.fromProto(eventID, playerProto);\n\t\t\t\t\tthis.raidPicker.currentDragPlayer = localPlayer;\n\t\t\t\t}\n\n\t\t\t\tif (dragType == DragType.Copy) {\n\t\t\t\t\tthis.setPlayer(eventID, this.raidPicker.currentDragPlayer!.clone(eventID), dragType);\n\t\t\t\t} else {\n\t\t\t\t\tthis.setPlayer(eventID, this.raidPicker.currentDragPlayer, dragType);\n\t\t\t\t}\n\n\t\t\t\tthis.raidPicker.clearDragPlayer();\n\t\t\t});\n\t\t};\n\n\t\tthis.update();\n\t}\n\n\tsetPlayer(eventID: EventID, newPlayer: Player<any> | null, dragType: DragType) {\n\t\tif (newPlayer == this.player) {\n\t\t\treturn;\n\t\t}\n\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tthis.player = newPlayer;\n\t\t\tif (newPlayer) {\n\t\t\t\tthis.partyPicker.party.setPlayer(eventID, this.index, newPlayer);\n\n\t\t\t\tif (dragType == DragType.New) {\n\t\t\t\t\tapplyNewPlayerAssignments(eventID, newPlayer, this.raidPicker.raid);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.partyPicker.party.setPlayer(eventID, this.index, newPlayer);\n\t\t\t\tthis.partyPicker.party.compChangeEmitter.emit(eventID);\n\t\t\t}\n\t\t});\n\n\t\tthis.update();\n\t}\n\n\tprivate update() {\n\t\tif (this.player == null) {\n\t\t\tthis.rootElem.className = 'player-picker-root player';\n\t\t\tthis.rootElem.innerHTML = '';\n\n\t\t\tthis.labelElem = null;\n\t\t\tthis.iconElem = null;\n\t\t\tthis.nameElem = null;\n\t\t\tthis.resultsElem = null;\n\t\t\tthis.dpsResultElem = null;\n\t\t\tthis.referenceDeltaElem = null;\n\t\t} else {\n\t\t\tconst classCssClass = cssClassForClass(this.player.getClass());\n\n\t\t\tthis.rootElem.className = `player-picker-root player bg-${classCssClass}-dampened`;\n\t\t\tthis.rootElem.innerHTML = `\n\t\t\t\t<div class=\"player-label\">\n\t\t\t\t\t<img class=\"player-icon\" src=\"${this.player.getSpecIcon()}\" draggable=\"true\" />\n\t\t\t\t\t<div class=\"player-details\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclass=\"player-name text-${classCssClass}\"\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tvalue=\"${this.player.getName()}\"\n\t\t\t\t\t\t\tspellcheck=\"false\"\n\t\t\t\t\t\t\tmaxlength=\"15\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div class=\"player-results hide\">\n\t\t\t\t\t\t\t<span class=\"player-results-dps\"></span>\n\t\t\t\t\t\t\t<span class=\"player-results-reference-delta\"></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"player-options\">\n\t\t\t\t\t<a\n\t\t\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\t\t\tclass=\"player-edit\"\n\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\tdata-bs-toggle=\"tooltip\"\n\t\t\t\t\t\tdata-bs-title=\"Click to Edit\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class=\"fa fa-edit fa-lg\"></i>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a\n\t\t\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\t\t\tclass=\"player-copy link-warning\"\n\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\tdraggable=\"true\"\n\t\t\t\t\t\tdata-bs-toggle=\"tooltip\"\n\t\t\t\t\t\tdata-bs-title=\"Drag to Copy\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class=\"fa fa-copy fa-lg\"></i>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a\n\t\t\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\t\t\tclass=\"player-delete link-danger\"\n\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\tdata-bs-toggle=\"tooltip\"\n\t\t\t\t\t\tdata-bs-title=\"Click to Delete\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class=\"fa fa-times fa-lg\"></i>\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t`;\n\n\t\t\tthis.labelElem = this.rootElem.querySelector('.player-label') as HTMLElement;\n\t\t\tthis.iconElem = this.rootElem.querySelector('.player-icon') as HTMLImageElement;\n\t\t\tthis.nameElem = this.rootElem.querySelector('.player-name') as HTMLInputElement;\n\t\t\tthis.resultsElem = this.rootElem.querySelector('.player-results') as HTMLElement;\n\t\t\tthis.dpsResultElem = this.rootElem.querySelector('.player-results-dps') as HTMLElement;\n\t\t\tthis.referenceDeltaElem = this.rootElem.querySelector('.player-results-reference-delta') as HTMLElement;\n\n\t\t\tthis.bindPlayerEvents();\n\t\t}\n\t}\n\n\tprivate bindPlayerEvents() {\n\t\tthis.nameElem?.addEventListener('input', _event => {\n\t\t\tthis.player?.setName(TypedEvent.nextEventID(), this.nameElem?.value || '');\n\t\t});\n\n\t\tthis.nameElem?.addEventListener('mousedown', _event => {\n\t\t\tthis.partyPicker.rootElem.setAttribute('draggable', 'false')\n\t\t})\n\n\t\tthis.nameElem?.addEventListener('mouseup', _event => {\n\t\t\tthis.partyPicker.rootElem.setAttribute('draggable', 'true')\n\t\t})\n\n\t\tconst emptyName = 'Unnamed';\n\t\tthis.nameElem?.addEventListener('focusout', _event => {\n\t\t\tif (this.nameElem && !this.nameElem.value) {\n\t\t\t\tthis.nameElem.value = emptyName;\n\t\t\t\tthis.player?.setName(TypedEvent.nextEventID(), emptyName);\n\t\t\t}\n\t\t});\n\n\t\tconst dragStart = (event: DragEvent, type: DragType) => {\n\t\t\tif (this.player == null) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tevent.dataTransfer!.dropEffect = 'move';\n\t\t\tevent.dataTransfer!.effectAllowed = 'all';\n\n\t\t\tif (this.player) {\n\t\t\t\tconst playerDataProto = this.player.toProto(true);\n\t\t\t\tevent.dataTransfer!.setData(\"text/plain\", btoa(String.fromCharCode(...PlayerProto.toBinary(playerDataProto))));\n\t\t\t}\n\n\t\t\tthis.raidPicker.setDragPlayer(this.player, this.raidIndex, type);\n\t\t};\n\n\t\tconst editElem = this.rootElem.querySelector('.player-edit') as HTMLElement;\n\t\tconst copyElem = this.rootElem.querySelector('.player-copy') as HTMLElement;\n\t\tconst deleteElem = this.rootElem.querySelector('.player-delete') as HTMLElement;\n\n\t\tconst _editTooltip = Tooltip.getOrCreateInstance(editElem);\n\t\tconst _copyTooltip = Tooltip.getOrCreateInstance(copyElem);\n\t\tconst deleteTooltip = Tooltip.getOrCreateInstance(deleteElem);\n\n\t\t(this.iconElem as HTMLElement).ondragstart = event => {\n\t\t\tevent.dataTransfer!.setDragImage(this.rootElem, 20, 20);\n\t\t\tdragStart(event, DragType.Swap)\n\t\t}\n\t\teditElem.onclick = _event => {\n\t\t\tnew PlayerEditorModal(this.player as Player<any>);\n\t\t};\n\t\tcopyElem.ondragstart = event => {\n\t\t\tevent.dataTransfer!.setDragImage(this.rootElem, 20, 20);\n\t\t\tdragStart(event, DragType.Copy);\n\t\t}\n\t\tdeleteElem.onclick = _event => {\n\t\t\tdeleteTooltip.hide();\n\t\t\tthis.setPlayer(TypedEvent.nextEventID(), null, DragType.None);\n\t\t}\n\t}\n}\n\nclass PlayerEditorModal extends BaseModal {\n\tconstructor(player: Player<any>) {\n\t\tsuper(document.body, 'player-editor-modal', {\n\t\t\tcloseButton: { fixed: true },\n\t\t\theader: false\n\t\t});\n\n\t\tthis.rootElem.id = 'playerEditorModal';\n\t\tthis.body.insertAdjacentHTML('beforeend', `\n\t\t\t<div class=\"player-editor within-raid-sim\"></div>\n\t\t`);\n\n\t\tconst editorRoot = this.rootElem.getElementsByClassName('player-editor')[0] as HTMLElement;\n\t\tconst _individualSim = specSimFactories[player.spec]!(editorRoot, player);\n\t}\n}\n\nclass NewPlayerPicker extends Component {\n\treadonly raidPicker: RaidPicker;\n\n\tconstructor(parent: HTMLElement, raidPicker: RaidPicker) {\n\t\tsuper(parent, 'new-player-picker-root');\n\t\tthis.raidPicker = raidPicker;\n\n\t\tgetEnumValues(Class).forEach(wowClass => {\n\t\t\tif (wowClass == Class.ClassUnknown) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst matchingPresets = playerPresets.filter(preset => specToClass[preset.spec] == wowClass);\n\t\t\tif (matchingPresets.length == 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst classPresetsContainer = document.createElement('div');\n\t\t\tclassPresetsContainer.classList.add('class-presets-container', `bg-${cssClassForClass(wowClass as Class)}-dampened`);\n\t\t\tthis.rootElem.appendChild(classPresetsContainer);\n\n\t\t\tmatchingPresets.forEach(matchingPreset => {\n\t\t\t\tconst presetElemFragment = document.createElement('fragment');\n\t\t\t\tpresetElemFragment.innerHTML = `\n\t\t\t\t\t<a\n\t\t\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\tdraggable=\"true\"\n\t\t\t\t\t\tdata-bs-toggle=\"tooltip\"\n\t\t\t\t\t\tdata-bs-title=\"${matchingPreset.tooltip}\"\n\t\t\t\t\t\tdata-bs-html=\"true\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<img class=\"preset-picker-icon player-icon\" src=\"${matchingPreset.iconUrl}\"/>\n\t\t\t\t\t</a>\n\t\t\t\t`\n\t\t\t\tconst presetElem = presetElemFragment.children[0] as HTMLElement;\n\t\t\t\tclassPresetsContainer.appendChild(presetElem);\n\n\t\t\t\tTooltip.getOrCreateInstance(presetElem);\n\n\t\t\t\tpresetElem.ondragstart = event => {\n\t\t\t\t\tconst eventID = TypedEvent.nextEventID();\n\t\t\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\t\t\tconst dragImage = new Image();\n\t\t\t\t\t\tdragImage.src = matchingPreset.iconUrl;\n\t\t\t\t\t\tevent.dataTransfer!.setDragImage(dragImage, 30, 30);\n\t\t\t\t\t\tevent.dataTransfer!.setData(\"text/plain\", \"\");\n\t\t\t\t\t\tevent.dataTransfer!.dropEffect = 'copy';\n\n\t\t\t\t\t\tconst newPlayer = new Player(matchingPreset.spec, this.raidPicker.raid.sim);\n\t\t\t\t\t\tnewPlayer.applySharedDefaults(eventID);\n\t\t\t\t\t\tnewPlayer.setRace(eventID, matchingPreset.defaultFactionRaces[this.raidPicker.getCurrentFaction()]);\n\t\t\t\t\t\tnewPlayer.setTalentsString(eventID, matchingPreset.talents.talentsString);\n\t\t\t\t\t\tnewPlayer.setGlyphs(eventID, matchingPreset.talents.glyphs || Glyphs.create());\n\t\t\t\t\t\tnewPlayer.setSpecOptions(eventID, matchingPreset.specOptions);\n\t\t\t\t\t\tnewPlayer.setConsumes(eventID, matchingPreset.consumes);\n\t\t\t\t\t\tnewPlayer.setName(eventID, matchingPreset.defaultName);\n\t\t\t\t\t\tnewPlayer.setProfession1(eventID, matchingPreset.otherDefaults?.profession1 || Profession.Engineering);\n\t\t\t\t\t\tnewPlayer.setProfession2(eventID, matchingPreset.otherDefaults?.profession2 || Profession.Jewelcrafting);\n\t\t\t\t\t\tnewPlayer.setDistanceFromTarget(eventID, matchingPreset.otherDefaults?.distanceFromTarget || 0);\n\n\t\t\t\t\t\t// Need to wait because the gear might not be loaded yet.\n\t\t\t\t\t\tthis.raidPicker.raid.sim.waitForInit().then(() => {\n\t\t\t\t\t\t\tconst gearSet = matchingPreset.defaultGear[this.raidPicker.getCurrentFaction()][1];\n\t\t\t\t\t\t\tnewPlayer.setGear(eventID, this.raidPicker.raid.sim.db.lookupEquipmentSpec(gearSet));\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tthis.raidPicker.setDragPlayer(newPlayer, NEW_PLAYER, DragType.New);\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t});\n\t\t});\n\t}\n}\n\nfunction applyNewPlayerAssignments(eventID: EventID, newPlayer: Player<any>, raid: Raid) {\n\tif (isTankSpec(newPlayer.spec)) {\n\t\tconst tanks = raid.getTanks();\n\t\tconst emptyIdx = tanks.findIndex(tank => raid.getPlayerFromUnitReference(tank) == null);\n\t\tif (emptyIdx == -1) {\n\t\t\tif (tanks.length < 3) {\n\t\t\t\traid.setTanks(eventID, tanks.concat([newPlayer.makeUnitReference()]));\n\t\t\t}\n\t\t} else {\n\t\t\ttanks[emptyIdx] = newPlayer.makeUnitReference();\n\t\t\traid.setTanks(eventID, tanks);\n\t\t}\n\t}\n\n\t// Spec-specific assignments. For most cases, default to buffing self.\n\tif (newPlayer.spec == Spec.SpecBalanceDruid) {\n\t\tconst newOptions = newPlayer.getSpecOptions() as BalanceDruidOptions;\n\t\tnewOptions.innervateTarget = newUnitReference(newPlayer.getRaidIndex());\n\t\tnewPlayer.setSpecOptions(eventID, newOptions);\n\t} else if (newPlayer.spec == Spec.SpecSmitePriest) {\n\t\tconst newOptions = newPlayer.getSpecOptions() as SmitePriestOptions;\n\t\tnewOptions.powerInfusionTarget = newUnitReference(newPlayer.getRaidIndex());\n\t\tnewPlayer.setSpecOptions(eventID, newOptions);\n\t} else if (newPlayer.spec == Spec.SpecMage) {\n\t\tconst newOptions = newPlayer.getSpecOptions() as MageOptions;\n\t\tnewOptions.focusMagicTarget = newUnitReference(newPlayer.getRaidIndex());\n\t\tnewPlayer.setSpecOptions(eventID, newOptions);\n\t}\n}\n","import { Tooltip } from 'bootstrap';\n\nimport { Component } from '../core/components/component.js';\nimport { Player } from \"../core/player.js\";\nimport {\n\tClass,\n\tRaidBuffs,\n\tSpec,\n} from '../core/proto/common.js';\nimport { Hunter_Options_PetType as HunterPetType } from '../core/proto/hunter.js';\nimport { PaladinAura } from '../core/proto/paladin.js';\nimport { AirTotem, EarthTotem, FireTotem, WaterTotem } from '../core/proto/shaman.js';\nimport { Warlock_Options_Summon as WarlockSummon } from '../core/proto/warlock.js';\nimport { WarriorShout } from '../core/proto/warrior.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\nimport {\n\tClassSpecs,\n\tisHealingSpec,\n\tisMeleeDpsSpec,\n\tisRangedDpsSpec,\n\tisTankSpec,\n\tSpecTalents,\n\tspecToClass,\n\ttextCssClassForClass,\n} from '../core/proto_utils/utils.js';\nimport { Raid } from \"../core/raid.js\";\nimport { sum } from '../core/utils.js';\nimport { RaidSimUI } from './raid_sim_ui.js';\n\ninterface RaidStatsOptions {\n\tsections: Array<RaidStatsSectionOptions>,\n}\n\ninterface RaidStatsSectionOptions {\n\tlabel: string,\n\tcategories: Array<RaidStatsCategoryOptions>,\n}\n\ninterface RaidStatsCategoryOptions {\n\tlabel: string,\n\teffects: Array<RaidStatsEffectOptions>,\n}\n\ntype PlayerProvider = { class?: Class, condition: (player: Player<any>) => boolean };\ntype RaidProvider = (raid: Raid) => boolean;\n\ninterface RaidStatsEffectOptions {\n\tlabel: string,\n\tactionId?: ActionId,\n\tplayerData?: PlayerProvider,\n\traidData?: RaidProvider,\n}\n\nexport class RaidStats extends Component {\n\tprivate readonly categories: Array<RaidStatsCategory>;\n\n\tconstructor(parent: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parent, 'raid-stats');\n\n\t\tconst categories: Array<RaidStatsCategory> = [];\n\t\tRAID_STATS_OPTIONS.sections.forEach(section => {\n\t\t\tconst sectionElem = document.createElement('div');\n\t\t\tsectionElem.classList.add('raid-stats-section');\n\t\t\tthis.rootElem.appendChild(sectionElem);\n\t\t\tsectionElem.innerHTML = `\n\t\t\t\t<div class=\"raid-stats-section-header\">\n\t\t\t\t\t<label class=\"raid-stats-section-label form-label\">${section.label}</label>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"raid-stats-section-content\"></div>\n\t\t\t`;\n\t\t\tconst contentElem = sectionElem.getElementsByClassName('raid-stats-section-content')[0] as HTMLDivElement;\n\n\t\t\tsection.categories.forEach(categoryOptions => {\n\t\t\t\tcategories.push(new RaidStatsCategory(contentElem, raidSimUI, categoryOptions));\n\t\t\t});\n\t\t});\n\t\tthis.categories = categories;\n\n\t\traidSimUI.changeEmitter.on(eventID => this.categories.forEach(c => c.update()));\n\t}\n}\n\nclass RaidStatsCategory extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\tprivate readonly options: RaidStatsCategoryOptions;\n\tprivate readonly effects: Array<RaidStatsEffect>;\n\tprivate readonly counterElem: HTMLElement;\n\tprivate readonly tooltipElem: HTMLElement;\n\n\tconstructor(parent: HTMLElement, raidSimUI: RaidSimUI, options: RaidStatsCategoryOptions) {\n\t\tsuper(parent, 'raid-stats-category-root');\n\t\tthis.raidSimUI = raidSimUI;\n\t\tthis.options = options;\n\n\t\tthis.rootElem.innerHTML = `\n\t\t\t<a href=\"javascript:void(0)\" role=\"button\" class=\"raid-stats-category\">\n\t\t\t\t<span class=\"raid-stats-category-counter\"></span>\n\t\t\t\t<span class=\"raid-stats-category-label\">${options.label}</span>\n\t\t\t</a>\n\t\t`;\n\n\t\tthis.counterElem = this.rootElem.querySelector('.raid-stats-category-counter') as HTMLElement;\n\t\tthis.tooltipElem = document.createElement('div');\n\t\tthis.tooltipElem.innerHTML = `\n\t\t\t<label class=\"raid-stats-category-label\">${options.label}</label>\n\t\t`\n\n\t\tthis.effects = options.effects.map(opt => new RaidStatsEffect(this.tooltipElem, raidSimUI, opt));\n\n\t\tif (options.effects.length != 1 || options.effects[0].playerData?.class) {\n\t\t\tconst statsLink = this.rootElem.querySelector('.raid-stats-category') as HTMLElement;\n\n\t\t\t// Using the title option here because outerHTML sanitizes and filters out the img src options\n\t\t\tTooltip.getOrCreateInstance(statsLink, {\n\t\t\t\tcustomClass: 'raid-stats-category-tooltip',\n\t\t\t\thtml: true,\n\t\t\t\tplacement: 'right',\n\t\t\t\ttitle: this.tooltipElem,\n\t\t\t})\n\t\t}\n\t}\n\n\tupdate() {\n\t\tthis.effects.forEach(effect => effect.update());\n\n\t\tconst total = sum(this.effects.map(effect => effect.count));\n\t\tthis.counterElem.textContent = String(total);\n\n\t\tconst statsLink = this.rootElem.querySelector('.raid-stats-category') as HTMLElement;\n\n\t\tif (total == 0) {\n\t\t\tstatsLink?.classList.remove('active');\n\t\t} else {\n\t\t\tstatsLink?.classList.add('active');\n\t\t}\n\t}\n}\n\nclass RaidStatsEffect extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\tprivate readonly options: RaidStatsEffectOptions;\n\tprivate readonly counterElem: HTMLElement;\n\n\tcurPlayers: Array<Player<any>>;\n\tcount: number;\n\n\tconstructor(parent: HTMLElement, raidSimUI: RaidSimUI, options: RaidStatsEffectOptions) {\n\t\tsuper(parent, 'raid-stats-effect');\n\t\tthis.raidSimUI = raidSimUI;\n\t\tthis.options = options;\n\n\t\tthis.curPlayers = [];\n\t\tthis.count = 0;\n\n\t\tthis.rootElem.innerHTML = `\n\t\t\t<span class=\"raid-stats-effect-counter\"></span>\n\t\t\t<img class=\"raid-stats-effect-icon\"></img>\n\t\t\t<span class=\"raid-stats-effect-label\">${options.label}</span>\n\t\t`;\n\t\tthis.counterElem = this.rootElem.querySelector('.raid-stats-effect-counter') as HTMLElement;\n\n\t\tif (this.options.playerData?.class) {\n\t\t\tconst labelElem = this.rootElem.querySelector('.raid-stats-effect-label') as HTMLElement;\n\t\t\tconst playerCssClass = textCssClassForClass(this.options.playerData.class);\n\t\t\tlabelElem.classList.add(playerCssClass);\n\t\t}\n\n\t\tconst iconElem = this.rootElem.querySelector('.raid-stats-effect-icon') as HTMLImageElement;\n\t\tif (options.actionId) {\n\t\t\toptions.actionId.fill().then(actionId => iconElem.src = actionId.iconUrl);\n\t\t} else {\n\t\t\ticonElem.remove();\n\t\t}\n\t}\n\n\tupdate() {\n\t\tif (this.options.playerData) {\n\t\t\tthis.curPlayers = this.raidSimUI.getActivePlayers().filter(p => this.options.playerData!.condition(p));\n\t\t}\n\n\t\tconst raidData = this.options.raidData && this.options.raidData(this.raidSimUI.sim.raid);\n\n\t\tthis.count = this.curPlayers.length + (raidData ? 1 : 0);\n\t\tthis.counterElem.textContent = String(this.count);\n\t\tif (this.count == 0) {\n\t\t\tthis.rootElem.classList.remove('active');\n\t\t} else {\n\t\t\tthis.rootElem.classList.add('active');\n\t\t}\n\t}\n}\n\nfunction negateIf(val: boolean, cond: boolean): boolean {\n\treturn cond ? !val : val;\n}\n\nfunction playerClass<T extends Class>(clazz: T, extraCondition?: (player: Player<ClassSpecs<T>>) => boolean): PlayerProvider {\n\treturn {\n\t\tclass: clazz,\n\t\tcondition: (player: Player<any>): boolean => {\n\t\t\treturn player.isClass(clazz)\n\t\t\t\t&& (!extraCondition || extraCondition(player));\n\t\t},\n\t};\n}\nfunction playerClassAndTalentInternal<T extends Class>(clazz: T, talentName: keyof SpecTalents<ClassSpecs<T>>, negateTalent: boolean, extraCondition?: (player: Player<ClassSpecs<T>>) => boolean): PlayerProvider {\n\treturn {\n\t\tclass: clazz,\n\t\tcondition: (player: Player<any>): boolean => {\n\t\t\treturn player.isClass(clazz)\n\t\t\t\t&& negateIf(Boolean((player.getTalents() as any)[talentName]), negateTalent)\n\t\t\t\t&& (!extraCondition || extraCondition(player));\n\t\t},\n\t};\n}\nfunction playerClassAndTalent<T extends Class>(clazz: T, talentName: keyof SpecTalents<ClassSpecs<T>>, extraCondition?: (player: Player<ClassSpecs<T>>) => boolean): PlayerProvider {\n\treturn playerClassAndTalentInternal(clazz, talentName, false, extraCondition);\n}\nfunction playerClassAndMissingTalent<T extends Class>(clazz: T, talentName: keyof SpecTalents<ClassSpecs<T>>, extraCondition?: (player: Player<ClassSpecs<T>>) => boolean): PlayerProvider {\n\treturn playerClassAndTalentInternal(clazz, talentName, true, extraCondition);\n}\nfunction playerSpecAndTalentInternal<T extends Spec>(spec: T, talentName: keyof SpecTalents<T>, negateTalent: boolean, extraCondition?: (player: Player<T>) => boolean): PlayerProvider {\n\treturn {\n\t\tclass: specToClass[spec],\n\t\tcondition: (player: Player<any>): boolean => {\n\t\t\treturn player.isSpec(spec)\n\t\t\t\t&& negateIf(Boolean((player.getTalents() as any)[talentName]), negateTalent)\n\t\t\t\t&& (!extraCondition || extraCondition(player));\n\t\t},\n\t};\n}\nfunction playerSpecAndTalent<T extends Spec>(spec: T, talentName: keyof SpecTalents<T>, extraCondition?: (player: Player<T>) => boolean): PlayerProvider {\n\treturn playerSpecAndTalentInternal(spec, talentName, false, extraCondition);\n}\nfunction playerSpecAndMissingTalent<T extends Spec>(spec: T, talentName: keyof SpecTalents<T>, extraCondition?: (player: Player<T>) => boolean): PlayerProvider {\n\treturn playerSpecAndTalentInternal(spec, talentName, true, extraCondition);\n}\n\nfunction raidBuff(buffName: keyof RaidBuffs): RaidProvider {\n\treturn (raid: Raid): boolean => {\n\t\treturn Boolean(raid.getBuffs()[buffName]);\n\t};\n}\n\nconst RAID_STATS_OPTIONS: RaidStatsOptions = {\n\tsections: [\n\t\t{\n\t\t\tlabel: 'Roles',\n\t\t\tcategories: [\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Tanks',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Tanks',\n\t\t\t\t\t\t\tplayerData: { condition: player => isTankSpec(player.spec) },\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Healers',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Healers',\n\t\t\t\t\t\t\tplayerData: { condition: player => isHealingSpec(player.spec) },\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Melee',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Melee',\n\t\t\t\t\t\t\tplayerData: { condition: player => isMeleeDpsSpec(player.spec) },\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Ranged',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Ranged',\n\t\t\t\t\t\t\tplayerData: { condition: player => isRangedDpsSpec(player.spec) },\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tlabel: 'Buffs',\n\t\t\tcategories: [\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Bloodlust',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Bloodlust',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(2825),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassShaman),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Stats',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Gift of the Wild',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(17051),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDruid, 'improvedMarkOfTheWild'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Gift of the Wild',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(48470),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassDruid, 'improvedMarkOfTheWild'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Drums of the Wild',\n\t\t\t\t\t\t\tactionId: ActionId.fromItemId(49634),\n\t\t\t\t\t\t\traidData: raidBuff('drumsOfTheWild'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Stats %',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Blessing of Kings',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(25898),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassPaladin),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Drums of Forgotten Kings',\n\t\t\t\t\t\t\tactionId: ActionId.fromItemId(49633),\n\t\t\t\t\t\t\traidData: raidBuff('drumsOfForgottenKings'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Blessing of Sanctuary',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(25899),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassPaladin),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Armor',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Devotion Aura',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(20140),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPaladin, 'improvedDevotionAura', player => player.getSpecOptions().aura == PaladinAura.DevotionAura),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Devotion Aura',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(48942),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassPaladin, 'improvedDevotionAura', player => player.getSpecOptions().aura == PaladinAura.DevotionAura),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Stoneskin Totem',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(16293),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassShaman, 'guardianTotems', player => player.getSpecOptions().totems?.earth == EarthTotem.StoneskinTotem),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Stoneskin Totem',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(58753),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassShaman, 'guardianTotems', player => player.getSpecOptions().totems?.earth == EarthTotem.StoneskinTotem),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Scroll of Protection',\n\t\t\t\t\t\t\tactionId: ActionId.fromItemId(43468),\n\t\t\t\t\t\t\traidData: raidBuff('scrollOfProtection'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Stamina',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Power Word Fortitude',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(14767),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPriest, 'improvedPowerWordFortitude'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Power Word Fortitude',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(48161),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassPriest, 'improvedPowerWordFortitude'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Scroll of Stamina',\n\t\t\t\t\t\t\tactionId: ActionId.fromItemId(37094),\n\t\t\t\t\t\t\traidData: raidBuff('scrollOfStamina'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Str + Agi',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Strength of Earth Totem',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(52456),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassShaman, 'enhancingTotems', player => player.getSpecOptions().totems?.earth == EarthTotem.StrengthOfEarthTotem),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Strength of Earth Totem',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(58643),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassShaman, 'enhancingTotems', player => player.getSpecOptions().totems?.earth == EarthTotem.StrengthOfEarthTotem),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Horn of Winter',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(57623),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassDeathknight),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Scroll of Strength',\n\t\t\t\t\t\t\tactionId: ActionId.fromItemId(43466),\n\t\t\t\t\t\t\traidData: raidBuff('scrollOfStrength'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Scroll of Agility',\n\t\t\t\t\t\t\tactionId: ActionId.fromItemId(43464),\n\t\t\t\t\t\t\traidData: raidBuff('scrollOfAgility'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Intellect',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Arcane Brilliance',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(43002),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassMage),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Fel Intelligence',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(54038),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarlock, 'improvedFelhunter', player => player.getSpecOptions().summon == WarlockSummon.Felhunter),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Fel Intelligence',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(57567),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassWarlock, 'improvedFelhunter', player => player.getSpecOptions().summon == WarlockSummon.Felhunter),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Scroll of Intellect',\n\t\t\t\t\t\t\tactionId: ActionId.fromItemId(37092),\n\t\t\t\t\t\t\traidData: raidBuff('scrollOfIntellect'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Spirit',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Divine Spirit',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(48073),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassPriest),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Fel Intelligence',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(54038),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarlock, 'improvedFelhunter', player => player.getSpecOptions().summon == WarlockSummon.Felhunter),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Fel Intelligence',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(57567),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassWarlock, 'improvedFelhunter', player => player.getSpecOptions().summon == WarlockSummon.Felhunter),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Scroll of Spirit',\n\t\t\t\t\t\t\tactionId: ActionId.fromItemId(37098),\n\t\t\t\t\t\t\traidData: raidBuff('scrollOfSpirit'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Atk Pwr',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Blessing of Might',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(20045),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassPaladin),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Blessing of Might',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(48934),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassPaladin),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Battle Shout',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(12861),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarrior, 'commandingPresence', player => player.getSpecOptions().shout == WarriorShout.WarriorShoutBattle),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Battle Shout',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(47436),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassWarrior, 'commandingPresence', player => player.getSpecOptions().shout == WarriorShout.WarriorShoutBattle),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Atk Pwr %',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Abomination\\'s Might',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(53138),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDeathknight, 'abominationsMight'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Unleashed Rage',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(30809),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassShaman, 'unleashedRage'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Trueshot Aura',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(19506),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassHunter, 'trueshotAura'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Damage %',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Sanctified Retribution',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(31869),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPaladin, 'sanctifiedRetribution'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Arcane Empowerment',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(31583),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassMage, 'arcaneEmpowerment'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Ferocious Inspiration',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(34460),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassHunter, 'ferociousInspiration'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Mit %',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Renewed Hope',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(57472),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPriest, 'renewedHope'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Blessing Of Sanctuary',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(25899),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassPaladin),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Vigilance',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(50720),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarrior, 'vigilance'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Haste %',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Swift Retribution',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(53648),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPaladin, 'swiftRetribution'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Moonkin Form',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(48396),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDruid, 'improvedMoonkinForm'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'MP5',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Blessing of Wisdom',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(20245),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPaladin, 'improvedBlessingOfWisdom'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Blessing of Wisdom',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(48938),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassPaladin, 'improvedBlessingOfWisdom'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Mana Spring Totem',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(16206),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassShaman, 'restorativeTotems', player => player.getSpecOptions().totems?.water == WaterTotem.ManaSpringTotem),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Mana Spring Totem',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(58774),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassShaman, 'restorativeTotems', player => player.getSpecOptions().totems?.water == WaterTotem.ManaSpringTotem),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Melee Crit',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Leader of the Pack',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(17007),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDruid, 'leaderOfThePack'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Rampage',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(29801),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarrior, 'rampage'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Melee Haste',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Icy Talons',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(55610),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDeathknight, 'improvedIcyTalons'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Windfury Totem',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(29193),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassShaman, 'improvedWindfuryTotem', player => player.getSpecOptions().totems?.air == AirTotem.WindfuryTotem),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Windfury Totem',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(65990),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassShaman, 'improvedWindfuryTotem', player => player.getSpecOptions().totems?.air == AirTotem.WindfuryTotem),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Spell Power',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Demonic Pact',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(47240),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarlock, 'demonicPact'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Totem of Wrath',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(57722),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassShaman, 'totemOfWrath', player => player.getSpecOptions().totems?.fire == FireTotem.TotemOfWrath),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Flametongue Totem',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(58656),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassShaman, player => player.getSpecOptions().totems?.fire == FireTotem.FlametongueTotem),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Spell Crit',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Moonkin Form',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(24907),\n\t\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecBalanceDruid, 'moonkinForm'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Elemental Oath',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(51470),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassShaman, 'elementalOath'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Spell Haste',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Wrath of Air Totem',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(3738),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassShaman, player => player.getSpecOptions().totems?.air == AirTotem.WrathOfAirTotem),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Health',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Commanding Shout',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(12861),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarrior, 'commandingPresence', player => player.getSpecOptions().shout == WarriorShout.WarriorShoutCommanding),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Commanding Shout',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(47440),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassWarrior, 'commandingPresence', player => player.getSpecOptions().shout == WarriorShout.WarriorShoutCommanding),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Imp',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(18696),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarlock, 'improvedImp', player => player.getSpecOptions().summon == WarlockSummon.Imp),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Blood Pact',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(47982),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassWarlock, 'improvedImp', player => player.getSpecOptions().summon == WarlockSummon.Imp),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Replenishment',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Vampiric Touch',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(48160),\n\t\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecShadowPriest, 'vampiricTouch'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Judgements of the Wise',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(31878),\n\t\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecRetributionPaladin, 'judgementsOfTheWise'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Hunting Party',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(53292),\n\t\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecHunter, 'huntingParty'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Soul Leech',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(54118),\n\t\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecWarlock, 'improvedSoulLeech'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Enduring Winter',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(44561),\n\t\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecMage, 'enduringWinter'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tlabel: 'External Buffs',\n\t\t\tcategories: [\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Innervate',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Innervate',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(29166),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassDruid),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Power Infusion',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Power Infusion',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(10060),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPriest, 'powerInfusion'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Focus Magic',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Focus Magic',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(54648),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassMage, 'focusMagic'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Tricks of the Trade',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Tricks of the Trade',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(57933),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassRogue),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Unholy Frenzy',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Unholy Frenzy',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(49016),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDeathknight, 'hysteria'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Pain Suppression',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Pain Suppression',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(33206),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPriest, 'painSuppression'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Divine Guardian',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Divine Guardian',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(53530),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPaladin, 'divineGuardian'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tlabel: 'DPS Debuffs',\n\t\t\tcategories: [\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Major ArP',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Sunder Armor',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(7386),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassWarrior),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Expose Armor',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(8647),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassRogue),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Acid Spit',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(55754),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassHunter, player => player.getSpecOptions().petType == HunterPetType.Worm),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Minor ArP',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Faerie Fire',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(770),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassDruid, player => player.spec != Spec.SpecRestorationDruid),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Curse of Weakness',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(50511),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassWarlock),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Sting',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(56631),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassHunter, player => player.getSpecOptions().petType == HunterPetType.Wasp),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Spore Cloud',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(53598),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassHunter, player => player.getSpecOptions().petType == HunterPetType.Bat),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Phys Vuln',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Blood Frenzy',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(29859),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarrior, 'bloodFrenzy'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Savage Combat',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(58413),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassRogue, 'savageCombat'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Bleed',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Mangle',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(16862),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassDruid, player => [Spec.SpecFeralDruid, Spec.SpecFeralTankDruid].includes(player.spec)),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Trauma',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(46855),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarrior, 'trauma'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Stampede',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(57393),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassHunter, player => player.getSpecOptions().petType == HunterPetType.Rhino),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Crit',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Totem of Wrath',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(30706),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassShaman, 'totemOfWrath', player => player.getSpecOptions().totems?.fire == FireTotem.TotemOfWrath),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Heart of the Crusader',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(20337),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPaladin, 'heartOfTheCrusader', player => [Spec.SpecRetributionPaladin, Spec.SpecProtectionPaladin].includes(player.spec)),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Master Poisoner',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(58410),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassRogue, 'masterPoisoner'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Spell Crit',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Shadow Bolt',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(17803),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarlock, 'improvedShadowBolt'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Scorch',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(12873),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassMage, 'improvedScorch'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Winter\\'s Chill',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(28593),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassMage, 'wintersChill'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Spell Hit',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Misery',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(33198),\n\t\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecShadowPriest, 'misery'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Faerie Fire',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(33602),\n\t\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecBalanceDruid, 'improvedFaerieFire'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Spell Dmg',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Ebon Plaguebringer',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(51161),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDeathknight, 'ebonPlaguebringer'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Earth and Moon',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(48511),\n\t\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecBalanceDruid, 'earthAndMoon'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Curse of Elements',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(47865),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassWarlock),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tlabel: 'Mitigation Debuffs',\n\t\t\tcategories: [\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Atk Pwr',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Vindication',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(26016),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPaladin, 'vindication', player => [Spec.SpecRetributionPaladin, Spec.SpecProtectionPaladin].includes(player.spec)),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Demoralizing Shout',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(12879),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarrior, 'improvedDemoralizingShout'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Demoralizing Shout',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(47437),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassWarrior, 'improvedDemoralizingShout'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Demoralizing Roar',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(16862),\n\t\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecFeralTankDruid, 'feralAggression'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Demoralizing Roar',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(48560),\n\t\t\t\t\t\t\tplayerData: playerSpecAndMissingTalent(Spec.SpecFeralTankDruid, 'feralAggression'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Curse of Weakness',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(18180),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarlock, 'improvedCurseOfWeakness'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Curse of Weakness',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(50511),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassWarlock, 'improvedCurseOfWeakness'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Demoralizing Screech',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(55487),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassHunter, player => player.getSpecOptions().petType == HunterPetType.CarrionBird),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Atk Speed',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Thunder Clap',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(12666),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarrior, 'improvedThunderClap'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Thunder Clap',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(47502),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassWarrior, 'improvedThunderClap'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Improved Frost Fever',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(51456),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDeathknight, 'improvedIcyTouch'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Frost Fever',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(51456),\n\t\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassDeathknight, 'improvedIcyTouch'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Judgements of the Just',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(53696),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPaladin, 'judgementsOfTheJust'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Infected Wounds',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(48485),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDruid, 'infectedWounds', player => [Spec.SpecFeralDruid, Spec.SpecFeralTankDruid].includes(player.spec)),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Miss',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Insect Swarm',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(65855),\n\t\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecBalanceDruid, 'insectSwarm'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Scorpid Sting',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(3043),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassHunter),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t]\n};\n","import { SavedDataManager } from \"../core/components/saved_data_manager\";\nimport { SimTab } from \"../core/components/sim_tab\";\nimport { Raid as RaidProto } from \"../core/proto/api\";\nimport { BlessingsAssignments, SavedRaid } from \"../core/proto/ui\";\nimport { EventID, TypedEvent } from \"../core/typed_event\";\nimport { RaidPicker } from \"./raid_picker\";\nimport { RaidSimUI } from \"./raid_sim_ui\";\nimport { RaidStats } from \"./raid_stats\";\n\nexport class RaidTab extends SimTab {\n\tprotected simUI: RaidSimUI;\n\n\treadonly leftPanel: HTMLElement;\n\treadonly rightPanel: HTMLElement;\n\n\tconstructor(parentElem: HTMLElement, simUI: RaidSimUI) {\n\t\tsuper(parentElem, simUI, { identifier: 'raid-tab', title: 'Raid' });\n\t\tthis.simUI = simUI;\n\n\t\tthis.rootElem.classList.add('active', 'show')\n\n\t\tthis.leftPanel = document.createElement('div');\n\t\tthis.leftPanel.classList.add('raid-tab-left', 'tab-panel-left');\n\n\t\tthis.rightPanel = document.createElement('div');\n\t\tthis.rightPanel.classList.add('raid-tab-right', 'tab-panel-right');\n\n\t\tthis.contentContainer.appendChild(this.leftPanel);\n\t\tthis.contentContainer.appendChild(this.rightPanel);\n\n\t\tthis.buildTabContent();\n\t}\n\n\tprotected buildTabContent() {\n\t\tthis.simUI.raidPicker = new RaidPicker(this.leftPanel, this.simUI);\n\t\tnew RaidStats(this.leftPanel, this.simUI);\n\n\t\tconst savedRaidManager = new SavedDataManager<RaidSimUI, SavedRaid>(this.rightPanel, this.simUI, {\n\t\t\tlabel: 'Raid',\n\t\t\theader: { title: 'Saved Raid Groups' },\n\t\t\tstorageKey: this.simUI.getSavedRaidStorageKey(),\n\t\t\tgetData: (raidSimUI: RaidSimUI) => SavedRaid.create({\n\t\t\t\traid: this.simUI.sim.raid.toProto(),\n\t\t\t\tblessings: this.simUI.blessingsPicker!.getAssignments(),\n\t\t\t\tfaction: this.simUI.sim.getFaction(),\n\t\t\t}),\n\t\t\tsetData: (eventID: EventID, raidSimUI: RaidSimUI, newRaid: SavedRaid) => {\n\t\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\t\tthis.simUI.sim.raid.fromProto(eventID, newRaid.raid || RaidProto.create());\n\t\t\t\t\tthis.simUI.blessingsPicker!.setAssignments(eventID, newRaid.blessings || BlessingsAssignments.create());\n\t\t\t\t\tif (newRaid.faction) this.simUI.sim.setFaction(eventID, newRaid.faction);\n\t\t\t\t});\n\t\t\t},\n\t\t\tchangeEmitters: [this.simUI.changeEmitter, this.simUI.sim.changeEmitter],\n\t\t\tequals: (a: SavedRaid, b: SavedRaid) => {\n\t\t\t\treturn SavedRaid.equals(a, b);\n\t\t\t},\n\t\t\ttoJson: (a: SavedRaid) => SavedRaid.toJson(a),\n\t\t\tfromJson: (obj: any) => SavedRaid.fromJson(obj),\n\t\t}\n\t\t);\n\t\tthis.simUI.sim.waitForInit().then(() => {\n\t\t\tsavedRaidManager.loadUserData();\n\t\t});\n\t}\n}\n","import { Input, InputConfig } from '../components/input.js';\nimport { Player } from '../player.js';\nimport { Raid } from '../raid.js';\nimport { EventID, TypedEvent } from '../typed_event.js';\nimport { UnitReference } from '../proto/common.js';\nimport { emptyUnitReference, cssClassForClass } from '../proto_utils/utils.js';\n\nexport interface UnitReferencePickerConfig<ModObject> extends InputConfig<ModObject, UnitReference> {\n\tnoTargetLabel: string,\n\tcompChangeEmitter: TypedEvent<void>,\n}\n\ninterface OptionElemOptions {\n\tisDropdown?: boolean,\n\tplayer: Player<any> | null,\n}\n\n// Dropdown menu for selecting a player.\nexport class UnitReferencePicker<ModObject> extends Input<ModObject, UnitReference> {\n\tprivate readonly config: UnitReferencePickerConfig<ModObject>;\n\tprivate readonly raid: Raid;\n\n\tprivate curPlayer: Player<any> | null;\n\tprivate curUnitReference: UnitReference;\n\n\tprivate currentOptions: Array<OptionElemOptions>;\n\n\tprivate readonly buttonElem: HTMLElement;\n\tprivate readonly dropdownElem: HTMLElement;\n\n\tconstructor(parent: HTMLElement, raid: Raid, modObj: ModObject, config: UnitReferencePickerConfig<ModObject>) {\n\t\tsuper(parent, 'raid-target-picker-root', modObj, config);\n\t\tthis.rootElem.classList.add('dropdown');\n\t\tthis.config = config;\n\t\tthis.raid = raid;\n\t\tthis.curPlayer = this.raid.getPlayerFromUnitReference(config.getValue(modObj));\n\t\tthis.curUnitReference = this.getInputValue();\n\n\t\tthis.rootElem.innerHTML = `\n\t\t\t<a\n\t\t\t\tclass=\"raid-target-picker-button\"\n\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\trole=\"button\"\n\t\t\t\tdata-bs-toggle=\"dropdown\"\n\t\t\t></a>\n\t\t\t<div class=\"dropdown-menu\"></div>\n    `;\n\n\t\tthis.buttonElem = this.rootElem.querySelector('.raid-target-picker-button') as HTMLElement;\n\t\tthis.dropdownElem = this.rootElem.querySelector('.dropdown-menu') as HTMLElement;\n\n\t\tthis.buttonElem.addEventListener('click', event => event.preventDefault());\n\n\t\tthis.currentOptions = [];\n\t\tthis.updateOptions(TypedEvent.nextEventID());\n\t\tconfig.compChangeEmitter.on(eventID => this.updateOptions(eventID));\n\n\t\tthis.init();\n\t}\n\n\tprivate makeTargetOptions(): Array<OptionElemOptions> {\n\t\tconst unassignedOption = { player: null, isDropdown: true }\n\t\tconst playerOptions = this.raid.getPlayers().filter(player => player != null).map(player => {\n\t\t\treturn { player: player, isDropdown: true }\n\t\t});\n\n\t\treturn [unassignedOption, ...playerOptions]\n\t}\n\n\tprivate updateOptions(eventID: EventID) {\n\t\tthis.currentOptions = this.makeTargetOptions();\n\n\t\tthis.dropdownElem.innerHTML = '';\n\t\tthis.currentOptions.forEach(option => this.dropdownElem.appendChild(this.makeOption(option)));\n\n\t\tconst prevUnitReference = this.curUnitReference;\n\t\tthis.curUnitReference = this.getInputValue();\n\t\tif (!UnitReference.equals(prevUnitReference, this.curUnitReference)) {\n\t\t\tthis.inputChanged(eventID);\n\t\t} else {\n\t\t\tthis.setInputValue(this.curUnitReference);\n\t\t}\n\t}\n\n\tprivate makeOption(data: OptionElemOptions): HTMLElement {\n\t\tconst option = UnitReferencePicker.makeOptionElem(data);\n\n\t\toption.addEventListener('click', event => {\n\t\t\tevent.preventDefault();\n\t\t\tthis.curPlayer = data.player;\n\t\t\tthis.curUnitReference = this.getInputValue();\n\t\t\tthis.inputChanged(TypedEvent.nextEventID());\n\t\t});\n\n\t\treturn option;\n\t}\n\n\tgetInputElem(): HTMLElement {\n\t\treturn this.buttonElem;\n\t}\n\n\tgetInputValue(): UnitReference {\n\t\tif (this.curPlayer) {\n\t\t\treturn this.curPlayer.makeUnitReference();\n\t\t} else {\n\t\t\treturn emptyUnitReference();\n\t\t}\n\t}\n\n\tsetInputValue(newValue: UnitReference) {\n\t\tthis.curUnitReference = UnitReference.clone(newValue);\n\t\tthis.curPlayer = this.raid.getPlayerFromUnitReference(this.curUnitReference);\n\n\t\tconst optionData = this.currentOptions.find(optionData => optionData.player == this.curPlayer);\n\n\t\tif (optionData)\n\t\t\tthis.buttonElem.innerHTML = UnitReferencePicker.makeOptionElem({ player: optionData.player }).outerHTML;\n\t}\n\n\tstatic makeOptionElem(data: OptionElemOptions): HTMLElement {\n\t\tconst classCssClass = data.player ? cssClassForClass(data.player.getClass()) : '';\n\t\tlet playerFragment = document.createElement('fragment');\n\n\t\tplayerFragment.innerHTML = `\n\t\t\t<div class=\"player ${classCssClass ? `bg-${classCssClass}-dampened` : ''}\">\n\t\t\t\t<div class=\"player-label\">\n\t\t\t\t\t${data.player ? `<img class=\"player-icon\" src=\"${data.player.getSpecIcon()}\" draggable=\"false\"/>` : ''}\n\t\t\t\t\t<div class=\"player-details\">\n\t\t\t\t\t\t<span class=\"player-name ${classCssClass ? `text-${classCssClass}` : ''}\">\n\t\t\t\t\t\t\t${data.player ? data.player.getName() : 'Unassigned'}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`\n\n\t\tif (data.isDropdown) {\n\t\t\tplayerFragment.innerHTML = `\n\t\t\t\t<a class=\"dropdown-option\" href=\"javascript:void(0) role=\"button\">${playerFragment.innerHTML}</a>\n\t\t\t`\n\t\t}\n\n\t\treturn playerFragment.children[0] as HTMLElement;\n\t}\n}\n","import { Component } from '../core/components/component.js';\nimport { UnitReferencePicker } from '../core/components/raid_target_picker.js';\n\nimport { Player } from '../core/player.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\n\nimport { Class, UnitReference, Spec } from '../core/proto/common.js';\nimport { emptyUnitReference } from '../core/proto_utils/utils.js';\n\nimport { RaidSimUI } from './raid_sim_ui.js';\nimport { PriestTalents } from 'ui/core/proto/priest.js';\nimport { DeathknightTalents } from 'ui/core/proto/deathknight.js';\n\nexport class AssignmentsPicker extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\treadonly changeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\n\tprivate readonly innervatesPicker: InnervatesPicker;\n\tprivate readonly powerInfusionsPicker: PowerInfusionsPicker;\n\tprivate readonly tricksOfTheTradesPicker: TricksOfTheTradesPicker;\n\tprivate readonly unholyFrenzyPicker: UnholyFrenzyPicker;\n\tprivate readonly focusMagicsPicker: FocusMagicsPicker;\n\n\tconstructor(parentElem: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parentElem, 'assignments-picker-root');\n\t\tthis.raidSimUI = raidSimUI;\n\n\t\tthis.innervatesPicker = new InnervatesPicker(this.rootElem, raidSimUI);\n\t\tthis.powerInfusionsPicker = new PowerInfusionsPicker(this.rootElem, raidSimUI);\n\t\tthis.tricksOfTheTradesPicker = new TricksOfTheTradesPicker(this.rootElem, raidSimUI);\n\t\tthis.unholyFrenzyPicker = new UnholyFrenzyPicker(this.rootElem, raidSimUI);\n\t\tthis.focusMagicsPicker = new FocusMagicsPicker(this.rootElem, raidSimUI);\n\t}\n}\n\ninterface AssignmentTargetPicker {\n\tplayer: Player<any>,\n\ttargetPicker: UnitReferencePicker<Player<any>>,\n\ttargetPlayer: Player<any> | null;\n};\n\nabstract class AssignedBuffPicker extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\treadonly changeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\n\tprivate readonly playersContainer: HTMLElement;\n\n\tprivate targetPickers: Array<AssignmentTargetPicker>;\n\n\tconstructor(parentElem: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parentElem, 'assigned-buff-picker-root');\n\t\tthis.raidSimUI = raidSimUI;\n\t\tthis.targetPickers = [];\n\n\t\tthis.playersContainer = document.createElement('div');\n\t\tthis.playersContainer.classList.add('assigned-buff-container');\n\t\tthis.rootElem.appendChild(this.playersContainer);\n\n\t\tthis.raidSimUI.changeEmitter.on(eventID => this.update());\n\t\tthis.update();\n\t}\n\n\tprivate update() {\n\t\tthis.playersContainer.innerHTML = `\n\t\t\t<label class=\"assignmented-buff-label form-label\">${this.getTitle()}</label>\n\t\t`\n\n\t\tconst sourcePlayers = this.getSourcePlayers();\n\t\tif (sourcePlayers.length == 0)\n\t\t\tthis.rootElem.classList.add('hide');\n\t\telse\n\t\t\tthis.rootElem.classList.remove('hide');\n\n\t\tthis.targetPickers = sourcePlayers.map((sourcePlayer, sourcePlayerIndex) => {\n\t\t\tconst row = document.createElement('div');\n\t\t\trow.classList.add('assigned-buff-player', 'input-inline');\n\t\t\tthis.playersContainer.appendChild(row);\n\n\t\t\tlet sourceElem = document.createElement('div');\n\t\t\tsourceElem.classList.add('raid-target-picker-root');\n\t\t\tsourceElem.appendChild(\n\t\t\t\tUnitReferencePicker.makeOptionElem({ player: sourcePlayer, isDropdown: false })\n\t\t\t);\n\t\t\trow.appendChild(sourceElem);\n\n\t\t\tconst arrow = document.createElement('i');\n\t\t\tarrow.classList.add('assigned-buff-arrow', 'fa', 'fa-arrow-right');\n\t\t\trow.appendChild(arrow);\n\n\t\t\tconst raidTargetPicker: UnitReferencePicker<Player<any>> | null = new UnitReferencePicker<Player<any>>(row, this.raidSimUI.sim.raid, sourcePlayer, {\n\t\t\t\textraCssClasses: ['assigned-buff-target-picker'],\n\t\t\t\tnoTargetLabel: 'Unassigned',\n\t\t\t\tcompChangeEmitter: this.raidSimUI.sim.raid.compChangeEmitter,\n\n\t\t\t\tchangedEvent: (player: Player<any>) => player.specOptionsChangeEmitter,\n\t\t\t\tgetValue: (player: Player<any>) => this.getPlayerValue(player),\n\t\t\t\tsetValue: (eventID: EventID, player: Player<any>, newValue: UnitReference) => this.setPlayerValue(eventID, player, newValue),\n\t\t\t});\n\n\t\t\tconst targetPickerData = {\n\t\t\t\tplayer: sourcePlayer,\n\t\t\t\ttargetPicker: raidTargetPicker!,\n\t\t\t\ttargetPlayer: this.raidSimUI.sim.raid.getPlayerFromUnitReference(raidTargetPicker!.getInputValue()),\n\t\t\t};\n\n\t\t\traidTargetPicker!.changeEmitter.on(eventID => {\n\t\t\t\ttargetPickerData.targetPlayer = this.raidSimUI.sim.raid.getPlayerFromUnitReference(raidTargetPicker!.getInputValue());\n\t\t\t});\n\n\t\t\treturn targetPickerData;\n\t\t});\n\t}\n\n\tabstract getTitle(): string;\n\tabstract getSourcePlayers(): Array<Player<any>>;\n\n\tabstract getPlayerValue(player: Player<any>): UnitReference;\n\tabstract setPlayerValue(eventID: EventID, player: Player<any>, newValue: UnitReference): void;\n}\n\nclass InnervatesPicker extends AssignedBuffPicker {\n\tgetTitle(): string {\n\t\treturn 'Innervate';\n\t}\n\n\tgetSourcePlayers(): Array<Player<any>> {\n\t\treturn this.raidSimUI.getActivePlayers().filter(player => player.isClass(Class.ClassDruid));\n\t}\n\n\tgetPlayerValue(player: Player<any>): UnitReference {\n\t\treturn (player as Player<Spec.SpecBalanceDruid>).getSpecOptions().innervateTarget || emptyUnitReference();\n\t}\n\n\tsetPlayerValue(eventID: EventID, player: Player<any>, newValue: UnitReference) {\n\t\tconst newOptions = (player as Player<Spec.SpecBalanceDruid>).getSpecOptions();\n\t\tnewOptions.innervateTarget = newValue;\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t}\n}\n\nclass PowerInfusionsPicker extends AssignedBuffPicker {\n\tgetTitle(): string {\n\t\treturn 'Power Infusion';\n\t}\n\n\tgetSourcePlayers(): Array<Player<any>> {\n\t\treturn this.raidSimUI.getActivePlayers().filter(player => player.isClass(Class.ClassPriest) && (player.getTalents() as PriestTalents).powerInfusion);\n\t}\n\n\tgetPlayerValue(player: Player<any>): UnitReference {\n\t\treturn (player as Player<Spec.SpecSmitePriest>).getSpecOptions().powerInfusionTarget || emptyUnitReference();\n\t}\n\n\tsetPlayerValue(eventID: EventID, player: Player<any>, newValue: UnitReference) {\n\t\tconst newOptions = (player as Player<Spec.SpecSmitePriest>).getSpecOptions();\n\t\tnewOptions.powerInfusionTarget = newValue;\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t}\n}\n\nclass TricksOfTheTradesPicker extends AssignedBuffPicker {\n\tgetTitle(): string {\n\t\treturn 'Tricks of the Trade';\n\t}\n\n\tgetSourcePlayers(): Array<Player<any>> {\n\t\treturn this.raidSimUI.getActivePlayers().filter(player => player.isClass(Class.ClassRogue));\n\t}\n\n\tgetPlayerValue(player: Player<any>): UnitReference {\n\t\treturn (player as Player<Spec.SpecRogue>).getSpecOptions().tricksOfTheTradeTarget || emptyUnitReference();\n\t}\n\n\tsetPlayerValue(eventID: EventID, player: Player<any>, newValue: UnitReference) {\n\t\tconst newOptions = (player as Player<Spec.SpecRogue>).getSpecOptions();\n\t\tnewOptions.tricksOfTheTradeTarget = newValue;\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t}\n}\n\nclass UnholyFrenzyPicker extends AssignedBuffPicker {\n\tgetTitle(): string {\n\t\treturn 'Unholy Frenzy';\n\t}\n\n\tgetSourcePlayers(): Array<Player<any>> {\n\t\treturn this.raidSimUI.getActivePlayers().filter(player => player.isClass(Class.ClassDeathknight) && (player.getTalents() as DeathknightTalents).hysteria);\n\t}\n\n\tgetPlayerValue(player: Player<any>): UnitReference {\n\t\treturn (player as Player<Spec.SpecDeathknight>).getSpecOptions().unholyFrenzyTarget || emptyUnitReference();\n\t}\n\n\tsetPlayerValue(eventID: EventID, player: Player<any>, newValue: UnitReference) {\n\t\tconst newOptions = (player as Player<Spec.SpecDeathknight>).getSpecOptions();\n\t\tnewOptions.unholyFrenzyTarget = newValue;\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t}\n}\n\nclass FocusMagicsPicker extends AssignedBuffPicker {\n\tgetTitle(): string {\n\t\treturn 'Focus Magic';\n\t}\n\n\tgetSourcePlayers(): Array<Player<any>> {\n\t\treturn this.raidSimUI.getActivePlayers().filter(player => player.isClass(Class.ClassMage));\n\t}\n\n\tgetPlayerValue(player: Player<any>): UnitReference {\n\t\treturn (player as Player<Spec.SpecMage>).getSpecOptions().focusMagicTarget || emptyUnitReference();\n\t}\n\n\tsetPlayerValue(eventID: EventID, player: Player<any>, newValue: UnitReference) {\n\t\tconst newOptions = (player as Player<Spec.SpecMage>).getSpecOptions();\n\t\tnewOptions.focusMagicTarget = newValue;\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t}\n}\n","import { Tooltip } from 'bootstrap';\n\nimport { Component } from '../core/components/component';\nimport { IconEnumPicker } from '../core/components/icon_enum_picker';\nimport { memeSpecs } from '../core/launched_sims';\nimport { Class, Spec } from '../core/proto/common';\nimport { Blessings } from '../core/proto/paladin';\nimport { BlessingsAssignments } from '../core/proto/ui';\nimport { ActionId } from '../core/proto_utils/action_id';\nimport {\n\tclassColors,\n\tmakeDefaultBlessings,\n\tnaturalSpecOrder,\n\tspecNames,\n\ttitleIcons,\n} from '../core/proto_utils/utils';\nimport { EventID, TypedEvent } from '../core/typed_event';\nimport { implementedSpecs } from './presets';\nimport { RaidSimUI } from './raid_sim_ui';\n\nconst MAX_PALADINS = 4;\n\nexport class BlessingsPicker extends Component {\n\treadonly simUI: RaidSimUI;\n\treadonly changeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\n\tprivate readonly pickers: Array<Array<IconEnumPicker<this, Blessings>>> = [];\n\n\tprivate assignments: BlessingsAssignments;\n\n\tconstructor(parentElem: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parentElem, 'blessings-picker-root');\n\t\tthis.simUI = raidSimUI;\n\t\tthis.assignments = BlessingsAssignments.clone(makeDefaultBlessings(4));\n\n\t\tconst specs = naturalSpecOrder\n\t\t\t.filter(spec => implementedSpecs.includes(spec))\n\t\t\t.filter(spec => !memeSpecs.includes(spec));\n\t\tconst paladinIndexes = [...Array(MAX_PALADINS).keys()];\n\n\t\tspecs.map(spec => {\n\t\t\tconst row = document.createElement('div');\n\t\t\trow.classList.add('blessings-picker-row');\n\t\t\tthis.rootElem.appendChild(row);\n\n\t\t\trow.append(this.buildSpecIcon(spec));\n\n\t\t\tconst container = document.createElement('div');\n\t\t\tcontainer.classList.add('blessings-picker-container');\n\t\t\trow.appendChild(container);\n\n\t\t\tpaladinIndexes.forEach(paladinIdx => {\n\t\t\t\tif (!this.pickers[paladinIdx])\n\t\t\t\t\tthis.pickers.push([]);\n\n\t\t\t\tconst blessingPicker = new IconEnumPicker(container, this, {\n\t\t\t\t\textraCssClasses: ['blessing-picker'],\n\t\t\t\t\tnumColumns: 1,\n\t\t\t\t\tvalues: [\n\t\t\t\t\t\t{ color: classColors[Class.ClassPaladin], value: Blessings.BlessingUnknown },\n\t\t\t\t\t\t{ actionId: ActionId.fromSpellId(25898), value: Blessings.BlessingOfKings },\n\t\t\t\t\t\t{ actionId: ActionId.fromSpellId(48934), value: Blessings.BlessingOfMight },\n\t\t\t\t\t\t{ actionId: ActionId.fromSpellId(48938), value: Blessings.BlessingOfWisdom },\n\t\t\t\t\t\t{ actionId: ActionId.fromSpellId(25899), value: Blessings.BlessingOfSanctuary },\n\t\t\t\t\t],\n\t\t\t\t\tequals: (a: Blessings, b: Blessings) => a == b,\n\t\t\t\t\tzeroValue: Blessings.BlessingUnknown,\n\t\t\t\t\tenableWhen: (_picker: BlessingsPicker) => {\n\t\t\t\t\t\tconst numPaladins = Math.min(this.simUI.getClassCount(Class.ClassPaladin), MAX_PALADINS);\n\t\t\t\t\t\treturn paladinIdx < numPaladins;\n\t\t\t\t\t},\n\t\t\t\t\tchangedEvent: (picker: BlessingsPicker) => picker.changeEmitter,\n\t\t\t\t\tgetValue: (picker: BlessingsPicker) => picker.assignments.paladins[paladinIdx]?.blessings[spec] || Blessings.BlessingUnknown,\n\t\t\t\t\tsetValue: (eventID: EventID, picker: BlessingsPicker, newValue: number) => {\n\t\t\t\t\t\tconst currentValue = picker.assignments.paladins[paladinIdx].blessings[spec];\n\t\t\t\t\t\tif (currentValue != newValue) {\n\t\t\t\t\t\t\tpicker.assignments.paladins[paladinIdx].blessings[spec] = newValue;\n\t\t\t\t\t\t\tthis.changeEmitter.emit(eventID);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t},raidSimUI);\n\n\t\t\t\tthis.pickers[paladinIdx].push(blessingPicker);\n\t\t\t});\n\n\t\t\treturn row;\n\t\t});\n\n\t\tthis.updatePickers()\n\t\tthis.simUI.compChangeEmitter.on(_eventID => this.updatePickers());\n\t}\n\n\tprivate updatePickers() {\n\t\tfor (let i = 0; i < MAX_PALADINS; i++) {\n\t\t\tthis.pickers[i].forEach(picker => picker.update());\n\t\t}\n\t}\n\n\tprivate buildSpecIcon(spec: Spec): HTMLElement {\n\t\tconst fragment = document.createElement('fragment');\n\t\tfragment.innerHTML = `\n\t\t\t<div class=\"blessings-picker-spec\">\n\t\t\t\t<img\n\t\t\t\t\tsrc=\"${titleIcons[spec]}\"\n\t\t\t\t\tclass=\"blessings-spec-icon\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t`;\n\n\t\tconst icon = fragment.querySelector('.blessings-spec-icon') as HTMLElement;\n\t\tTooltip.getOrCreateInstance(icon, { title: specNames[spec]});\n\n\t\treturn fragment.children[0] as HTMLElement;\n\t}\n\n\tgetAssignments(): BlessingsAssignments {\n\t\t// Defensive copy.\n\t\treturn BlessingsAssignments.clone(this.assignments);\n\t}\n\n\tsetAssignments(eventID: EventID, newAssignments: BlessingsAssignments) {\n\t\tthis.assignments = BlessingsAssignments.clone(newAssignments);\n\t\tthis.changeEmitter.emit(eventID);\n\t}\n}\n","import { Component } from '../core/components/component';\nimport { UnitReferencePicker } from '../core/components/raid_target_picker';\n\nimport { Raid } from '../core/raid';\nimport { EventID } from '../core/typed_event';\n\nimport { UnitReference } from '../core/proto/common';\nimport { emptyUnitReference } from '../core/proto_utils/utils';\n\nimport { RaidSimUI } from './raid_sim_ui';\n\nconst MAX_TANKS = 4;\n\nexport class TanksPicker extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\n\tconstructor(parentElem: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parentElem, 'tanks-picker-root');\n\t\tthis.raidSimUI = raidSimUI;\n\n\t\tconst raid = this.raidSimUI.sim.raid;\n\n\t\tfor (let i = 0; i < MAX_TANKS; i++) {\n\t\t\tconst row = document.createElement('div');\n\t\t\trow.classList.add('tank-picker-row', 'input-inline');\n\t\t\tthis.rootElem.appendChild(row);\n\n\t\t\tconst labelElem = document.createElement('label');\n\t\t\tlabelElem.textContent = i == 0 ? 'Main Tank' : `Tank ${i + 1}`;\n\t\t\tlabelElem.classList.add('tank-picker-label', 'form-label');\n\t\t\trow.appendChild(labelElem);\n\n\t\t\tnew UnitReferencePicker<Raid>(row, raid, raid, {\n\t\t\t\textraCssClasses: ['tank-picker'],\n\t\t\t\tnoTargetLabel: 'Unassigned',\n\t\t\t\tcompChangeEmitter: raid.compChangeEmitter,\n\n\t\t\t\tchangedEvent: (raid: Raid) => raid.tanksChangeEmitter,\n\t\t\t\tgetValue: (raid: Raid) => raid.getTanks()[i] || emptyUnitReference(),\n\t\t\t\tsetValue: (eventID: EventID, raid: Raid, newValue: UnitReference) => {\n\t\t\t\t\tconst tanks = raid.getTanks();\n\t\t\t\t\tfor (let j = 0; j < i; j++) {\n\t\t\t\t\t\tif (!tanks[j]) {\n\t\t\t\t\t\t\ttanks.push(emptyUnitReference());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttanks[i] = newValue;\n\t\t\t\t\traid.setTanks(eventID, tanks);\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t}\n}\n","import { ContentBlock } from \"../core/components/content_block\";\nimport { EncounterPicker } from \"../core/components/encounter_picker\";\nimport { IconPicker } from \"../core/components/icon_picker\";\nimport { SavedDataManager } from \"../core/components/saved_data_manager\";\nimport { SimTab } from \"../core/components/sim_tab\";\nimport * as Tooltips from \"../core/constants/tooltips.js\";\nimport { Encounter } from \"../core/encounter\";\nimport { RaidBuffs } from \"../core/proto/common\";\nimport { SavedEncounter } from \"../core/proto/ui\";\nimport { ActionId, ActionIDMap } from \"../core/proto_utils/action_id\";\nimport { Raid } from \"../core/raid\";\nimport { EventID } from \"../core/typed_event\";\nimport { AssignmentsPicker } from \"./assignments_picker\";\nimport { BlessingsPicker } from \"./blessings_picker\";\nimport { RaidSimUI } from \"./raid_sim_ui\";\nimport { TanksPicker } from \"./tanks_picker\";\n\nexport class SettingsTab extends SimTab {\n\tprotected simUI: RaidSimUI;\n\n\treadonly leftPanel: HTMLElement;\n\treadonly rightPanel: HTMLElement;\n\n\treadonly column1: HTMLElement = this.buildColumn(1, 'raid-settings-col');\n\treadonly column2: HTMLElement = this.buildColumn(2, 'raid-settings-col');\n\treadonly column3: HTMLElement = this.buildColumn(3, 'raid-settings-col');\n\n\tconstructor(parentElem: HTMLElement, simUI: RaidSimUI) {\n\t\tsuper(parentElem, simUI, { identifier: 'raid-settings-tab', title: 'Settings' });\n\t\tthis.simUI = simUI;\n\n\t\tthis.leftPanel = document.createElement('div');\n\t\tthis.leftPanel.classList.add('raid-settings-tab-left', 'tab-panel-left');\n\n\t\tthis.leftPanel.appendChild(this.column1);\n\t\tthis.leftPanel.appendChild(this.column2);\n\t\tthis.leftPanel.appendChild(this.column3);\n\n\t\tthis.rightPanel = document.createElement('div');\n\t\tthis.rightPanel.classList.add('raid-settings-tab-right', 'tab-panel-right', 'within-raid-sim-hide');\n\n\t\tthis.contentContainer.appendChild(this.leftPanel);\n\t\tthis.contentContainer.appendChild(this.rightPanel);\n\n\t\tthis.buildTabContent();\n\t}\n\n\tprotected buildTabContent() {\n\t\tthis.buildEncounterSettings();\n\t\tthis.buildConsumesSettings();\n\n\t\tthis.buildTankSettings();\n\t\tthis.buildAssignmentSettings();\n\t\tthis.buildOtherSettings();\n\n\t\tthis.buildBlessingsPicker();\n\t\tthis.buildSavedDataPickers();\n\t}\n\n\tprivate buildEncounterSettings() {\n\t\tconst contentBlock = new ContentBlock(this.column1, 'encounter-settings', {\n\t\t\theader: { title: 'Encounter' }\n\t\t});\n\n\t\tnew EncounterPicker(contentBlock.bodyElement, this.simUI.sim.encounter, { showExecuteProportion: true }, this.simUI);\n\t}\n\n\tprivate buildConsumesSettings() {\n\t\tconst contentBlock = new ContentBlock(this.column1, 'consumes-settings', {\n\t\t\theader: { title: 'Consumables' }\n\t\t});\n\n\t\tconst container = document.createElement('div');\n\t\tcontainer.classList.add('consumes-container');\n\n\t\tcontentBlock.bodyElement.appendChild(container);\n\n\t\tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(37094), 'scrollOfStamina'),\n\t\t\tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(43466), 'scrollOfStrength'),\n\t\t\tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(43464), 'scrollOfAgility'),\n\t\t\tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(37092), 'scrollOfIntellect'),\n\t\t\tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(37098), 'scrollOfSpirit'),\n\t\t\tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(43468), 'scrollOfProtection'),\n\t\t\tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(49633), 'drumsOfForgottenKings'),\n\t\t\tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(49634), 'drumsOfTheWild');\n\t}\n\n\tprivate buildOtherSettings() {\n\t\tconst contentBlock = new ContentBlock(this.column2, 'other-settings', {\n\t\t  header: {title: 'Other'}\n\t\t});\n\n\t\tthis.makeBooleanRaidIconBuffInput(contentBlock.bodyElement, ActionId.fromSpellId(73828), 'strengthOfWrynn');\n\n\t\t// new BooleanPicker(contentBlock.bodyElement, this.simUI.sim.raid, {\n\t\t// \tlabel: 'Stagger Stormstrikes',\n\t\t// \tlabelTooltip: 'When there are multiple Enhancement Shaman in the raid, causes them to coordinate their Stormstrike casts for optimal SS charge usage.',\n\t\t// \tchangedEvent: (raid: Raid) => raid.staggerStormstrikesChangeEmitter,\n\t\t// \tgetValue: (raid: Raid) => raid.getStaggerStormstrikes(),\n\t\t// \tsetValue: (eventID: EventID, raid: Raid, newValue: boolean) => {\n\t\t// \t\traid.setStaggerStormstrikes(eventID, newValue);\n\t\t// \t},\n\t\t// });\n\t}\n\n\tprivate buildTankSettings() {\n\t\tconst contentBlock = new ContentBlock(this.column2, 'tanks-settings', {\n\t\t\theader: { title: 'Tanks' }\n\t\t});\n\n\t\tnew TanksPicker(contentBlock.bodyElement, this.simUI);\n\t}\n\n\tprivate buildAssignmentSettings() {\n\t\tconst contentBlock = new ContentBlock(this.column2, 'assignments-settings', {\n\t\t\theader: { title: 'External Buffs' }\n\t\t});\n\n\t\tnew AssignmentsPicker(contentBlock.bodyElement, this.simUI);\n\t}\n\n\tprivate buildBlessingsPicker() {\n\t\tconst contentBlock = new ContentBlock(this.column3, 'blessings-settings', {\n\t\t\theader: { title: 'Blessings', tooltip: Tooltips.BLESSINGS_SECTION }\n\t\t});\n\n\t\tthis.simUI.blessingsPicker = new BlessingsPicker(contentBlock.bodyElement, this.simUI);\n\t\tthis.simUI.blessingsPicker.changeEmitter.on(eventID => this.simUI.changeEmitter.emit(eventID));\n\t}\n\n\tprivate buildSavedDataPickers() {\n\t\tconst savedEncounterManager = new SavedDataManager<Encounter, SavedEncounter>(this.rightPanel, this.simUI.sim.encounter, {\n\t\t\tlabel: 'Encounter',\n\t\t\theader: { title: 'Saved Encounters' },\n\t\t\tstorageKey: this.simUI.getSavedEncounterStorageKey(),\n\t\t\tgetData: (encounter: Encounter) => SavedEncounter.create({ encounter: encounter.toProto() }),\n\t\t\tsetData: (eventID: EventID, encounter: Encounter, newEncounter: SavedEncounter) => encounter.fromProto(eventID, newEncounter.encounter!),\n\t\t\tchangeEmitters: [this.simUI.sim.encounter.changeEmitter],\n\t\t\tequals: (a: SavedEncounter, b: SavedEncounter) => SavedEncounter.equals(a, b),\n\t\t\ttoJson: (a: SavedEncounter) => SavedEncounter.toJson(a),\n\t\t\tfromJson: (obj: any) => SavedEncounter.fromJson(obj),\n\t\t});\n\n\t\tthis.simUI.sim.waitForInit().then(() => {\n\t\t\tsavedEncounterManager.loadUserData();\n\t\t});\n\t}\n\n\tprivate makeBooleanRaidIconBuffInput(parent: HTMLElement, actionId: ActionId, field: keyof RaidBuffs): IconPicker<Raid, boolean> {\n\t\tconst raid = this.simUI.sim.raid;\n\n\t\treturn new IconPicker<Raid, boolean>(parent, raid, {\n\t\t\tactionId: actionId,\n\t\t\tstates: 2,\n\t\t\tchangedEvent: (raid: Raid) => raid.buffsChangeEmitter,\n\t\t\tgetValue: (raid: Raid) => raid.getBuffs()[field] as unknown as boolean,\n\t\t\tsetValue: (eventID: EventID, raid: Raid, newValue: boolean) => {\n\t\t\t\tconst newBuffs = raid.getBuffs();\n\t\t\t\t(newBuffs[field] as unknown as boolean) = newValue;\n\t\t\t\traid.setBuffs(eventID, newBuffs);\n\t\t\t},\n\t\t},this.simUI);\n\t}\n}\n","import { EmbeddedDetailedResults } from \"../core/components/detailed_results.js\";\nimport { LogRunner } from \"../core/components/detailed_results/log_runner.js\";\nimport { addRaidSimAction, RaidSimResultsManager, ReferenceData } from \"../core/components/raid_sim_action.js\";\nimport { raidSimStatus } from '../core/launched_sims.js';\nimport { Player } from \"../core/player.js\";\nimport { Raid as RaidProto } from \"../core/proto/api.js\";\nimport { Class, Encounter as EncounterProto, RaidBuffs, TristateEffect } from \"../core/proto/common.js\";\nimport { Blessings } from \"../core/proto/paladin.js\";\nimport { BlessingsAssignments, RaidSimSettings, SavedEncounter } from \"../core/proto/ui.js\";\nimport { playerToSpec } from \"../core/proto_utils/utils.js\";\nimport { Sim } from \"../core/sim.js\";\nimport { SimUI } from \"../core/sim_ui.js\";\nimport { EventID, TypedEvent } from \"../core/typed_event.js\";\nimport { BlessingsPicker } from \"./blessings_picker.js\";\nimport * as ImportExport from \"./import_export.js\";\nimport { implementedSpecs } from \"./presets.js\";\nimport { RaidPicker } from \"./raid_picker.js\";\nimport { RaidTab } from \"./raid_tab.js\";\nimport { SettingsTab } from \"./settings_tab.js\";\n\ndeclare let pako: any;\n\nexport interface RaidSimConfig {\n\tknownIssues?: Array<string>,\n}\n\nconst extraKnownIssues: Array<string> = [\n\t//'We\\'re still missing implementations for many specs. If you\\'d like to help us out, check out our <a href=\"https://github.com/WoWLegacySims/wotlk\">Github project</a> or <a href=\"https://discord.gg/jJMPr9JWwx\">join our discord</a>!',\n];\n\nexport class RaidSimUI extends SimUI {\n\tprivate readonly config: RaidSimConfig;\n\tprivate raidSimResultsManager: RaidSimResultsManager | null = null;\n\tpublic raidPicker: RaidPicker | null = null;\n\tpublic blessingsPicker: BlessingsPicker | null = null;\n\n\t// Emits when the raid comp changes. Includes changes to buff bots.\n\treadonly compChangeEmitter = new TypedEvent<void>();\n\treadonly changeEmitter = new TypedEvent<void>();\n\n\treadonly referenceChangeEmitter = new TypedEvent<void>();\n\n\tconstructor(parentElem: HTMLElement, config: RaidSimConfig) {\n\t\tsuper(parentElem, new Sim(), {\n\t\t\tcssClass: 'raid-sim-ui',\n\t\t\tcssScheme: 'raid',\n\t\t\tspec: null,\n\t\t\tlaunchStatus: raidSimStatus,\n\t\t\tknownIssues: (config.knownIssues || []).concat(extraKnownIssues),\n\t\t});\n\n\t\tthis.config = config;\n\n\t\tthis.sim.raid.compChangeEmitter.on(eventID => this.compChangeEmitter.emit(eventID));\n\t\t[\n\t\t\tthis.compChangeEmitter,\n\t\t\tthis.sim.changeEmitter,\n\t\t].forEach(emitter => emitter.on(eventID => this.changeEmitter.emit(eventID)));\n\t\tthis.changeEmitter.on(() => this.recomputeSettingsLayout());\n\n\t\tthis.sim.setModifyRaidProto(raidProto => this.modifyRaidProto(raidProto));\n\t\tthis.sim.waitForInit().then(() => this.loadSettings());\n\n\t\tthis.addSidebarComponents();\n\t\tthis.addTopbarComponents();\n\t\tthis.addRaidTab();\n\t\tthis.addSettingsTab();\n\t\tthis.addDetailedResultsTab();\n\t}\n\n\tprivate loadSettings() {\n\t\tconst initEventID = TypedEvent.nextEventID();\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tlet loadedSettings = false;\n\n\t\t\tconst savedSettings = window.localStorage.getItem(this.getSettingsStorageKey());\n\t\t\tif (savedSettings != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconst settings = RaidSimSettings.fromJsonString(savedSettings);\n\t\t\t\t\tthis.fromProto(initEventID, settings);\n\t\t\t\t\tloadedSettings = true;\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.warn('Failed to parse saved settings: ' + e);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!loadedSettings) {\n\t\t\t\tthis.applyDefaults(initEventID);\n\t\t\t}\n\n\t\t\t// This needs to go last so it doesn't re-store things as they are initialized.\n\t\t\tthis.changeEmitter.on(eventID => {\n\t\t\t\tconst jsonStr = RaidSimSettings.toJsonString(this.toProto());\n\t\t\t\twindow.localStorage.setItem(this.getSettingsStorageKey(), jsonStr);\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate addSidebarComponents() {\n\t\tthis.raidSimResultsManager = addRaidSimAction(this);\n\t\tthis.raidSimResultsManager.changeEmitter.on(eventID => this.referenceChangeEmitter.emit(eventID));\n\t}\n\n\tprivate addTopbarComponents() {\n\t\tthis.simHeader.addImportLink('JSON', parent => new ImportExport.RaidJsonImporter(this.rootElem, this));\n\t\tthis.simHeader.addImportLink('WCL', parent => new ImportExport.RaidWCLImporter(this.rootElem, this));\n\n\t\tthis.simHeader.addExportLink('JSON', parent => new ImportExport.RaidJsonExporter(this.rootElem, this));\n\t}\n\n\tprivate addRaidTab() {\n\t\tnew RaidTab(this.simTabContentsContainer, this);\n\t}\n\n\tprivate addSettingsTab() {\n\t\tnew SettingsTab(this.simTabContentsContainer, this);\n\t}\n\n\tprivate addDetailedResultsTab() {\n\t\tthis.addTab('Results', 'detailed-results-tab', `\n\t\t\t<div class=\"detailed-results\">\n\t\t\t</div>\n\t\t`);\n\n\t\tconst detailedResults = new EmbeddedDetailedResults(this.rootElem.getElementsByClassName('detailed-results')[0] as HTMLElement, this, this.raidSimResultsManager!);\n\t}\n\n\tprivate recomputeSettingsLayout() {\n\t\twindow.dispatchEvent(new Event('resize'));\n\t}\n\n\tprivate modifyRaidProto(raidProto: RaidProto) {\n\t\t// Apply blessings.\n\t\tconst numPaladins = this.getClassCount(Class.ClassPaladin);\n\t\tconst blessingsAssignments = this.blessingsPicker!.getAssignments();\n\t\timplementedSpecs.forEach(spec => {\n\t\t\tconst playerProtos = raidProto.parties\n\t\t\t\t.map(party => party.players.filter(player => player.class != Class.ClassUnknown && playerToSpec(player) == spec))\n\t\t\t\t.flat();\n\n\t\t\tblessingsAssignments.paladins.forEach((paladin, i) => {\n\t\t\t\tif (i >= numPaladins) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (paladin.blessings[spec] == Blessings.BlessingOfKings) {\n\t\t\t\t\tplayerProtos.forEach(playerProto => playerProto.buffs!.blessingOfKings = true);\n\t\t\t\t} else if (paladin.blessings[spec] == Blessings.BlessingOfMight) {\n\t\t\t\t\tplayerProtos.forEach(playerProto => playerProto.buffs!.blessingOfMight = TristateEffect.TristateEffectImproved);\n\t\t\t\t} else if (paladin.blessings[spec] == Blessings.BlessingOfWisdom) {\n\t\t\t\t\tplayerProtos.forEach(playerProto => playerProto.buffs!.blessingOfWisdom = TristateEffect.TristateEffectImproved);\n\t\t\t\t} else if (paladin.blessings[spec] == Blessings.BlessingOfSanctuary) {\n\t\t\t\t\tplayerProtos.forEach(playerProto => playerProto.buffs!.blessingOfSanctuary = true);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tgetCurrentData(): ReferenceData | null {\n\t\tif (this.raidSimResultsManager) {\n\t\t\treturn this.raidSimResultsManager.getCurrentData();\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tgetReferenceData(): ReferenceData | null {\n\t\tif (this.raidSimResultsManager) {\n\t\t\treturn this.raidSimResultsManager.getReferenceData();\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tgetActivePlayers(): Array<Player<any>> {\n\t\treturn this.sim.raid.getActivePlayers();\n\t}\n\n\tgetClassCount(playerClass: Class): number {\n\t\treturn this.getActivePlayers().filter(player => player.isClass(playerClass)).length;\n\t}\n\n\tapplyDefaults(eventID: EventID) {\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tthis.sim.raid.fromProto(eventID, RaidProto.create({\n\t\t\t\tnumActiveParties: 5,\n\t\t\t}));\n\t\t\tthis.sim.setExpansion(eventID, 1);\n\t\t\tthis.sim.encounter.applyDefaults(eventID);\n\t\t\tthis.sim.applyDefaults(eventID, true, true);\n\t\t\tthis.sim.setShowDamageMetrics(eventID, true);\n\t\t});\n\t}\n\n\ttoProto(): RaidSimSettings {\n\t\treturn RaidSimSettings.create({\n\t\t\tsettings: this.sim.toProto(),\n\t\t\traid: this.sim.raid.toProto(true),\n\t\t\tblessings: this.blessingsPicker!.getAssignments(),\n\t\t\tencounter: this.sim.encounter.toProto(),\n\t\t});\n\t}\n\n\ttoLink(): string {\n\t\tconst proto = this.toProto();\n\t\t// When sharing links, people generally don't intend to share settings.\n\t\tproto.settings = undefined;\n\n\t\tconst protoBytes = RaidSimSettings.toBinary(proto);\n\t\tconst deflated = pako.deflate(protoBytes, { to: 'string' });\n\t\tconst encoded = btoa(String.fromCharCode(...deflated));\n\n\t\tconst linkUrl = new URL(window.location.href);\n\t\tlinkUrl.hash = encoded;\n\t\treturn linkUrl.toString();\n\t}\n\n\tgetLevel(): number {\n\t\treturn 80 //@todo raidsim levelled\n\t}\n\n\tfromProto(eventID: EventID, settings: RaidSimSettings) {\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tif (settings.settings) {\n\t\t\t\tthis.sim.fromProto(eventID, settings.settings);\n\t\t\t}\n\t\t\tthis.sim.raid.fromProto(eventID, settings.raid || RaidProto.create());\n\t\t\tthis.sim.encounter.fromProto(eventID, settings.encounter || EncounterProto.create());\n\t\t\tthis.blessingsPicker!.setAssignments(eventID, settings.blessings || BlessingsAssignments.create());\n\t\t});\n\t}\n\n\tclearRaid(eventID: EventID) {\n\t\tthis.sim.raid.clear(eventID);\n\t}\n\n\t// Returns the actual key to use for local storage, based on the given key part and the site context.\n\tgetStorageKey(keyPart: string): string {\n\t\treturn '__wotlk_raid__' + keyPart;\n\t}\n\n\tgetSavedRaidStorageKey(): string {\n\t\treturn this.getStorageKey('__savedRaid__');\n\t}\n}\n","import { RaidSimUI } from './raid_sim_ui.js';\n\nconst ui = new RaidSimUI(document.body, {});\n"],"names":["specSimFactories","Spec","SpecTankDeathknight","parentElem","player","TankDeathknightSimUI","SpecDeathknight","DeathknightSimUI","SpecBalanceDruid","BalanceDruidSimUI","SpecFeralDruid","FeralDruidSimUI","SpecFeralTankDruid","FeralTankDruidSimUI","SpecRestorationDruid","RestorationDruidSimUI","SpecElementalShaman","ElementalShamanSimUI","SpecEnhancementShaman","EnhancementShamanSimUI","SpecRestorationShaman","RestorationShamanSimUI","SpecHunter","HunterSimUI","SpecMage","MageSimUI","SpecRogue","RogueSimUI","SpecHolyPaladin","HolyPaladinSimUI","SpecProtectionPaladin","ProtectionPaladinSimUI","SpecRetributionPaladin","RetributionPaladinSimUI","SpecHealingPriest","HealingPriestSimUI","SpecShadowPriest","ShadowPriestSimUI","SpecSmitePriest","SmitePriestSimUI","SpecWarrior","WarriorSimUI","SpecProtectionWarrior","ProtectionWarriorSimUI","SpecWarlock","WarlockSimUI","playerPresets","naturalSpecOrder","map","getSpecConfig","config","raidSimPresets","flat","implementedSpecs","Set","preset","spec","RaidJsonImporter","Importer","constructor","parent","simUI","super","__publicField","this","descriptionElem","innerHTML","onImport","data","settings","RaidSimSettings","fromJsonString","ignoreUnknownFields","fromProto","TypedEvent","nextEventID","close","RaidJsonExporter","Exporter","title","allowDownload","init","getData","JSON","stringify","toJson","toProto","RaidWCLImporter","textElem","classList","add","getWCLBearerToken","token","response","fetch","method","headers","Authorization","btoa","body","URLSearchParams","grant_type","json","access_token","queryWCL","query","Accept","queryURL","queryCounter","res","encodeURI","result","errors","length","errorStr","e","message","join","Error","console","debug","parseURL","url","match","urlData","reportID","fightID","fightDataQuery","fights","reportData","report","String","id","getRateLimit","importLink","importButton","disabled","rootElem","style","cursor","doImport","error","alert","removeProperty","reportDataQuery","racialSpells","professionSpells","spell","externalCDSpells","samePartyHealingSpells","otherPartyHealingSpells","wclData","playerData","playerDetails","entries","freezeAllAndDo","eventID","wclPlayers","wclPlayer","WCLSimPlayer","inferRace","inferProfessions","inferAssignments","inferPartyComposition","numPaladins","filter","getClass","Class","ClassPaladin","create","encounter","getEncounterProto","raid","getRaidProto","blessings","makeDefaultBlessings","clearRaid","forEach","p","setRace","Race","RaceUnknown","faction","guild","raidPicker","getCurrentFaction","Faction","Horde","combatantInfoEvents","combatantInfo","auras","aura","ability","sourcePlayer","find","source","getRace","RaceDraenei","log","name","raceNames","get","Alliance","castEventsBySpellId","bucket","reportCastEvents","event","abilityGameID","sourceID","race","raceToFaction","defaultFactionRaces","inferredProfessions","includes","profession","professionNames","push","professions","distinct","concat","getGear","getProfessionRequirements","Profession","Engineering","Jewelcrafting","setProfessions","fightCastEvents","targetPlayer","targetID","class","specOptions","applyFunc","toUnitReference","setSpecOptions","setPlayersInParty","player1","player2","reason","addPlayerInParty","healEventsBySpellId","fightHealEvents","spellEvents","spellEventsByTimestamp","timestamp","_timestamp","eventsAtTime","Object","spellTargets","i","j","inferredPlayers","playersInParty","nextEmptyPartyIdx","partyMembers","numMembers","member","partyIdx","raidIndex","allRaidIndexes","Array","keys","nextIdx","idx","some","fight","EncounterProto","duration","endTime","startTime","targets","closestEncounterPreset","sim","db","getAllPresetEncounters","enc","path","mob","target","Encounter","defaultTargetProto","RaidProto","parties","MAX_NUM_PARTIES","_party","PartyProto","players","_player","PlayerProto","positionInParty","playerProto","isTankSpec","playerToSpec","tanks","type","wclSpec","icon","split","fullType","foundSpec","fullTypeToSpec","Player","getMatchingPreset","talents","toString","applySharedDefaults","setTalentsString","talentsString","setGlyphs","glyphs","setConsumes","consumes","setName","setGear","lookupEquipmentSpec","EquipmentSpec","items","gear","ItemSpec","enchant","permanentEnchant","gems","gemInfo","matchingPresets","presetIdx","distance","presetTalents","getTalentTreePoints","newDistance","reduce","acc","v","Math","abs","guid","UnitReference","UnitReference_Type","index","other","DeathKnightBlood","DeathKnightLichborne","DeathKnightRuneblade","DeathKnightBloodDPS","DeathKnightFrost","DeathKnightUnholy","DruidBalance","DruidFeral","DruidWarden","DruidGuardian","DruidRestoration","HunterBeastMastery","HunterSurvival","HunterMarksmanship","MageArcane","MageFire","MageFrost","PaladinHoly","PaladinJusticar","PaladinProtection","PaladinRetribution","PriestHoly","PriestDiscipline","PriestShadow","PriestSmite","RogueAssassination","RogueCombat","RogueSubtlety","ShamanElemental","ShamanEnhancement","ShamanRestoration","WarlockDestruction","WarlockAffliction","WarlockDemonology","WarriorArms","WarriorFury","WarriorChampion","WarriorWarrior","WarriorGladiator","WarriorProtection","RaceBloodElf","RaceTroll","RaceOrc","RaceGnome","RaceDwarf","RaceTauren","RaceUndead","RaceHuman","Herbalism","Skinning","ClassDruid","raidTarget","options","getSpecOptions","innervateTarget","ClassPriest","powerInfusionTarget","ClassRogue","tricksOfTheTradeTarget","ClassDeathknight","unholyFrenzyTarget","NEW_PLAYER","RaidPicker","Component","raidSimUI","raidControls","document","createElement","appendChild","newPlayerPicker","NewPlayerPicker","EnumPicker","label","labelTooltip","values","value","changedEvent","numActivePartiesChangeEmitter","getValue","getNumActiveParties","setValue","newValue","setNumActiveParties","_picker","factionChangeEmitter","getFaction","picker","setFaction","partiesContainer","partyPickers","getParties","party","PartyPicker","updateActiveParties","partyPicker","remove","on","ondragend","_event","clearDragPlayer","clearDragParty","getCurrentExpansion","getExpansion","getPlayerPicker","floor","MAX_PARTY_SIZE","playerPickers","getPlayerPickers","setDragPlayer","fromIndex","currentDragPlayer","currentDragPlayerFromIndex","currentDragType","setDragParty","currentDragParty","setAttribute","playersContainer","getElementsByClassName","PlayerPicker","dpsResultElem","referenceDeltaElem","referenceChangeEmitter","currentData","getCurrentData","referenceData","getReferenceData","partyDps","simResult","raidMetrics","dps","avg","referenceDps","textContent","toFixed","formatDeltaTextElem","ondragstart","dataTransfer","dropEffect","effectAllowed","dragEnterCounter","ondragenter","preventDefault","ondragleave","ondragover","ondrop","srcPartyPicker","srcPlayerPicker","dstPlayerPicker","srcPlayer","dstPlayer","setPlayer","labelElem","iconElem","nameElem","resultsElem","compChangeEmitter","newPlayer","getPlayer","playerDps","getPlayerWithRaidIndex","dropData","dragType","fromPlayerPicker","binary","atob","bytes","Uint8Array","charCodeAt","fromBinary","localPlayer","clone","update","getTanks","emptyIdx","findIndex","tank","getPlayerFromUnitReference","setTanks","makeUnitReference","newOptions","newUnitReference","getRaidIndex","focusMagicTarget","applyNewPlayerAssignments","emit","className","classCssClass","cssClassForClass","getSpecIcon","getName","querySelector","bindPlayerEvents","addEventListener","emptyName","dragStart","playerDataProto","setData","fromCharCode","toBinary","editElem","copyElem","deleteElem","Tooltip","getOrCreateInstance","deleteTooltip","setDragImage","onclick","PlayerEditorModal","hide","BaseModal","closeButton","fixed","header","insertAdjacentHTML","editorRoot","getEnumValues","wowClass","ClassUnknown","specToClass","classPresetsContainer","matchingPreset","presetElemFragment","tooltip","iconUrl","presetElem","children","dragImage","Image","src","Glyphs","defaultName","setProfession1","otherDefaults","profession1","setProfession2","profession2","setDistanceFromTarget","distanceFromTarget","waitForInit","then","gearSet","defaultGear","RaidStats","categories","RAID_STATS_OPTIONS","sections","section","sectionElem","contentElem","categoryOptions","RaidStatsCategory","changeEmitter","c","counterElem","tooltipElem","effects","opt","RaidStatsEffect","statsLink","customClass","html","placement","effect","total","sum","count","curPlayers","playerCssClass","textCssClassForClass","actionId","fill","getActivePlayers","condition","raidData","negateIf","val","cond","playerClass","clazz","extraCondition","isClass","playerClassAndTalentInternal","talentName","negateTalent","Boolean","getTalents","playerClassAndTalent","playerClassAndMissingTalent","playerSpecAndTalentInternal","isSpec","playerSpecAndTalent","raidBuff","buffName","getBuffs","isHealingSpec","isMeleeDpsSpec","isRangedDpsSpec","ActionId","fromSpellId","ClassShaman","fromItemId","PaladinAura","DevotionAura","totems","earth","EarthTotem","StoneskinTotem","StrengthOfEarthTotem","ClassMage","ClassWarlock","summon","WarlockSummon","Felhunter","ClassWarrior","shout","WarriorShout","WarriorShoutBattle","ClassHunter","water","WaterTotem","ManaSpringTotem","air","AirTotem","WindfuryTotem","fire","FireTotem","TotemOfWrath","FlametongueTotem","WrathOfAirTotem","WarriorShoutCommanding","Imp","petType","HunterPetType","Worm","Wasp","Bat","Rhino","CarrionBird","RaidTab","SimTab","identifier","leftPanel","rightPanel","contentContainer","buildTabContent","savedRaidManager","SavedDataManager","storageKey","getSavedRaidStorageKey","SavedRaid","blessingsPicker","getAssignments","newRaid","setAssignments","BlessingsAssignments","changeEmitters","equals","a","b","fromJson","obj","loadUserData","UnitReferencePicker","Input","modObj","curPlayer","curUnitReference","getInputValue","buttonElem","dropdownElem","currentOptions","updateOptions","makeTargetOptions","isDropdown","getPlayers","option","makeOption","prevUnitReference","setInputValue","inputChanged","makeOptionElem","getInputElem","emptyUnitReference","optionData","outerHTML","playerFragment","AssignmentsPicker","innervatesPicker","InnervatesPicker","powerInfusionsPicker","PowerInfusionsPicker","tricksOfTheTradesPicker","TricksOfTheTradesPicker","unholyFrenzyPicker","UnholyFrenzyPicker","focusMagicsPicker","FocusMagicsPicker","AssignedBuffPicker","targetPickers","getTitle","sourcePlayers","getSourcePlayers","sourcePlayerIndex","row","sourceElem","arrow","raidTargetPicker","extraCssClasses","noTargetLabel","specOptionsChangeEmitter","getPlayerValue","setPlayerValue","targetPickerData","targetPicker","powerInfusion","hysteria","BlessingsPicker","assignments","specs","memeSpecs","paladinIndexes","append","buildSpecIcon","container","paladinIdx","pickers","blessingPicker","IconEnumPicker","numColumns","color","classColors","Blessings","BlessingUnknown","BlessingOfKings","BlessingOfMight","BlessingOfWisdom","BlessingOfSanctuary","zeroValue","enableWhen","min","getClassCount","paladins","updatePickers","_eventID","fragment","titleIcons","specNames","newAssignments","TanksPicker","tanksChangeEmitter","raid2","SettingsTab","buildColumn","column1","column2","column3","buildEncounterSettings","buildConsumesSettings","buildTankSettings","buildAssignmentSettings","buildOtherSettings","buildBlessingsPicker","buildSavedDataPickers","contentBlock","ContentBlock","EncounterPicker","bodyElement","showExecuteProportion","makeBooleanRaidIconBuffInput","Tooltips.BLESSINGS_SECTION","savedEncounterManager","getSavedEncounterStorageKey","SavedEncounter","newEncounter","field","IconPicker","states","buffsChangeEmitter","newBuffs","setBuffs","extraKnownIssues","SimUI","Sim","cssClass","cssScheme","launchStatus","raidSimStatus","knownIssues","emitter","recomputeSettingsLayout","setModifyRaidProto","raidProto","modifyRaidProto","loadSettings","addSidebarComponents","addTopbarComponents","addRaidTab","addSettingsTab","addDetailedResultsTab","initEventID","loadedSettings","savedSettings","window","localStorage","getItem","getSettingsStorageKey","warn","applyDefaults","jsonStr","toJsonString","setItem","raidSimResultsManager","addRaidSimAction","simHeader","addImportLink","ImportExport.RaidJsonImporter","ImportExport.RaidWCLImporter","addExportLink","ImportExport.RaidJsonExporter","simTabContentsContainer","addTab","EmbeddedDetailedResults","dispatchEvent","Event","blessingsAssignments","playerProtos","paladin","buffs","blessingOfKings","blessingOfMight","TristateEffect","TristateEffectImproved","blessingOfWisdom","blessingOfSanctuary","numActiveParties","setExpansion","setShowDamageMetrics","toLink","proto","protoBytes","deflated","pako","deflate","to","encoded","linkUrl","URL","location","href","hash","getLevel","clear","getStorageKey","keyPart"],"mappings":"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"}